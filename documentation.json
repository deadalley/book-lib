{
    "pipes": [
        {
            "name": "BookFilterPipe",
            "id": "pipe-BookFilterPipe-e9f1c38dd358958fb9e8f18bb5162eff",
            "file": "src/pipes/book-filter.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        },
                        {
                            "name": "filterMethod",
                            "type": "any"
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterMethod",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bookFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\nimport { intersection } from 'lodash'\nimport { Book } from 'models/book.model'\n\n@Pipe({\n  name: 'bookFilter',\n})\nexport class BookFilterPipe implements PipeTransform {\n  transform(books: Book[], filterMethod: any, ...args): any {\n    if (!filterMethod || filterMethod === 'no filter') {\n      return books\n    }\n\n    if (filterMethod === 'tags') {\n      const tags = args[0]\n      if (!tags) {\n        return books\n      }\n      if (!tags.length) {\n        return books\n      }\n      return books.filter(book => !!intersection(book.tags, tags).length)\n    }\n\n    return books.filter(book => book[filterMethod])\n  }\n}\n"
        },
        {
            "name": "BookGroupingPipe",
            "id": "pipe-BookGroupingPipe-7bd1303ec6dd013d1729ba3854b7923f",
            "file": "src/pipes/book-grouping.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        },
                        {
                            "name": "groupingMethod",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupingMethod",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bookGrouping",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\nimport { Book } from 'models/book.model'\n\n@Pipe({\n  name: 'bookGrouping',\n})\nexport class BookGroupingPipe implements PipeTransform {\n  transform(books: Book[], groupingMethod?: any): any {\n    if (!groupingMethod || groupingMethod === 'no grouping') {\n      return {}\n    }\n    const orderedItems = {}\n\n    if (groupingMethod === 'genre') {\n      books.forEach(book => {\n        if (!book.genres) {\n          book.genres = ['No genre']\n        }\n        book.genres.forEach(genre => {\n          if (Object.keys(orderedItems).includes(genre)) {\n            orderedItems[genre].push(book)\n          } else {\n            orderedItems[genre] = [book]\n          }\n        })\n      })\n      return orderedItems\n    }\n\n    books.forEach(book => {\n      let order = book[groupingMethod]\n      if (groupingMethod === 'rating') {\n        order = `${book.rating || 0}`\n      }\n      if (groupingMethod === 'year') {\n        order = `${book.year || 'Unknown year'}`\n      }\n      if (groupingMethod === 'title') {\n        order = order[0].toLocaleUpperCase()\n      }\n      if (groupingMethod === 'date') {\n        order = new Date(book.date).toLocaleDateString()\n      }\n      if (groupingMethod === 'language') {\n        order = book.language || 'Unknown language'\n      }\n\n      if (Object.keys(orderedItems).includes(order)) {\n        orderedItems[order].push(book)\n      } else {\n        orderedItems[order] = [book]\n      }\n    })\n\n    return orderedItems\n  }\n}\n"
        },
        {
            "name": "CollectionGroupingPipe",
            "id": "pipe-CollectionGroupingPipe-9928564422b9830d58c27af422562a83",
            "file": "src/pipes/collection-grouping.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "collections",
                            "type": "Collection[]"
                        },
                        {
                            "name": "groupingMethod",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "collections",
                            "type": "Collection[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupingMethod",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "collectionGrouping",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\nimport { Collection } from 'models/collection.model'\n\n@Pipe({\n  name: 'collectionGrouping',\n})\nexport class CollectionGroupingPipe implements PipeTransform {\n  transform(collections: Collection[], groupingMethod?: any): any {\n    const orderedCollections = Array.from(collections)\n    if (!groupingMethod || groupingMethod === 'no grouping') {\n      return orderedCollections\n    }\n\n    return orderedCollections.sort((a, b) => {\n      let sortA, sortB\n      if (groupingMethod === 'size') {\n        sortA = a.books.length\n        sortB = b.books.length\n      } else {\n        sortA = a[groupingMethod]\n        sortB = b[groupingMethod]\n      }\n      if (sortA < sortB) {\n        return -1\n      }\n      if (sortA > sortB) {\n        return 1\n      }\n      return 0\n    })\n  }\n}\n"
        },
        {
            "name": "IterableObjectPipe",
            "id": "pipe-IterableObjectPipe-aa270d59ccc5ca1918dd67173ba921f9",
            "file": "src/pipes/iterable-object.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "object",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "iterable",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'iterable',\n})\nexport class IterableObjectPipe implements PipeTransform {\n  transform(object: any): any {\n    if (!object) {\n      return null\n    }\n    return Object.keys(object)\n      .map(key => {\n        const id = `id${key\n          .split(' ')\n          .join('_')\n          .split('/')\n          .join('_')\n          .toLowerCase()}`\n        return { id, key, value: object[key] }\n      })\n      .sort((a, b) => {\n        if (a.key < b.key) {\n          return -1\n        }\n        if (a.key > b.key) {\n          return 1\n        }\n        return 0\n      })\n  }\n}\n"
        },
        {
            "name": "PagePipe",
            "id": "pipe-PagePipe-c56a087559df2ff274203e902efcca66",
            "file": "src/pipes/page.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "optional": true
                        },
                        {
                            "name": "maxBooks",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxBooks",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "page",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\nimport { Book } from 'database/models/book.model'\n\n@Pipe({\n  name: 'page',\n})\nexport class PagePipe implements PipeTransform {\n  transform(books: Book[], page?: number, maxBooks?: number): any {\n    if (!page && !maxBooks) {\n      return books\n    }\n\n    return books.slice((page - 1) * maxBooks, page * maxBooks)\n  }\n}\n"
        },
        {
            "name": "PushToBottomPipe",
            "id": "pipe-PushToBottomPipe-140415d49f1c971a4a21311b5373bc96",
            "file": "src/pipes/push-to-bottom.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "any[]"
                        },
                        {
                            "name": "itemToPush",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemToPush",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pushToBottom",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'pushToBottom'\n})\nexport class PushToBottomPipe implements PipeTransform {\n  transform(array: any[], itemToPush?: string): any {\n    if (!itemToPush) { return array }\n    const position = array.findIndex((item) => item.key === itemToPush)\n    const element = array.splice(position, 1)[0]\n    array.push(element)\n    return array\n  }\n}\n"
        },
        {
            "name": "SearchFilterPipe",
            "id": "pipe-SearchFilterPipe-d6afc94abf074dbc007aa30ef5cdfff1",
            "file": "src/pipes/search-filter.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]"
                        },
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "keys",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "query",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "searchFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'searchFilter',\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: any[], query?: string, keys?: string[]): any {\n    if (!query) {\n      return items\n    }\n\n    return items.filter(item => {\n      const queryItems = query.split(' ').filter(it => !!it)\n      if (keys) {\n        return keys.some(key =>\n          queryItems.some(\n            queryItem =>\n              item[key] &&\n              item[key].toLowerCase().includes(queryItem.toLowerCase())\n          )\n        )\n      }\n      const lowerCaseItems = item\n        .split(' ')\n        .filter(it => !!it)\n        .map(it => it.toLowerCase())\n      return lowerCaseItems.some(it =>\n        queryItems.some(queryItem => it.includes(queryItem.toLowerCase()))\n      )\n    })\n  }\n}\n"
        },
        {
            "name": "TruncatePipe",
            "id": "pipe-TruncatePipe-20020ce6e1c693a8d3009cef5fa23f9e",
            "file": "src/pipes/truncate.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "truncate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\nconst PARAGRAPH_SPLIT = '<br /><br />'\n\n@Pipe({\n  name: 'truncate',\n})\nexport class TruncatePipe implements PipeTransform {\n  transform(\n    text: string,\n    { length, paragraphs, paragraphStart, paragraphEnd }\n  ): any {\n    if (length) {\n      return `${text.substr(0, length)}...`\n    }\n\n    if (paragraphs) {\n      return text\n        .split(PARAGRAPH_SPLIT)\n        .slice(0, paragraphs)\n        .join(PARAGRAPH_SPLIT)\n    }\n\n    if (paragraphStart || paragraphEnd) {\n      return text\n        .split(PARAGRAPH_SPLIT)\n        .slice(paragraphStart, paragraphEnd)\n        .join(PARAGRAPH_SPLIT)\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Author",
            "id": "interface-Author-5aa9e9e0370424143c5ee2373a4374ed",
            "file": "src/models/author.model.ts",
            "type": "interface",
            "sourceCode": "import { Book } from './book.model'\n\nexport interface Author {\n  id: number\n  name: string\n  about: string\n  books: Book[]\n  imageSmall?: string\n  imageLarge?: string\n  goodreadsLink?: string\n  isSelected: boolean\n}\n",
            "properties": [
                {
                    "name": "about",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "goodreadsLink",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "imageLarge",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "imageSmall",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Book",
            "id": "interface-Book-fead567c9d1dd174ad7aed63521943a9",
            "file": "src/models/book.model.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\n  id: string\n  ownerId: string\n  title: string\n  author: string\n  owned: boolean\n  read: boolean\n  favorite: boolean\n  wishlist: boolean\n  date: string\n  isbn?: number\n  original?: string\n  language?: string\n  publisher?: string\n  year?: number\n  pages?: number\n  genres?: string[]\n  collections?: string[]\n  tags?: string[]\n  notes?: string\n  imageSmall?: string\n  imageLarge?: string\n  rating?: number\n  isSelected?: boolean\n  canBeSelected?: boolean\n  goodreadsId?: number\n  goodreadsLink?: string\n  goodreadsAuthorId?: number\n}\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "canBeSelected",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "collections",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "favorite",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "genres",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "goodreadsAuthorId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "goodreadsId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "goodreadsLink",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageLarge",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "imageSmall",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isbn",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "language",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "notes",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "original",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "owned",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "ownerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "pages",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "publisher",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "read",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "wishlist",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "year",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Book",
            "id": "interface-Book-23087e0be34848c867e6e95205d945ca-1",
            "file": "src/database/models/book.model.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\n  id: string\n  ownerId: string\n  title: string\n  author: string\n  owned: boolean\n  read: boolean\n  favorite: boolean\n  wishlist: boolean\n  date: string\n  isbn?: number\n  original?: string\n  language?: string\n  publisher?: string\n  year?: number\n  pages?: number\n  genres?: string[]\n  collections?: string[]\n  tags?: string[]\n  notes?: string\n  imageSmall?: string\n  imageLarge?: string\n  rating?: number\n  goodreadsId?: number\n  goodreadsLink?: string\n  goodreadsAuthorId?: number\n}\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "collections",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "favorite",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "genres",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "goodreadsAuthorId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "goodreadsId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "goodreadsLink",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageLarge",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "imageSmall",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isbn",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "language",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "notes",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "original",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "owned",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "ownerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "pages",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "publisher",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "read",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "wishlist",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "year",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Book-1"
        },
        {
            "name": "Collection",
            "id": "interface-Collection-29c4c599f39aa86565f4652be7918f5c",
            "file": "src/models/collection.model.ts",
            "type": "interface",
            "sourceCode": "import { Book } from './book.model'\n\nexport interface Collection {\n  id: string\n  ownerId: string\n  title: string\n  books: Book[]\n  description: string\n}\n",
            "properties": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ownerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Collection",
            "id": "interface-Collection-654d5039899bbfe5c17a2b749321b3ae-1",
            "file": "src/database/models/collection.model.ts",
            "type": "interface",
            "sourceCode": "export interface Collection {\n  id: string\n  ownerId: string\n  title: string\n  books: string[]\n  description: string\n}\n",
            "properties": [
                {
                    "name": "books",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "ownerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Collection-1"
        },
        {
            "name": "GenericInterface",
            "id": "interface-GenericInterface-243efca8dcd136d4fd979dd2004b9e48",
            "file": "src/factories/utils.ts",
            "type": "interface",
            "sourceCode": "import * as Factory from 'factory.ts'\nimport { lorem, random } from 'faker'\n\nexport const FactoryArray = (factory, n = 10): any[] => {\n  const _ret = new Array()\n  for (let i = 0; i < n; i++) {\n    _ret.push(factory.build())\n  }\n\n  return _ret\n}\n\nexport const GenericFactory = Factory.makeFactory<GenericInterface>({\n  number: random.number(),\n  string: lorem.sentence()\n})\n\ninterface GenericInterface {\n  number: number,\n  string: string\n}\n",
            "properties": [
                {
                    "name": "number",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "string",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RouteInfo",
            "id": "interface-RouteInfo-0921858001694bb9a36742eb1b2f651e",
            "file": "src/app/dashboard/sidebar/sidebar.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { AuthService } from 'services/auth.service'\n\ndeclare var $: any\n\nexport interface RouteInfo {\n  path: string\n  title: string\n  icon: string\n  class: string\n}\n\nexport const ROUTES: RouteInfo[] = [\n  { path: 'home', title: 'Home', icon: 'pe-7s-home', class: '' },\n  { path: 'books', title: 'Books', icon: 'pe-7s-notebook', class: '' },\n  {\n    path: 'collections',\n    title: 'Collections',\n    icon: 'pe-7s-albums',\n    class: '',\n  },\n  { path: 'authors', title: 'Authors', icon: 'pe-7s-pen', class: '' },\n  { path: 'goodreads', title: 'Goodreads', icon: 'pe-7s-server', class: '' },\n  {\n    path: 'import',\n    title: 'Import library',\n    icon: 'pe-7s-cloud-upload',\n    class: '',\n  },\n  { path: 'profile', title: 'Profile', icon: 'pe-7s-user', class: '' },\n]\n\n@Component({\n  moduleId: module.id,\n  selector: 'sidebar-cmp',\n  templateUrl: 'sidebar.component.html',\n  styleUrls: ['sidebar.component.css'],\n})\nexport class SidebarComponent implements OnInit {\n  public menuItems: any[]\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.menuItems = ROUTES.filter(menuItem => menuItem)\n  }\n\n  isNotMobileMenu() {\n    if ($(window).width() > 991) {\n      return false\n    }\n    return true\n  }\n\n  logout() {\n    this.authService.logout()\n  }\n}\n",
            "properties": [
                {
                    "name": "class",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-3759a29a5e194f645e4d4905ee38588f",
            "file": "src/models/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: string\n  uid: string\n  name: string\n  email: string\n  books: string[]\n  collections: string[]\n  goodreadsId: number\n  avatarUrl: string\n  backgroundUrl: string\n  displayWelcomeMessage: boolean\n}\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "backgroundUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "books",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "collections",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "displayWelcomeMessage",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "goodreadsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "uid",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-3759a29a5e194f645e4d4905ee38588f-1",
            "file": "src/database/models/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: string\n  uid: string\n  name: string\n  email: string\n  books: string[]\n  collections: string[]\n  goodreadsId: number\n  avatarUrl: string\n  backgroundUrl: string\n  displayWelcomeMessage: boolean\n}\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "backgroundUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "books",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "collections",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "displayWelcomeMessage",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "goodreadsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "uid",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3d4e1b7a5493baf813091696ef5c1010",
            "file": "src/services/auth.service.ts",
            "properties": [
                {
                    "name": "_goodreadsId",
                    "defaultValue": "new BehaviorSubject<number>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_userLoaded",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_userRef",
                    "defaultValue": "new BehaviorSubject<string>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "auth0",
                    "defaultValue": "new auth0.WebAuth(this.defaultParams)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clientID",
                    "defaultValue": "environment.auth0Config.clientId",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "defaultParams",
                    "defaultValue": "{\n    clientID: this.clientID,\n    domain: this.domain,\n    responseType: 'token id_token',\n    audience: `https://${this.domain}/userinfo`,\n    redirectUri: this.redirectURI,\n    scope: 'openid',\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "domain",
                    "defaultValue": "environment.auth0Config.domain",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "fireAuth",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "goodreadsId",
                    "defaultValue": "this._goodreadsId.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "localDomain",
                    "defaultValue": "environment.localDomain",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "redirectURI",
                    "defaultValue": "environment.auth0Config.redirectUri",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "userLoaded",
                    "defaultValue": "this._userLoaded.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userRef",
                    "defaultValue": "this._userRef.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [
                {
                    "name": "createUserInDatabase",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199
                },
                {
                    "name": "loginEmail",
                    "args": [
                        {
                            "type": ""
                        },
                        {
                            "name": "onError",
                            "type": "",
                            "defaultValue": "(...args) => {}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onError",
                            "type": "",
                            "defaultValue": "(...args) => {}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140
                },
                {
                    "name": "loginGoodreads",
                    "args": [
                        {
                            "name": "redirectPath",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "redirectPath",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180
                },
                {
                    "name": "processResponse",
                    "args": [
                        {
                            "name": "user",
                            "type": "object"
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "object",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reauthenticateUser",
                    "args": [
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197
                },
                {
                    "name": "sendVerificationEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 217
                },
                {
                    "name": "setupFirebaseSessionListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setupSessionForGoodreadsLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "signInProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 244
                },
                {
                    "name": "signUpWithEmail",
                    "args": [
                        {
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserPassword",
                    "args": [
                        {
                            "name": "oldPassword",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 238,
                    "jsdoctags": [
                        {
                            "name": "oldPassword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { AngularFireAuth } from 'angularfire2/auth'\nimport { Router } from '@angular/router'\nimport { BehaviorSubject } from 'rxjs'\nimport * as firebase from 'firebase/app'\nimport * as auth0 from 'auth0-js'\nimport { DatabaseService } from './database.service'\nimport { SessionService } from './session.service'\nimport { User as LocalUser } from '../models/user.model'\nimport { User as DBUser } from '../database/models/user.model'\nimport { environment } from 'environments/environment'\n\n@Injectable()\nexport class AuthService {\n  private readonly localDomain = environment.localDomain\n  private readonly clientID = environment.auth0Config.clientId\n  private readonly domain = environment.auth0Config.domain\n  private readonly redirectURI = environment.auth0Config.redirectUri\n  private readonly defaultParams = {\n    clientID: this.clientID,\n    domain: this.domain,\n    responseType: 'token id_token',\n    audience: `https://${this.domain}/userinfo`,\n    redirectUri: this.redirectURI,\n    scope: 'openid',\n  }\n\n  private auth0 = new auth0.WebAuth(this.defaultParams)\n\n  private _userRef = new BehaviorSubject<string>(undefined)\n  private _goodreadsId = new BehaviorSubject<number>(undefined)\n  private _userLoaded = new BehaviorSubject<boolean>(false)\n\n  userRef = this._userRef.asObservable()\n  goodreadsId = this._goodreadsId.asObservable()\n  userLoaded = this._userLoaded.asObservable()\n\n  constructor(\n    public fireAuth: AngularFireAuth,\n    private router: Router,\n    private database: DatabaseService,\n    private session: SessionService\n  ) {\n    const user = this.session.localUser\n    if (user) {\n      this._userRef.next(user.id)\n      this._goodreadsId.next(user.goodreadsId)\n    }\n    this.setupSessionForGoodreadsLogin()\n    this.setupFirebaseSessionListener()\n  }\n\n  private setupSessionForGoodreadsLogin() {\n    this.auth0.parseHash((error, result) => {\n      if (result && result.accessToken && result.idToken) {\n        window.location.hash = ''\n\n        this.auth0.client.userInfo(result.accessToken, (err, user) => {\n          const goodreadsId = user.sub.split('|')[2]\n          this.session.goodreadsId = goodreadsId\n          this.database.updateUser(this.session.userId, {\n            goodreadsId,\n          })\n        })\n      } else if (error) {\n        console.log('Could not log in on Goodreads')\n        console.log(error)\n      }\n    })\n  }\n\n  private createUserInDatabase(user, params: object = {}) {\n    return this.database\n      .findUserByParam('uid', user.uid)\n      .then(async userInDatabase => {\n        if (userInDatabase === null) {\n          console.log('User not found in database')\n          console.log('Creating user in database')\n\n          const newUser = {\n            uid: user.uid,\n            name: user.displayName || params['displayName'],\n            email: user.email,\n            displayWelcomeMessage: true,\n            avatarUrl: user.photoUrl || user.photoURL,\n          } as DBUser\n\n          return this.database.createUser(newUser)\n        } else {\n          return userInDatabase as LocalUser\n        }\n      })\n  }\n\n  private processResponse(user: object, params: object = {}) {\n    return this.createUserInDatabase(user, params).then(userInDatabase => {\n      localStorage.setItem('userLoginCredentials', JSON.stringify(user))\n      this.database.isLoggedIn.next(true)\n      this.session.buildSession(userInDatabase)\n      this.router.navigate(['library'])\n    })\n  }\n\n  private setupFirebaseSessionListener() {\n    this.fireAuth.auth.onAuthStateChanged(user => {\n      if (user) {\n        this._userLoaded.next(true)\n      } else {\n        this._userLoaded.next(false)\n      }\n    })\n  }\n\n  loginGoodreads(redirectPath?: string) {\n    const redirectUri = redirectPath\n      ? `${this.localDomain}/${redirectPath}`\n      : this.redirectURI\n\n    this.auth0 = new auth0.WebAuth({\n      ...this.defaultParams,\n      redirectUri,\n      owp: true,\n    })\n\n    this.auth0.authorize({ connection: 'goodreads' }, () => {})\n  }\n\n  loginGoogle() {\n    this.fireAuth.auth\n      .signInWithPopup(new firebase.auth.GoogleAuthProvider())\n      .then(response => {\n        this.processResponse(response.user)\n      })\n      .catch(error => {\n        console.log('Could not login with Google')\n        console.log(error)\n      })\n  }\n\n  loginFacebook() {\n    this.fireAuth.auth\n      .signInWithPopup(new firebase.auth.FacebookAuthProvider())\n      .then(response => {\n        this.processResponse(response.user)\n      })\n      .catch(error => {\n        console.log('Could not login with Facebook')\n        console.log(error)\n      })\n  }\n\n  loginEmail({ email, password, name }, onError = (...args) => {}) {\n    return this.fireAuth.auth\n      .signInWithEmailAndPassword(email, password)\n      .then(response =>\n        this.processResponse(response.user, { displayName: name })\n      )\n      .catch(error => {\n        console.log('Could not login with e-mail and password')\n        console.log(error.code, error.message)\n        onError(error)\n      })\n  }\n\n  signUpWithEmail({ email, password, name }) {\n    this.fireAuth.auth\n      .createUserWithEmailAndPassword(email, password)\n      .then(response => {\n        this.processResponse(response.user, { displayName: name })\n      })\n      .then(() => {\n        this.sendVerificationEmail()\n      })\n      .catch(error => {\n        console.log('Could not sign up with e-mail and password')\n        console.log(error.code, error.message)\n      })\n  }\n\n  logout() {\n    this.fireAuth.auth\n      .signOut()\n      .then(() => {\n        console.log('Sucessefully signed out')\n\n        localStorage.removeItem('userLoginCredentials')\n        this.database.isLoggedIn.next(false)\n        this.session.destroySession()\n        this.router.navigate(['home'])\n      })\n      .catch(error => {\n        console.log('Could not sign out')\n        console.log(error.code, error.message)\n      })\n  }\n\n  resetPassword() {}\n\n  deleteAccount() {\n    Promise.all([\n      this.database.deleteAllBooksForUser(this.session.userId),\n      this.database.deleteAllCollectionsForUser(this.session.userId),\n      this.database.deleteUser(this.session.userId),\n    ])\n      .then(() => this.fireAuth.auth.currentUser.delete())\n      .then(() => console.log('Successfully deleted user'))\n      .then(() => this.logout())\n  }\n\n  get userIsVerified() {\n    return (\n      this.fireAuth.auth.currentUser &&\n      this.fireAuth.auth.currentUser.emailVerified\n    )\n  }\n\n  sendVerificationEmail() {\n    return this.fireAuth.auth.currentUser.sendEmailVerification()\n  }\n\n  reauthenticateUser(password: string) {\n    const credentials = firebase.auth.EmailAuthProvider.credential(\n      this.fireAuth.auth.currentUser.email,\n      password\n    )\n    return this.fireAuth.auth.currentUser.reauthenticateWithCredential(\n      credentials\n    )\n  }\n\n  updateUserEmail(email: string, password: string) {\n    return this.reauthenticateUser(password)\n      .then(() => this.fireAuth.auth.currentUser.updateEmail(email))\n      .then(() => this.sendVerificationEmail())\n      .then(() => this.database.updateUser(this.session.userId, { email }))\n  }\n\n  updateUserPassword(oldPassword: string, password: string) {\n    return this.reauthenticateUser(oldPassword).then(() =>\n      this.fireAuth.auth.currentUser.updatePassword(password)\n    )\n  }\n\n  signInProvider() {\n    return this.fireAuth.auth.currentUser.providerData[0].providerId\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "database",
                        "type": "DatabaseService"
                    },
                    {
                        "name": "session",
                        "type": "SessionService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "database",
                        "type": "DatabaseService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "session",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userIsVerified": {
                    "name": "userIsVerified",
                    "getSignature": {
                        "name": "userIsVerified",
                        "type": "",
                        "returnType": "",
                        "line": 210
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "DatabaseService",
            "id": "injectable-DatabaseService-89e1fbe38fdb86026d3b5f246e0c2611",
            "file": "src/services/database.service.ts",
            "properties": [
                {
                    "name": "books",
                    "type": "AngularFireList<Book>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "collections",
                    "type": "AngularFireList<Collection>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isLoggedIn$",
                    "defaultValue": "this.isLoggedIn.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "users",
                    "type": "AngularFireList<User>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "addBooksToCollection",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string"
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 514,
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addBooksToCollections",
                    "args": [
                        {
                            "name": "collectionIds",
                            "type": "string[]"
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 525,
                    "jsdoctags": [
                        {
                            "name": "collectionIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addCollectionsToBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 552,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addCollectionsToBooks",
                    "args": [
                        {
                            "name": "bookIds",
                            "type": "string[]"
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 563,
                    "jsdoctags": [
                        {
                            "name": "bookIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cleanTestBed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 618
                },
                {
                    "name": "createBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createBookForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "book",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 363,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "book",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCollectionForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "collection",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 453,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collection",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 309,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAllBooksForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 440,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAllCollectionsForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 504,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBookForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 430,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 203,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCollectionForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 496,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 330,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findBookById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 380,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "model",
                            "type": "AngularFireList<any>"
                        },
                        {
                            "name": "parseFn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "object",
                                    "type": ""
                                },
                                {
                                    "name": "id",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "AngularFireList<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parseFn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "object",
                                    "type": ""
                                },
                                {
                                    "name": "id",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findByParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "model",
                            "type": "AngularFireList<any>"
                        },
                        {
                            "name": "parseFn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "object",
                                    "type": ""
                                },
                                {
                                    "name": "id",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "AngularFireList<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parseFn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "object",
                                    "type": ""
                                },
                                {
                                    "name": "id",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findCollectionById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 470,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findGenreCount",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "genre",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 233,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "genre",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findTagCount",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "tag",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 215,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findUserById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 313,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findUserByParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 319,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooksByParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 153,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooksForCollection",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 390,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooksForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 386,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByParams",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "model",
                            "type": "AngularFireList<any>"
                        },
                        {
                            "name": "parseFn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "object",
                                    "type": ""
                                },
                                {
                                    "name": "id",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "AngularFireList<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parseFn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "object",
                                    "type": ""
                                },
                                {
                                    "name": "id",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCollectionsByParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCollectionsForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 476,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGenresForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 239,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTagsForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 221,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mergeGenres",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "genresToAdd",
                            "type": "string[]",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "genresToRemove",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 272,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "genresToAdd",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "genresToRemove",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mergeTags",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "tagsToAdd",
                            "type": "string[]",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "tagsToRemove",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 245,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tagsToAdd",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tagsToRemove",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Book",
                    "typeParameters": [],
                    "line": 137,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBookFromUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBooksFromCollection",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string"
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 531,
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBooksFromCollections",
                    "args": [
                        {
                            "name": "collectionsIds",
                            "type": "string[]"
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 544,
                    "jsdoctags": [
                        {
                            "name": "collectionsIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bookIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCollectionFromUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 207,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCollectionsFromBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 569,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCollectionsFromBooks",
                    "args": [
                        {
                            "name": "bookIds",
                            "type": "string[]"
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 582,
                    "jsdoctags": [
                        {
                            "name": "bookIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFromUser",
                    "args": [
                        {
                            "name": "collection",
                            "type": "AngularFireList<string>"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "AngularFireList<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeTo",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "model",
                            "type": "string"
                        },
                        {
                            "name": "child",
                            "type": "string",
                            "defaultValue": "'ownerId'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "child",
                            "type": "string",
                            "defaultValue": "'ownerId'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToBookCount",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 351,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToBooksFromUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 334,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToCollectionCount",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 357,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToCollectionsFromUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 446,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToGenresFromUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 598,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToLatestBooks",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "limit",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 340,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTagsFromUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 590,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 159,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBookForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 396,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 197,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCollectionForUser",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 480,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "params",
                            "type": "object"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 325,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadAvatar",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "file",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 610,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadBackgroundImage",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "file",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 614,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadBookCover",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "bookId",
                            "type": "string"
                        },
                        {
                            "name": "file",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 606,
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "file",
                            "type": ""
                        },
                        {
                            "name": "filePath",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 299,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filePath",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userBooksRef",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AngularFireList<string>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userCollectionsRef",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AngularFireList<string>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userGenreRef",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "genre",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 227,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "genre",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userGenresRef",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AngularFireObject<string>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userTagRef",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        },
                        {
                            "name": "tag",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 211,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userTagsRef",
                    "args": [
                        {
                            "name": "userRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AngularFireObject<string>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport {\n  AngularFireDatabase,\n  AngularFireList,\n  AngularFireObject,\n} from 'angularfire2/database'\nimport { AngularFireStorage } from 'angularfire2/storage'\nimport { difference, intersection } from 'lodash'\nimport { User } from '../database/models/user.model'\nimport { Book } from '../database/models/book.model'\nimport { Collection } from '../database/models/collection.model'\nimport { objectToArray, findKeyByValue, unique } from '../utils/helpers'\nimport { environment } from 'environments/environment'\nimport { BehaviorSubject, Observable } from 'rxjs'\nimport { map, mergeMap, last } from 'rxjs/operators'\nimport { SessionService } from './session.service'\n@Injectable()\nexport class DatabaseService {\n  users: AngularFireList<User>\n  books: AngularFireList<Book>\n  collections: AngularFireList<Collection>\n  isLoggedIn = new BehaviorSubject<boolean>(false)\n\n  isLoggedIn$ = this.isLoggedIn.asObservable()\n\n  constructor(\n    private db: AngularFireDatabase,\n    private session: SessionService,\n    private storage: AngularFireStorage\n  ) {\n    this.books = db.list(`${environment.rootUrl}/books`)\n    this.users = db.list(`${environment.rootUrl}/users`)\n    this.collections = db.list(`${environment.rootUrl}/collections`)\n  }\n\n  private userBooksRef(userRef: string): AngularFireList<string> {\n    return this.db.list(`${environment.rootUrl}/users/${userRef}/books`)\n  }\n\n  private userCollectionsRef(userRef: string): AngularFireList<string> {\n    return this.db.list(`${environment.rootUrl}/users/${userRef}/collections`)\n  }\n\n  private userTagsRef(userRef: string): AngularFireObject<string> {\n    return this.db.object(`${environment.rootUrl}/users/${userRef}/tags`)\n  }\n\n  private userGenresRef(userRef: string): AngularFireObject<string> {\n    return this.db.object(`${environment.rootUrl}/users/${userRef}/genres`)\n  }\n\n  private findById(\n    id: string,\n    model: AngularFireList<any>,\n    parseFn: (object, id) => {}\n  ) {\n    return model.query\n      .orderByKey()\n      .equalTo(id)\n      .once('value')\n      .then(snap =>\n        snap.val()\n          ? parseFn(\n              snap.val()[Object.keys(snap.val())[0]],\n              Object.keys(snap.val())[0]\n            )\n          : null\n      )\n  }\n\n  private findByParam(\n    key: string,\n    value: string,\n    model: AngularFireList<any>,\n    parseFn: (object, id) => {}\n  ) {\n    return model.query\n      .orderByChild(key)\n      .equalTo(value)\n      .once('value')\n      .then(snap =>\n        snap.val()\n          ? parseFn(\n              snap.val()[Object.keys(snap.val())[0]],\n              Object.keys(snap.val())[0]\n            )\n          : null\n      )\n  }\n\n  private getByParams(\n    key: string,\n    value: string,\n    model: AngularFireList<any>,\n    parseFn: (object, id) => {}\n  ) {\n    return model.query\n      .orderByChild(key)\n      .equalTo(value)\n      .once('value')\n      .then(snap =>\n        snap.val()\n          ? Object.keys(snap.val()).map(_key => parseFn(snap.val()[_key], _key))\n          : []\n      )\n  }\n\n  private subscribeTo(\n    userRef: string,\n    model: string,\n    child: string = 'ownerId'\n  ) {\n    return this.db.list(`${environment.rootUrl}/${model}`, ref =>\n      ref.orderByChild(child).equalTo(userRef)\n    )\n  }\n\n  private removeFromUser(collection: AngularFireList<string>, id: string) {\n    return collection.query.once('value').then(res => {\n      const ids = res.val()\n      const ref = findKeyByValue(ids, id)\n      return collection.remove(ref)\n    })\n  }\n\n  /* USER */\n  private parseUser(user: User, id: string) {\n    return {\n      ...user,\n      id,\n      books: objectToArray(user.books) || [],\n      collections: objectToArray(user.collections) || [],\n    }\n  }\n\n  /* BOOK */\n  private parseBook(book: Book, id: string): Book {\n    return {\n      ...book,\n      id,\n      genres: book.genres || [],\n      collections: book.collections || [],\n      tags: book.tags || [],\n    }\n  }\n\n  private createBook(book: Book) {\n    return this.books\n      .push(book)\n      .then(res => this.parseBook(book, res.ref.key)) as Promise<Book>\n  }\n\n  private getBooksByParam(key: string, value: string) {\n    return this.getByParams(key, value, this.books, this.parseBook) as Promise<\n      Book[]\n    >\n  }\n\n  private updateBook(book: Book) {\n    return this.books.update(book.id, book).then(() => book)\n  }\n\n  private deleteBook(book: Book) {\n    return this.books.remove(book.id).then(() => book)\n  }\n\n  private removeBookFromUser(userRef: string, id: string) {\n    return this.removeFromUser(this.userBooksRef(userRef), id)\n  }\n\n  /* COLLECTION */\n  private parseCollection(collection: Collection, id: string) {\n    return {\n      ...collection,\n      id,\n      books: collection.books || [],\n    }\n  }\n\n  private createCollection(collection: Collection) {\n    return this.collections\n      .push(collection)\n      .then(res => this.parseCollection(collection, res.ref.key)) as Promise<\n      Collection\n    >\n  }\n\n  private getCollectionsByParam(key: string, value: string) {\n    return this.getByParams(\n      key,\n      value,\n      this.collections,\n      this.parseCollection\n    ) as Promise<Collection[]>\n  }\n\n  private updateCollection(collection: Collection) {\n    return this.collections\n      .update(collection.id, collection)\n      .then(() => collection)\n  }\n\n  private deleteCollection(collection: Collection) {\n    return this.collections.remove(collection.id).then(() => collection)\n  }\n\n  private removeCollectionFromUser(userRef: string, id: string) {\n    return this.removeFromUser(this.userCollectionsRef(userRef), id)\n  }\n\n  private userTagRef(userRef: string, tag: string) {\n    return this.db.object(`${environment.rootUrl}/users/${userRef}/tags/${tag}`)\n  }\n\n  private findTagCount(userRef: string, tag: string) {\n    return this.userTagRef(userRef, tag)\n      .query.once('value')\n      .then(snap => snap.val())\n  }\n\n  private getTagsForUser(userRef: string) {\n    return this.userTagsRef(userRef)\n      .query.once('value')\n      .then(snap => snap.val() || {})\n  }\n\n  private userGenreRef(userRef: string, genre: string) {\n    return this.db.object(\n      `${environment.rootUrl}/users/${userRef}/genres/${genre}`\n    )\n  }\n\n  private findGenreCount(userRef: string, genre: string) {\n    return this.userGenreRef(userRef, genre)\n      .query.once('value')\n      .then(snap => snap.val())\n  }\n\n  private getGenresForUser(userRef: string) {\n    return this.userGenresRef(userRef)\n      .query.once('value')\n      .then(snap => snap.val() || {})\n  }\n\n  private mergeTags(\n    userRef: string,\n    tagsToAdd: string[] = [],\n    tagsToRemove: string[] = []\n  ) {\n    return this.getTagsForUser(userRef).then(userTags => {\n      const newTags = difference(tagsToAdd, Object.keys(userTags))\n      const existingTags = intersection(tagsToAdd, Object.keys(userTags))\n\n      newTags.forEach(tag => this.userTagRef(userRef, tag).set(1))\n      existingTags.forEach(tag =>\n        this.findTagCount(userRef, tag).then(tagCount =>\n          this.userTagRef(userRef, tag).set(tagCount + 1)\n        )\n      )\n      tagsToRemove.forEach(tag => {\n        this.findTagCount(userRef, tag).then(tagCount => {\n          if (tagCount === 1) {\n            this.userTagRef(userRef, tag).remove()\n          } else {\n            this.userTagRef(userRef, tag).set(tagCount - 1)\n          }\n        })\n      })\n    })\n  }\n\n  private mergeGenres(\n    userRef: string,\n    genresToAdd: string[] = [],\n    genresToRemove: string[] = []\n  ) {\n    return this.getGenresForUser(userRef).then(userGenres => {\n      const newGenres = difference(genresToAdd, Object.keys(userGenres))\n      const existingGenres = intersection(genresToAdd, Object.keys(userGenres))\n\n      newGenres.forEach(genre => this.userGenreRef(userRef, genre).set(1))\n      existingGenres.forEach(genre =>\n        this.findGenreCount(userRef, genre).then(genreCount =>\n          this.userGenreRef(userRef, genre).set(genreCount + 1)\n        )\n      )\n      genresToRemove.forEach(genre => {\n        this.findGenreCount(userRef, genre).then(genreCount => {\n          if (genreCount === 1) {\n            this.userGenreRef(userRef, genre).remove()\n          } else {\n            this.userGenreRef(userRef, genre).set(genreCount - 1)\n          }\n        })\n      })\n    })\n  }\n\n  private uploadFile(file, filePath: string) {\n    const path = this.storage.ref(filePath)\n    const task = path.put(file)\n\n    return task.snapshotChanges().pipe(\n      last(),\n      mergeMap(() => path.getDownloadURL())\n    )\n  }\n\n  createUser(user: User) {\n    return this.users.push(user).then(res => this.parseUser(user, res.ref.key))\n  }\n\n  findUserById(id: string) {\n    return this.findById(id, this.users, this.parseUser).then(\n      user => user as User\n    )\n  }\n\n  findUserByParam(key: string, value: string) {\n    return this.findByParam(key, value, this.users, this.parseUser).then(\n      user => user as User\n    )\n  }\n\n  updateUser(id: string, params: object) {\n    this.users.update(id, params as User)\n    return this.findUserById(id).then(user => (this.session.localUser = user))\n  }\n\n  deleteUser(id: string) {\n    return this.users.remove(id)\n  }\n\n  subscribeToBooksFromUser(userRef: string) {\n    return this.subscribeTo(userRef, 'books').valueChanges() as Observable<\n      Book[]\n    >\n  }\n\n  subscribeToLatestBooks(userRef: string, limit: number) {\n    return this.db\n      .list(`${environment.rootUrl}/books`, ref =>\n        ref\n          .orderByChild('ownerId')\n          .equalTo(userRef)\n          .limitToLast(limit)\n      )\n      .valueChanges() as Observable<Book[]>\n  }\n\n  subscribeToBookCount(userRef: string) {\n    return this.userBooksRef(userRef)\n      .valueChanges()\n      .pipe(map(bookIds => bookIds.length)) as Observable<number>\n  }\n\n  subscribeToCollectionCount(userRef: string) {\n    return this.userCollectionsRef(userRef)\n      .valueChanges()\n      .pipe(map(collectionIds => collectionIds.length)) as Observable<number>\n  }\n\n  createBookForUser(userRef: string, book) {\n    return this.createBook({ ...book, ownerId: userRef }).then(\n      bookInDatabase => {\n        return Promise.all([\n          this.userBooksRef(userRef).push(bookInDatabase.id),\n          this.mergeGenres(userRef, book.genres, []),\n          this.mergeTags(userRef, book.tags, []),\n          ...book.collections.map(collectionId => {\n            return this.addBooksToCollection(collectionId, [bookInDatabase.id])\n          }),\n        ])\n          .then(() => this.updateBook(bookInDatabase))\n          .then(() => bookInDatabase)\n      }\n    )\n  }\n\n  findBookById(id: string) {\n    return this.findById(id, this.books, this.parseBook).then(\n      book => book as Book\n    )\n  }\n\n  getBooksForUser(userRef: string) {\n    return this.getBooksByParam('ownerId', userRef)\n  }\n\n  getBooksForCollection(id: string, userRef: string) {\n    return this.getBooksForUser(userRef).then(books =>\n      books.filter(book => book.collections.includes(id))\n    )\n  }\n\n  updateBookForUser(userRef: string, book: Book) {\n    return this.findBookById(book.id).then(oldBook => {\n      const oldCollections = oldBook.collections || []\n      const newCollections = book.collections || []\n\n      const oldTags = oldBook.tags || []\n      const newTags = book.tags || []\n\n      const oldGenres = oldBook.genres || []\n      const newGenres = book.genres || []\n\n      const collectionsToAdd = newCollections.filter(\n        collection => !oldCollections.includes(collection)\n      )\n      const collectionsToRemove = oldCollections.filter(\n        collection => !newCollections.includes(collection)\n      )\n\n      const tagsToAdd = difference(newTags, oldTags)\n      const tagsToRemove = difference(oldTags, newTags)\n\n      const genresToAdd = difference(newGenres, oldGenres)\n      const genresToRemove = difference(oldGenres, newGenres)\n\n      return Promise.all([\n        this.updateBook({ ...oldBook, ...book }),\n        this.mergeGenres(userRef, genresToAdd, genresToRemove),\n        this.mergeTags(userRef, tagsToAdd, tagsToRemove),\n        this.addBooksToCollections(collectionsToAdd, [book.id]),\n        this.removeBooksFromCollections(collectionsToRemove, [book.id]),\n      ]).then(() => book)\n    })\n  }\n\n  deleteBookForUser(userRef: string, book: Book) {\n    return Promise.all([\n      this.deleteBook(book),\n      this.mergeGenres(userRef, [], book.genres),\n      this.mergeTags(userRef, [], book.tags),\n      this.removeBookFromUser(userRef, book.id),\n      this.removeBooksFromCollections(book.collections, [book.id]),\n    ])\n  }\n\n  deleteAllBooksForUser(userRef: string) {\n    return Promise.resolve()\n      .then(() => this.getBooksForUser(userRef))\n      .then(books => Promise.all(books.map(book => this.deleteBook(book))))\n  }\n\n  subscribeToCollectionsFromUser(userRef: string) {\n    return this.subscribeTo(\n      userRef,\n      'collections'\n    ).valueChanges() as Observable<Collection[]>\n  }\n\n  createCollectionForUser(userRef: string, collection) {\n    return this.createCollection({ ...collection, ownerId: userRef }).then(\n      collectionInDatabase => {\n        return Promise.all(\n          collectionInDatabase.books.map(bookId =>\n            this.addCollectionsToBook(bookId, [collectionInDatabase.id])\n          )\n        )\n          .then(() =>\n            this.userCollectionsRef(userRef).push(collectionInDatabase.id)\n          )\n          .then(() => this.updateCollection(collectionInDatabase))\n          .then(() => collectionInDatabase)\n      }\n    )\n  }\n\n  findCollectionById(id: string) {\n    return this.findById(id, this.collections, this.parseCollection).then(\n      collection => collection as Collection\n    )\n  }\n\n  getCollectionsForUser(userRef: string) {\n    return this.getCollectionsByParam('ownerId', userRef)\n  }\n\n  updateCollectionForUser(userRef: string, collection: Collection) {\n    return this.findCollectionById(collection.id).then(oldCollection => {\n      const oldBooks = oldCollection.books || []\n      const newBooks = collection.books || []\n\n      const booksToAdd = newBooks.filter(book => !oldBooks.includes(book))\n      const booksToRemove = oldBooks.filter(book => !newBooks.includes(book))\n\n      return Promise.all([\n        this.updateCollection({ ...oldCollection, ...collection }),\n        this.addCollectionsToBooks(booksToAdd, [collection.id]),\n        this.removeCollectionsFromBooks(booksToRemove, [collection.id]),\n      ])\n    })\n  }\n\n  deleteCollectionForUser(userRef: string, collection: Collection) {\n    return Promise.all([\n      this.deleteCollection(collection),\n      this.removeCollectionFromUser(userRef, collection.id),\n      this.removeCollectionsFromBooks(collection.books, [collection.id]),\n    ])\n  }\n\n  deleteAllCollectionsForUser(userRef: string) {\n    return Promise.resolve()\n      .then(() => this.getCollectionsForUser(userRef))\n      .then(collections =>\n        Promise.all(\n          collections.map(collection => this.deleteCollection(collection))\n        )\n      )\n  }\n\n  addBooksToCollection(collectionId: string, bookIds: string[]) {\n    return this.findCollectionById(collectionId).then(collection => {\n      const booksForCollection = [...bookIds, ...collection.books]\n      return this.collections\n        .update(collectionId, {\n          books: unique(booksForCollection),\n        } as Collection)\n        .then(() => booksForCollection)\n    })\n  }\n\n  addBooksToCollections(collectionIds: string[], bookIds: string[]) {\n    return Promise.all([\n      ...collectionIds.map(id => this.addBooksToCollection(id, bookIds)),\n    ])\n  }\n\n  removeBooksFromCollection(collectionId: string, bookIds: string[]) {\n    return this.findCollectionById(collectionId).then(collection => {\n      const booksForCollection = collection.books.filter(\n        bookId => !bookIds.includes(bookId)\n      )\n      return this.collections\n        .update(collectionId, {\n          books: booksForCollection,\n        } as Collection)\n        .then(() => bookIds)\n    })\n  }\n\n  removeBooksFromCollections(collectionsIds: string[], bookIds: string[]) {\n    return Promise.all([\n      ...collectionsIds.map(collectionId =>\n        this.removeBooksFromCollection(collectionId, bookIds)\n      ),\n    ])\n  }\n\n  addCollectionsToBook(id: string, collectionIds: string[]) {\n    return this.findBookById(id).then(book => {\n      const collectionsForBook = [...collectionIds, ...book.collections]\n      return this.books\n        .update(id, {\n          collections: unique(collectionsForBook),\n        } as Book)\n        .then(() => collectionsForBook)\n    })\n  }\n\n  addCollectionsToBooks(bookIds: string[], collectionIds: string[]) {\n    return Promise.all([\n      ...bookIds.map(id => this.addCollectionsToBook(id, collectionIds)),\n    ])\n  }\n\n  removeCollectionsFromBook(id: string, collectionIds: string[]) {\n    return this.findBookById(id).then(book => {\n      const collectionsForBook = book.collections.filter(\n        collectionId => !collectionIds.includes(collectionId)\n      )\n      return this.books\n        .update(id, {\n          collections: collectionsForBook,\n        } as Book)\n        .then(() => collectionIds)\n    })\n  }\n\n  removeCollectionsFromBooks(bookIds: string[], collectionIds: string[]) {\n    return Promise.all([\n      ...bookIds.map(bookId =>\n        this.removeCollectionsFromBook(bookId, collectionIds)\n      ),\n    ])\n  }\n\n  subscribeToTagsFromUser(userRef: string) {\n    return this.userTagsRef(userRef)\n      .valueChanges()\n      .pipe(map(value => (value ? Object.keys(value) : null))) as Observable<\n      string[]\n    >\n  }\n\n  subscribeToGenresFromUser(userRef: string) {\n    return this.userGenresRef(userRef)\n      .valueChanges()\n      .pipe(map(value => (value ? Object.keys(value) : null))) as Observable<\n      string[]\n    >\n  }\n\n  uploadBookCover(userRef: string, bookId: string, file) {\n    return this.uploadFile(file, `images/${userRef}/${bookId}.jpg`)\n  }\n\n  uploadAvatar(userRef: string, file) {\n    return this.uploadFile(file, `images/${userRef}/avatar.jpg`)\n  }\n\n  uploadBackgroundImage(userRef: string, file) {\n    return this.uploadFile(file, `images/${userRef}/background.jpg`)\n  }\n\n  cleanTestBed() {\n    console.log('Cleaning test bed')\n    if (environment.name !== 'test') {\n      return\n    }\n\n    this.books.remove()\n    this.users.remove()\n    this.collections.remove()\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFireDatabase"
                    },
                    {
                        "name": "session",
                        "type": "SessionService"
                    },
                    {
                        "name": "storage",
                        "type": "AngularFireStorage"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFireDatabase",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "session",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "AngularFireStorage",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GoodreadsService",
            "id": "injectable-GoodreadsService-f003a2621b88b2dc8d5aad8d9fc28ad0",
            "file": "src/services/goodreads.service.ts",
            "properties": [
                {
                    "name": "defaultParams",
                    "defaultValue": "new HttpParams().set('key', this.key)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "domain",
                    "defaultValue": "USE_PROXY\n    ? environment.goodreadsConfig.proxyDomain\n    : environment.goodreadsConfig.domain",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "goodreadsId",
                    "defaultValue": "this.id.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "defaultValue": "new BehaviorSubject<number>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "key",
                    "defaultValue": "environment.goodreadsConfig.key",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAuthor",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthors",
                    "args": [
                        {
                            "name": "ids",
                            "type": "number[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooks",
                    "args": [
                        {
                            "name": "ids",
                            "type": "number[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooksForUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchAuthor",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchBook",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { HttpGet, HttpGetAll } from 'utils/http'\nimport { environment } from 'environments/environment'\nimport { SessionService } from './session.service'\nimport * as _ from 'lodash'\nimport { BehaviorSubject, Observable } from 'rxjs'\nimport { map, mergeMap } from 'rxjs/operators'\nimport { Book } from 'models/book.model'\n\nconst USE_PROXY = true\n\n@Injectable()\nexport class GoodreadsService {\n  private key = environment.goodreadsConfig.key\n  private domain = USE_PROXY\n    ? environment.goodreadsConfig.proxyDomain\n    : environment.goodreadsConfig.domain\n\n  private id = new BehaviorSubject<number>(undefined)\n\n  goodreadsId = this.id.asObservable()\n  defaultParams = new HttpParams().set('key', this.key)\n\n  constructor(\n    private http: HttpClient,\n    private sessionService: SessionService\n  ) {\n    if (this.sessionService.localUser) {\n      this.id.next(this.sessionService.localUser.goodreadsId)\n    }\n  }\n\n  private parseUrl(url: string) {\n    return `${url}.xml`\n  }\n\n  getUser(id?: number) {\n    const userId = id ? id : this.id\n    const url = `${this.domain}/user/show/${userId}`\n\n    return HttpGet(this.http, this.parseUrl(url), this.defaultParams)\n  }\n\n  getBook(id: number) {\n    // key: Developer key (required).\n    // id: A Goodreads internal book_id\n    // text_only: Only show reviews that have text (default false)\n    // rating: Show only reviews with a particular rating (optional)\n    const url = `${this.domain}/book/show/${id}`\n\n    return HttpGet(this.http, this.parseUrl(url), this.defaultParams).pipe(\n      map<any, any>(response => response.book)\n    )\n  }\n\n  getAuthor(id: number) {\n    const url = `${this.domain}/author/show/${id}`\n\n    return HttpGet(this.http, this.parseUrl(url), this.defaultParams).pipe(\n      map<any, any>(response => response.author)\n    )\n  }\n\n  getBooks(ids: number[]) {\n    const requests = ids.map(id => ({\n      url: this.parseUrl(`${this.domain}/book/show/${id}`),\n      params: this.defaultParams,\n    }))\n    return HttpGetAll(this.http, requests).pipe(\n      map(responses => responses.map((response: any) => response.book))\n    )\n  }\n\n  getAuthors(ids: number[]) {\n    return HttpGetAll(\n      this.http,\n      ids.map(id => ({\n        url: `${this.domain}/author/show/${id}`,\n        params: this.defaultParams,\n      }))\n    ).pipe(map<any, any>(results => results.map(result => result.author)))\n  }\n\n  getBooksForUser(id: number) {\n    const params = this.defaultParams\n      .set('v', '2')\n      .set('id', `${id}`)\n      .set('shelf', 'all')\n      .set('sort', 'title')\n      .set('format', 'xml')\n    const url = `${this.domain}/review/list`\n\n    return HttpGet(this.http, url, params).pipe(\n      map<any, any>(response =>\n        response ? response.reviews.review.map(review => review.book) : response\n      )\n    ) as Observable<Book[]>\n  }\n\n  searchBook(query: string) {\n    // q: The query text to match against book title, author, and ISBN fields. Supports boolean operators and phrase searching.\n    // page: Which page to return (default 1, optional)\n    // key: Developer key (required).\n    // search[field]: Field to search, one of 'title', 'author', or 'all' (default is 'all')\n    const url = `${this.domain}/search/index`\n    const params = this.defaultParams.set('q', decodeURI(query))\n\n    return HttpGet(this.http, this.parseUrl(url), params).pipe(\n      map<any, any>(response => {\n        const work = response.search.results.work\n        const results = Array.isArray(work) ? work : [work]\n        return _.uniq(results.map(item => item.best_book))\n      })\n    )\n  }\n\n  searchAuthor(name: string) {\n    const url = `${this.domain}/search/index`\n    const params = this.defaultParams\n      .set('q', decodeURI(name))\n      .set('search[field]', 'author')\n\n    return HttpGet(this.http, this.parseUrl(url), params).pipe(\n      map<any, any>(response =>\n        _.uniq(\n          response.search.results.work.map(item => item.best_book.author.id._)\n        )\n      ),\n      mergeMap<any, any>(authorIds => this.getAuthors(authorIds))\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ImportService",
            "id": "injectable-ImportService-52eb6ecd3e67252ddc8792092c436da3",
            "file": "src/services/import.service.ts",
            "properties": [
                {
                    "name": "booksToImport",
                    "defaultValue": "new BehaviorSubject<Book[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "booksToImport$",
                    "defaultValue": "this.booksToImport.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "parseFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "AOA"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "AOA",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readFile",
                    "args": [
                        {
                            "name": "uploadedFile",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "uploadedFile",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport * as XLSX from 'xlsx'\nimport { LANGUAGES } from 'utils/constants'\nimport { upperCaseFirstLetter } from 'utils/helpers'\nimport { Book } from 'database/models/book.model'\nimport { BehaviorSubject } from 'rxjs'\nimport { notify } from 'utils/notifications'\n\ntype AOA = any[][]\n\n@Injectable()\nexport class ImportService {\n  private booksToImport = new BehaviorSubject<Book[]>([])\n\n  booksToImport$ = this.booksToImport.asObservable()\n\n  readFile(uploadedFile) {\n    const reader = new FileReader()\n\n    reader.onload = (e: any) => {\n      const binaryString = e.target.result\n      const workBook: XLSX.WorkBook = XLSX.read(binaryString, {\n        type: 'binary',\n      })\n\n      const workSheet: XLSX.WorkSheet = workBook.Sheets[workBook.SheetNames[0]]\n\n      const file = XLSX.utils.sheet_to_json(workSheet, { header: 1 }) as AOA\n      this.booksToImport.next(this.parseFile(file))\n    }\n\n    reader.readAsBinaryString(uploadedFile)\n    notify({ message: 'Successfully read file' })\n    return this.booksToImport$\n  }\n\n  parseFile(file: AOA) {\n    return file\n      .map(row => ({\n        title: row[0],\n        author: row[1],\n        original: row[2],\n        publisher: row[3],\n        date: new Date().toISOString(),\n        ...(row[4] ? { pages: +row[4] } : {}),\n        ...(row[5] ? { year: +row[5] } : {}),\n        ...(row[6] && LANGUAGES.includes(upperCaseFirstLetter(row[6]))\n          ? { language: row[6] }\n          : {}),\n        ...(row[7] ? { rating: +row[7] } : {}),\n        owned: !!row[8] && row[8].toLocaleLowerCase() === 'x',\n        wishlist: !!row[9] && row[9].toLocaleLowerCase() === 'x',\n        read: !!row[10] && row[10].toLocaleLowerCase() === 'x',\n        favorite: !!row[11] && row[11].toLocaleLowerCase() === 'x',\n        ...(row[12] ? { imageLarge: row[12] } : {}),\n      }))\n      .filter(book => !!book.title && !!book.author) as Book[]\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LibraryService",
            "id": "injectable-LibraryService-4c052afcc1d16bd9de1c7b0a49d2f1f8",
            "file": "src/services/library.service.ts",
            "properties": [
                {
                    "name": "_userRef",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authorCount$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "authors$",
                    "type": "Observable<Author[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "bookCount$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "books$",
                    "type": "Observable<Book[]>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "booksToImport",
                    "defaultValue": "new BehaviorSubject<Book[]>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "booksToImport$",
                    "defaultValue": "this.booksToImport.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "collectionCount$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "collections",
                    "defaultValue": "new BehaviorSubject<Collection[]>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "collections$",
                    "type": "Observable<Collection[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "genres$",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "grAuthorIds$",
                    "type": "Observable<number[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "latestBooks$",
                    "type": "Observable<Book[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "MAX_DATE",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rawBooks$",
                    "type": "Observable<RawBook[]>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "rawCollections$",
                    "type": "Observable<RawCollection[]>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "tags$",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "addBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addBooks",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 168,
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addBooksToCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": ""
                        },
                        {
                            "name": "books",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 286,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "books",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 235,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 216,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 271,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findCollection",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 250,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooksForCollection",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "books",
                            "type": "Book[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "books",
                            "type": "Book[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 231
                },
                {
                    "name": "loadLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "mapCollectionIdToTitle",
                    "args": [
                        {
                            "name": "collectionIds",
                            "type": "string[]",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "collections",
                            "type": "RawCollection[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "collectionIds",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collections",
                            "type": "RawCollection[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapCollectionTitleToId",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        },
                        {
                            "name": "collections",
                            "type": "Collection[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collections",
                            "type": "Collection[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBooksFromCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": ""
                        },
                        {
                            "name": "books",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 298,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "books",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBook",
                    "args": [
                        {
                            "name": "book",
                            "type": ""
                        },
                        {
                            "name": "mapCollections",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mapCollections",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, of } from 'rxjs'\nimport { DatabaseService } from 'services/database.service'\nimport { Collection as RawCollection } from 'database/models/collection.model'\nimport { Book as RawBook } from 'database/models/book.model'\nimport { Book } from 'models/book.model'\nimport { Collection } from 'models/collection.model'\nimport { map, mergeMap, filter } from 'rxjs/operators'\nimport { omit, compact, uniq } from 'lodash'\nimport { SessionService } from './session.service'\nimport { Author } from 'models/author.model'\nimport { GoodreadsService } from './goodreads.service'\nimport { parseAuthor } from 'utils/helpers'\nimport { notify } from 'utils/notifications'\nimport { ignoreReturnFor } from 'utils/promise'\n\n@Injectable()\nexport class LibraryService {\n  set userRef(ref) {\n    this._userRef = ref\n  }\n  set setBooksToImport(books: Book[]) {\n    this.booksToImport.next(books)\n  }\n  private MAX_DATE = 4\n  private collections = new BehaviorSubject<Collection[]>(undefined)\n  private booksToImport = new BehaviorSubject<Book[]>(undefined)\n\n  private _userRef: string\n\n  books$: Observable<Book[]>\n  latestBooks$: Observable<Book[]>\n  collections$: Observable<Collection[]>\n  authors$: Observable<Author[]>\n  grAuthorIds$: Observable<number[]>\n  tags$: Observable<string[]>\n  genres$: Observable<string[]>\n  booksToImport$ = this.booksToImport.asObservable()\n  bookCount$: Observable<number>\n  collectionCount$: Observable<number>\n  authorCount$: Observable<number>\n\n  rawBooks$: Observable<RawBook[]>\n  rawCollections$: Observable<RawCollection[]>\n\n  constructor(\n    private database: DatabaseService,\n    private goodreadsService: GoodreadsService,\n    private session: SessionService\n  ) {\n    this.session.userId$.subscribe(\n      userRefFromSession => (this._userRef = userRefFromSession)\n    )\n    this.loadLibrary()\n  }\n\n  private getBooksForCollection(collectionId: string = '', books: Book[] = []) {\n    return books.filter(\n      book => book.collections && book.collections.includes(collectionId)\n    )\n  }\n\n  mapCollectionTitleToId(book: Book, collections: Collection[]) {\n    if (!book.collections || !collections) {\n      return []\n    }\n\n    return book.collections.map(\n      collectionTitle =>\n        collections.find(collection => collection.title === collectionTitle).id\n    )\n  }\n\n  mapCollectionIdToTitle(\n    collectionIds: string[] = [],\n    collections: RawCollection[] = []\n  ) {\n    return collectionIds.map(\n      collection => collections.find(c => c.id === collection).title\n    )\n  }\n\n  loadLibrary() {\n    console.log('Loading library...')\n    this.rawBooks$ = this.session.userId$.pipe(\n      filter(userRef => !!userRef),\n      mergeMap(userRef => {\n        return this.database.subscribeToBooksFromUser(userRef)\n      }),\n      map(books => {\n        return books.map(book => ({\n          ...book,\n          collections: book.collections || [],\n        }))\n      })\n    )\n    this.rawCollections$ = this.session.userId$.pipe(\n      filter(userRef => !!userRef),\n      mergeMap(userRef => this.database.subscribeToCollectionsFromUser(userRef))\n    )\n    this.tags$ = this.session.userId$.pipe(\n      filter(userRef => !!userRef),\n      mergeMap(userRef => this.database.subscribeToTagsFromUser(userRef))\n    )\n    this.genres$ = this.session.userId$.pipe(\n      filter(userRef => !!userRef),\n      mergeMap(userRef => this.database.subscribeToGenresFromUser(userRef))\n    )\n\n    this.books$ = this.rawBooks$\n\n    this.latestBooks$ = this.session.userId$.pipe(\n      filter(userRef => !!userRef),\n      mergeMap(userRef =>\n        this.database.subscribeToLatestBooks(userRef, this.MAX_DATE)\n      )\n    )\n\n    this.collections$ = this.rawBooks$.pipe(\n      mergeMap(_books =>\n        this.rawCollections$.pipe(\n          map(_collections =>\n            _collections.map(collection => ({\n              ...collection,\n              books: this.getBooksForCollection(collection.id, _books),\n            }))\n          )\n        )\n      )\n    )\n    this.collections$.subscribe(this.collections)\n\n    this.grAuthorIds$ = this.rawBooks$.pipe(\n      map(books => uniq(compact(books.map(book => book.goodreadsAuthorId))))\n    )\n\n    this.authors$ = this.grAuthorIds$.pipe(\n      mergeMap(ids =>\n        ids.length ? this.goodreadsService.getAuthors(ids) : of([])\n      ),\n      map(authors => authors.map(author => parseAuthor(author)))\n    )\n\n    this.bookCount$ = this.session.userId$.pipe(\n      filter(userRef => !!userRef),\n      mergeMap(userRef => this.database.subscribeToBookCount(userRef))\n    )\n\n    this.collectionCount$ = this.session.userId$.pipe(\n      filter(userRef => !!userRef),\n      mergeMap(userRef => this.database.subscribeToCollectionCount(userRef))\n    )\n\n    this.authorCount$ = this.authors$.pipe(map(authors => authors.length))\n  }\n\n  addBook(book: Book) {\n    book.collections = this.mapCollectionTitleToId(book, this.collections.value)\n    return this.database.createBookForUser(this._userRef, book).then(\n      ignoreReturnFor(() =>\n        notify({\n          message: `<strong>${book.title}</strong> succesfully added`,\n        })\n      )\n    )\n  }\n\n  addBooks(books: Book[]) {\n    return Promise.all(books.map(book => this.addBook(book)))\n  }\n\n  findBook(id: string) {\n    return this.rawCollections$.pipe(\n      mergeMap(collections =>\n        this.books$.pipe(\n          map(books => {\n            const book = books.find(b => b.id === id)\n            if (!book) {\n              return book\n            }\n            book.collections = this.mapCollectionIdToTitle(\n              book.collections,\n              collections\n            )\n            return book\n          })\n        )\n      )\n    )\n  }\n\n  updateBook(book, mapCollections = true) {\n    return this.database\n      .updateBookForUser(this._userRef, {\n        ...book,\n        collections: mapCollections\n          ? this.mapCollectionTitleToId(book, this.collections.value)\n          : book.collections,\n      })\n      .then(\n        ignoreReturnFor(() =>\n          notify({\n            message: `<strong>${book.title}</strong> succesfully updated`,\n          })\n        )\n      )\n      .catch(\n        ignoreReturnFor(() =>\n          notify({\n            message: `<strong>${book.title}</strong> could not be updated`,\n          })\n        )\n      )\n  }\n\n  deleteBook(book: Book) {\n    return this.database\n      .deleteBookForUser(this._userRef, {\n        ...omit(book, ['isSelected']),\n        collections: this.mapCollectionTitleToId(book, this.collections.value),\n      })\n      .then(\n        ignoreReturnFor(() =>\n          notify({\n            message: `<strong>${book.title}</strong> succesfully deleted`,\n          })\n        )\n      )\n  }\n\n  getLatestBooks() {\n    return this.database.subscribeToLatestBooks(this._userRef, this.MAX_DATE)\n  }\n\n  addCollection(collection: Collection) {\n    return this.database\n      .createCollectionForUser(this._userRef, {\n        ...collection,\n        books: collection.books.map(book => book.id),\n      })\n      .then(\n        ignoreReturnFor(() =>\n          notify({\n            message: `<strong>${collection.title}</strong> succesfully added`,\n          })\n        )\n      )\n  }\n\n  findCollection(id: string) {\n    return this.collections$.pipe(\n      map(collections => collections.find(collection => collection.id === id))\n    )\n  }\n\n  updateCollection(collection: Collection) {\n    return this.database\n      .updateCollectionForUser(this._userRef, {\n        ...collection,\n        books: collection.books.map(book => book.id),\n      })\n      .then(\n        ignoreReturnFor(() =>\n          notify({\n            message: `<strong>${collection.title}</strong> succesfully updated`,\n          })\n        )\n      )\n  }\n\n  deleteCollection(collection: Collection) {\n    return this.database\n      .deleteCollectionForUser(this._userRef, {\n        ...collection,\n        books: collection.books.map(book => book.id),\n      })\n      .then(\n        ignoreReturnFor(() =>\n          notify({\n            message: `<strong>${collection.title}</strong> succesfully deleted`,\n          })\n        )\n      )\n  }\n\n  addBooksToCollection(collection, books) {\n    return this.database\n      .addBooksToCollection(collection.id, books.map(book => book.id))\n      .then(\n        ignoreReturnFor(() =>\n          notify({\n            message: `${books.length} books succesfully added to ${collection.title}`,\n          })\n        )\n      )\n  }\n\n  removeBooksFromCollection(collection, books) {\n    return this.database\n      .removeBooksFromCollection(collection.id, books.map(book => book.id))\n      .then(\n        ignoreReturnFor(() =>\n          notify({\n            message: `${books.length} books succesfully removed from ${collection.title}`,\n          })\n        )\n      )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "database",
                        "type": "DatabaseService"
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "session",
                        "type": "SessionService"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "database",
                        "type": "DatabaseService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "session",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userRef": {
                    "name": "userRef",
                    "setSignature": {
                        "name": "userRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "ref",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "ref",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "setBooksToImport": {
                    "name": "setBooksToImport",
                    "setSignature": {
                        "name": "setBooksToImport",
                        "type": "void",
                        "args": [
                            {
                                "name": "books",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "books",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SessionService",
            "id": "injectable-SessionService-66484293599d6d7a98d5ea6fb5af6669",
            "file": "src/services/session.service.ts",
            "properties": [
                {
                    "name": "_goodreadsId",
                    "defaultValue": "new BehaviorSubject<number>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_localUser",
                    "defaultValue": "new BehaviorSubject<User>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_userId",
                    "defaultValue": "new BehaviorSubject<string>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "goodreadsId$",
                    "defaultValue": "this._goodreadsId.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "localUser$",
                    "defaultValue": "this._localUser.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userId$",
                    "defaultValue": "this._userId.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "buildSession",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroySession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { User } from 'models/user.model'\nimport { BehaviorSubject } from 'rxjs'\n\n@Injectable()\nexport class SessionService {\n  private _localUser = new BehaviorSubject<User>(undefined)\n  private _userId = new BehaviorSubject<string>(undefined)\n  private _goodreadsId = new BehaviorSubject<number>(undefined)\n\n  localUser$ = this._localUser.asObservable()\n  userId$ = this._userId.asObservable()\n  goodreadsId$ = this._goodreadsId.asObservable()\n\n  get localUser(): User {\n    return JSON.parse(localStorage.getItem('user'))\n  }\n\n  set localUser(user: User) {\n    localStorage.setItem('user', JSON.stringify(user))\n    this._localUser.next(user)\n    this._userId.next(user.id)\n  }\n\n  get userId() {\n    return JSON.parse(localStorage.getItem('user')).id\n  }\n\n  set goodreadsId(id: number) {\n    this.localUser = { ...this.localUser, goodreadsId: id }\n    this._goodreadsId.next(id)\n  }\n\n  buildSession(user: User = null) {\n    if (user) {\n      this.localUser = user\n    } else {\n      user = this.localUser\n    }\n\n    console.log('Building session...')\n    this._userId.next(user.id)\n    this._localUser.next(user)\n    this._goodreadsId.next(+user.goodreadsId)\n  }\n\n  destroySession() {\n    console.log('Destroying session...')\n    localStorage.removeItem('user')\n    this._localUser.next(undefined)\n    this._userId.next(undefined)\n  }\n}\n",
            "accessors": {
                "localUser": {
                    "name": "localUser",
                    "setSignature": {
                        "name": "localUser",
                        "type": "void",
                        "args": [
                            {
                                "name": "user",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "user",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "localUser",
                        "type": "",
                        "returnType": "User",
                        "line": 15
                    }
                },
                "userId": {
                    "name": "userId",
                    "getSignature": {
                        "name": "userId",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                },
                "goodreadsId": {
                    "name": "goodreadsId",
                    "setSignature": {
                        "name": "goodreadsId",
                        "type": "void",
                        "args": [
                            {
                                "name": "id",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "UiService",
            "id": "injectable-UiService-7d226713c5cd0732d234d03ccff4f131",
            "file": "src/services/ui.service.ts",
            "properties": [
                {
                    "name": "_bookGrouping",
                    "defaultValue": "new BehaviorSubject<string>('no grouping')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_collectionGrouping",
                    "defaultValue": "new BehaviorSubject<string>('no grouping')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "bookGrouping$",
                    "defaultValue": "this._bookGrouping.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "collectionGrouping$",
                    "defaultValue": "this._collectionGrouping.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\n\n@Injectable()\nexport class UiService {\n  private _bookGrouping = new BehaviorSubject<string>('no grouping')\n  private _collectionGrouping = new BehaviorSubject<string>('no grouping')\n\n  bookGrouping$ = this._bookGrouping.asObservable()\n  collectionGrouping$ = this._collectionGrouping.asObservable()\n\n  set bookGrouping(value) {\n    this._bookGrouping.next(value)\n  }\n  set collectionGrouping(value) {\n    this._collectionGrouping.next(value)\n  }\n}\n",
            "accessors": {
                "bookGrouping": {
                    "name": "bookGrouping",
                    "setSignature": {
                        "name": "bookGrouping",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "collectionGrouping": {
                    "name": "collectionGrouping",
                    "setSignature": {
                        "name": "collectionGrouping",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "PdFreeAngularcliPage",
            "id": "class-PdFreeAngularcliPage-80b43844bd162b6d58b4625841148468",
            "file": "e2e/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor'\n\nexport class PdFreeAngularcliPage {\n  navigateTo() {\n    return browser.get('/')\n  }\n\n  getParagraphText() {\n    return element(by.css('app-root h1')).getText()\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-699b6af7897f82a1fb7387b2be12f92f",
            "file": "src/directives/click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  Directive,\n  Output,\n  HostListener,\n  ElementRef,\n  EventEmitter,\n} from '@angular/core'\n\n@Directive({\n  selector: '[clickOutside]',\n})\nexport class ClickOutsideDirective {\n  @Output() clickOutside = new EventEmitter<MouseEvent>()\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event'])\n  public onDocumentClick(event: MouseEvent): void {\n    const targetElement = event.target as HTMLElement\n\n    // Check if the click was outside the element\n    if (\n      targetElement &&\n      !this.elementRef.nativeElement.contains(targetElement)\n    ) {\n      this.clickOutside.emit(event)\n    }\n  }\n}\n",
            "selector": "[clickOutside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 18
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AddBookComponent",
            "id": "component-AddBookComponent-3ef5572304ef66efce896ef7d4a9a7bc",
            "file": "src/app/dashboard/books/edit-book/add-book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "add-book",
            "styleUrls": [
                "./edit-book.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "edit-book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_preventSubmit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "allAuthors",
                    "defaultValue": "[]",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "allCollections",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "allGenres",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "allTags",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "authorFocus",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "authorHasFocus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "authorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "book",
                    "defaultValue": "{} as Book",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "buttonsComponent",
                    "type": "BookButtonsComponent",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BookButtonsComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "collections",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "displayDelete",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fromGoodreads",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "genres",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "goodreadsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loadingBook",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "loadingCollections",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedAuthorId",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectedLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "defaultValue": "'Add new book'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "enterKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGenres",
                    "args": [
                        {
                            "name": "genres",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "genres",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTags",
                    "args": [
                        {
                            "name": "tags",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveCollection",
                    "args": [
                        {
                            "name": "origin",
                            "type": ""
                        },
                        {
                            "name": "target",
                            "type": ""
                        },
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "selectAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { Location } from '@angular/common'\nimport { Book } from 'models/book.model'\nimport { Author } from 'models/author.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { cleanFormValues } from 'utils/helpers'\nimport { BookButtonsComponent } from '../../core/book-buttons/book-buttons.component'\nimport { LibraryService } from 'services/library.service'\nimport { debounceTime, distinctUntilChanged, last } from 'rxjs/operators'\nimport { DatabaseService } from 'services/database.service'\nimport { SessionService } from 'services/session.service'\nimport { notify } from 'utils/notifications'\nimport {Subject} from 'rxjs'\n\n@Component({\n  moduleId: module.id,\n  selector: 'add-book',\n  templateUrl: 'edit-book.component.html',\n  styleUrls: ['./edit-book.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class AddBookComponent implements OnInit {\n  form: FormGroup\n  allAuthors: Author[] = []\n  allCollections: string[] = []\n  allTags: string[] = []\n  allGenres: string[] = []\n  collections: string[]\n  genres: string[]\n  tags: string[]\n  selectedLanguage: string\n  book = {} as Book\n  selectedAuthorId = 0\n  title = 'Add new book'\n  fromGoodreads = false\n  loadingBook = false\n  loadingCollections = true\n  displayDelete = false\n  goodreadsId: number\n  authorName: string\n  authorHasFocus: boolean\n  authorFocus = new Subject<boolean>()\n  _preventSubmit: boolean\n\n  @ViewChild(BookButtonsComponent, { static: false })\n  buttonsComponent: BookButtonsComponent\n\n  set preventSubmit(value) {\n    this._preventSubmit = value\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private location: Location,\n    private libraryService: LibraryService,\n    private databaseService: DatabaseService,\n    private sessionService: SessionService\n  ) {\n    this.libraryService.collections$.subscribe(collections => {\n      this.allCollections = collections.map(collection => collection.title)\n      this.loadingCollections = false\n    })\n    this.libraryService.authors$.subscribe(\n      authors => (this.allAuthors = authors)\n    )\n    this.libraryService.tags$.subscribe(tags => (this.allTags = tags))\n    this.libraryService.genres$.subscribe(genres => (this.allGenres = genres))\n    this.form = this.fb.group({\n      title: ['', Validators.required],\n      original: '',\n      author: ['', Validators.required],\n      publisher: '',\n      year: [0, Validators.min(0)],\n      pages: [0, Validators.min(0)],\n      notes: '',\n      imageLarge: '',\n      imageSmall: '',\n      rating: 0,\n    })\n  }\n\n  ngOnInit() {\n    this.collections = []\n    this.genres = []\n    this.tags = []\n    this.selectedLanguage = 'Select a language'\n\n    this.authorFocus\n      .pipe(debounceTime(10))\n      .subscribe(value => (this.authorHasFocus = value))\n\n    this.form\n      .get('author')\n      .valueChanges.pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe(value => (this.authorName = value))\n  }\n\n  selectAuthor(author) {\n    this.authorName = author.name\n    this.selectedAuthorId = author.id\n    this.form.patchValue({ author: author.name })\n  }\n\n  enterKeyDown(event, formValues) {\n    this._preventSubmit ? event.preventDefault() : this.submit(formValues)\n  }\n\n  submit(formValues) {\n    const newValues = {\n      date: new Date().toISOString(),\n      ...(this.genres.length > 0 && { genres: this.genres }),\n      ...(this.tags.length > 0 && { tags: this.tags }),\n      ...(this.collections.length > 0 && { collections: this.collections }),\n      ...(this.selectedLanguage !== 'Select a language' && {\n        language: this.selectedLanguage,\n      }),\n      ...cleanFormValues(formValues),\n      ...this.buttonsComponent.getValues(),\n      ...(this.selectedAuthorId != null\n        ? { goodreadsAuthorId: this.selectedAuthorId }\n        : {}),\n      ...(this.goodreadsId ? { goodreadsId: this.goodreadsId } : {}),\n    }\n\n    Object.assign(this.book, newValues)\n\n    console.log('Adding book', this.book)\n\n    this.libraryService.addBook(this.book)\n    this.location.back()\n  }\n\n  getGenres(genres: string[]) {\n    this.genres = genres\n  }\n\n  getTags(tags: string[]) {\n    this.tags = tags\n  }\n\n  moveCollection(origin, target, index) {\n    const collection = origin.splice(index, 1)[0]\n    target.push(collection)\n\n    this.allCollections.sort((a, b) => {\n      if (a < b) {\n        return -1\n      }\n      if (a > b) {\n        return 1\n      }\n      return 0\n    })\n  }\n\n  uploadImage(event) {\n    this.databaseService\n      .uploadBookCover(\n        this.sessionService.userId,\n        this.book.id,\n        event.target.files[0]\n      )\n      .pipe(last())\n      .subscribe(imagePath => {\n        notify({ message: 'Cover succesfully updated' })\n        this.book.imageLarge = imagePath\n        this.form.patchValue({ imageLarge: imagePath, imageSmall: imagePath })\n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 16px 0;\n}\n\n.book-image {\n  display: block;\n  margin: auto;\n  width: 300px;\n}\n\n.book-image > img {\n  height: 58px;\n  width: auto;\n}\n\n@media only screen and (max-width: 991px) {\n  .book-image {\n    width: 100%;\n  }\n}\n\n.btn-collections {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.required {\n  color: #9a9a9a;\n}\n\n.collections {\n  padding: 5px 0;\n  font-size: 12px;\n}\n\n.collection {\n  margin: 0 4px;\n}\n\n.icon {\n  font-weight: bold;\n}\n\n.close-icon {\n  font-weight: bold;\n  font-size: 10px;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n}\n\n.imported-from-gr {\n  font-size: 16px;\n  color: #9a9a9a;\n  text-align: center;\n}\n\n.imported-from-gr > img {\n  height: 20px;\n  padding: 2px;\n}\n\n.goodreads-img {\n  height: 16px;\n}\n\n.goodreads-img-disabled {\n  opacity: 0.2;\n}\n\n.search-results {\n  padding: 0;\n  width: 100%;\n  z-index: 1;\n  max-height: 150px;\n  border-color: #888888;\n  border-radius: 4px;\n  list-style: none;\n  color: rgb(105, 105, 105);\n  border: 1px solid #ccc;\n  border-top: none;\n  /*so things don't jump around*/\n  position: absolute;\n  left: 0;\n  top: calc(50% + 20px);\n  overflow-y: auto;\n  background: #fff;\n}\n\n.result {\n  cursor: pointer;\n  min-height: 70px;\n  text-align: left;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  padding: 6px;\n  color: #333333;\n  font-size: 14px;\n}\n\n.result:hover {\n  background: #f7f7f7;\n}\n\n.author-image {\n  width: 10%;\n}\n\n.author-name {\n  padding-left: 6px;\n}\n",
                    "styleUrl": "./edit-book.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "preventSubmit": {
                    "name": "preventSubmit",
                    "setSignature": {
                        "name": "preventSubmit",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<loading [visible]=\"loadingBook || loadingCollections\"></loading>\n<page-navigator *ngIf=\"!(loadingBook || loadingCollections)\">\n  <div class=\"card\" [@card]>\n    <div class=\"header\">\n      <h4 class=\"title\">{{ title }}</h4>\n      <div *ngIf=\"displayDelete\">\n        <button\n          type=\"button\"\n          class=\"btn btn-danger\"\n          style=\"width: 100%\"\n          (click)=\"this.modal.openModal()\"\n        >\n          <i class=\"pe-7s-trash\"></i>\n          Delete\n        </button>\n      </div>\n    </div>\n\n    <div class=\"content\">\n      <form\n        (keydown.enter)=\"enterKeyDown($event, form.value)\"\n        [formGroup]=\"form\"\n      >\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <!-- Image -->\n            <loading-overlay [visible]=\"loadingImage\"></loading-overlay>\n            <img\n              class=\"book-image\"\n              [src]=\"\n                book.imageLarge\n                  ? book.imageLarge\n                  : book.imageSmall\n                  ? book.imageSmall\n                  : '/assets/img/no-book-cover.png'\n              \"\n              alt=\"Book cover\"\n              style=\"cursor: pointer\"\n              (click)=\"imageUpload.click()\"\n            />\n            <input\n              style=\"display: none\"\n              [hidden]=\"true\"\n              #imageUpload\n              type=\"file\"\n              (change)=\"uploadImage($event)\"\n            />\n          </div>\n        </div>\n        <!-- First row -->\n        <div class=\"row\">\n          <!-- Title -->\n          <div class=\"col-xs-12 col-md-6\">\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['title'].valid &&\n                  form.controls['title'].touched\n              }\"\n            >\n              <label>Book Title <span style=\"color: red\">*</span></label>\n              <div style=\"display: flex\">\n                <div style=\"width: 100%\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"Your version title\"\n                    formControlName=\"title\"\n                  />\n                  <span\n                    class=\"help-block\"\n                    *ngIf=\"\n                      !form.controls['title'].valid &&\n                      form.controls['title'].touched\n                    \"\n                  >\n                    Please enter a valid book title.\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Author -->\n          <div\n            [ngClass]=\"{\n              'col-xs-10 col-md-5': selectedAuthorId,\n              'col-xs-12 col-md-6': !selectedAuthorId\n            }\"\n          >\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['author'].valid &&\n                  form.controls['author'].touched\n              }\"\n            >\n              <label>Author <span style=\"color: red\">*</span></label>\n              <div style=\"display: flex; width: 100%; flex-direction: column;\">\n                <div class=\"input-group\" style=\"width: 100%;\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"Author name\"\n                    formControlName=\"author\"\n                    (focus)=\"authorFocus.next(true)\"\n                    (blur)=\"authorFocus.next(false)\"\n                  />\n                  <div\n                    class=\"input-group-addon\"\n                    style=\"border: 1px solid #E3E3E3\"\n                  >\n                    <img\n                      class=\"goodreads-img\"\n                      [ngClass]=\"{\n                        'goodreads-img-disabled': !selectedAuthorId\n                      }\"\n                      src=\"/assets/img/goodreads.png\"\n                      [tooltip]=\"\n                        selectedAuthorId\n                          ? 'Linked to Goodreads'\n                          : 'Not linked to Goodreads'\n                      \"\n                      [tooltipAnimation]=\"true\"\n                      placement=\"bottom\"\n                    />\n                  </div>\n                  <ul\n                    *ngIf=\"authorHasFocus\"\n                    class=\"search-results\"\n                    #searchResults\n                  >\n                    <li\n                      *ngFor=\"\n                        let author of allAuthors\n                          | searchFilter: authorName:['name']\n                      \"\n                      class=\"result\"\n                      (click)=\"selectAuthor(author)\"\n                    >\n                      <img\n                        class=\"author-image\"\n                        (click)=\"selectAuthor(author)\"\n                        *ngIf=\"author.imageSmall || author.imageLarge\"\n                        [src]=\"author.imageSmall || author.imageLarge\"\n                        alt=\"Author\"\n                      />\n                      <div class=\"author-name\">\n                        {{ author.name }}\n                      </div>\n                    </li>\n                    <li\n                      *ngIf=\"\n                        !(allAuthors | searchFilter: authorName:['name']).length\n                      \"\n                      #result\n                      class=\"result\"\n                    >\n                      No results found\n                    </li>\n                  </ul>\n                </div>\n                <span\n                  class=\"help-block\"\n                  *ngIf=\"\n                    !form.controls['author'].valid &&\n                    form.controls['author'].touched\n                  \"\n                >\n                  Please enter a valid author name.\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-xs-2 col-md-1\" *ngIf=\"selectedAuthorId\">\n            <button\n              type=\"button\"\n              (click)=\"selectedAuthorId = 0\"\n              class=\"btn btn-default\"\n              style=\"margin-top: 25px; width: 100%;\"\n              tooltip=\"Remove Goodreads Link\"\n              [tooltipAnimation]=\"true\"\n              placement=\"bottom\"\n            >\n              <i class=\"ti-unlink icon\"></i>\n            </button>\n          </div>\n        </div>\n\n        <!-- Second row -->\n        <div class=\"row\">\n          <!-- Original title -->\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label>Original Title</label>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"Original version title\"\n                formControlName=\"original\"\n              />\n            </div>\n          </div>\n          <!-- Publisher -->\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label>Publisher</label>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"Publisher\"\n                formControlName=\"publisher\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <!-- Third row -->\n        <div class=\"row\">\n          <!-- Year -->\n          <div class=\"col-md-2\">\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['year'].valid && form.controls['year'].touched\n              }\"\n            >\n              <label>Year</label>\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                placeholder=\"Year\"\n                formControlName=\"year\"\n              />\n              <span\n                class=\"help-block\"\n                *ngIf=\"\n                  !form.controls['year'].valid && form.controls['year'].touched\n                \"\n                >Please enter a valid year.</span\n              >\n            </div>\n          </div>\n          <!-- Pages -->\n          <div class=\"col-md-2\">\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['pages'].valid &&\n                  form.controls['pages'].touched\n              }\"\n            >\n              <label>Pages</label>\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                placeholder=\"Pages\"\n                formControlName=\"pages\"\n              />\n              <span\n                class=\"help-block\"\n                *ngIf=\"\n                  !form.controls['pages'].valid &&\n                  form.controls['pages'].touched\n                \"\n                >Please enter a valid number of pages.</span\n              >\n            </div>\n          </div>\n          <!-- Language -->\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <language-selector\n                [selectedLanguage]=\"selectedLanguage\"\n                (select)=\"selectedLanguage = $event\"\n              ></language-selector>\n            </div>\n          </div>\n          <!-- About -->\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <book-buttons\n                [owned]=\"!!book.owned\"\n                [read]=\"!!book.read\"\n                [favorite]=\"!!book.favorite\"\n                [wishlist]=\"!!book.wishlist\"\n              ></book-buttons>\n            </div>\n          </div>\n          <!-- Rating -->\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <label>Rating</label><br />\n              <rating\n                style=\"font-size: 20px\"\n                formControlName=\"rating\"\n                [titles]=\"['', '', '', '', '']\"\n              ></rating>\n            </div>\n          </div>\n        </div>\n\n        <!-- Fourth row -->\n        <div class=\"row\">\n          <!-- Genres -->\n          <div class=\"col-md-4\">\n            <div class=\"form-group\">\n              <!-- Genres -->\n              <book-tags\n                title=\"Genres\"\n                placeholder=\"Add genre...\"\n                iconClass=\"pe-7s-folder\"\n                [items]=\"genres\"\n                [suggestions]=\"allGenres\"\n                (getItems)=\"getGenres($event)\"\n                (hasFocus)=\"preventSubmit = $event\"\n              ></book-tags>\n            </div>\n          </div>\n          <!-- Tags-->\n          <div class=\"col-md-4\">\n            <div class=\"form-group\">\n              <!-- Tags -->\n              <book-tags\n                title=\"Tags\"\n                placeholder=\"Add tags...\"\n                iconClass=\"pe-7s-ticket\"\n                [items]=\"tags\"\n                [suggestions]=\"allTags\"\n                (getItems)=\"getTags($event)\"\n                (hasFocus)=\"preventSubmit = $event\"\n                tags=\"true\"\n              ></book-tags>\n            </div>\n          </div>\n          <!-- Collection -->\n          <div class=\"col-md-4\">\n            <div class=\"form-group\">\n              <label>Collections</label>\n              <div class=\"dropdown\">\n                <button\n                  class=\"btn btn-default dropdown-toggle btn-collections\"\n                  type=\"button\"\n                  data-toggle=\"dropdown\"\n                >\n                  Add book to a collection\n                  <span class=\"caret\"></span>\n                </button>\n                <ul class=\"dropdown-menu\">\n                  <ng-container *ngIf=\"allCollections.length\">\n                    <li\n                      *ngFor=\"let collection of allCollections; let i = index\"\n                    >\n                      <a\n                        href=\"javascript:void(0);\"\n                        (click)=\"moveCollection(allCollections, collections, i)\"\n                      >\n                        {{ collection }}\n                      </a>\n                    </li>\n                  </ng-container>\n                  <li *ngIf=\"!allCollections.length\">\n                    <a><i>No collections</i></a>\n                  </li>\n                </ul>\n              </div>\n              <div class=\"collections\">\n                <span\n                  *ngFor=\"\n                    let collection of collections;\n                    let i = index;\n                    let lastItem = last\n                  \"\n                  class=\"collection\"\n                >\n                  <i class=\"pe-7s-albums icon\"></i>\n                  {{ collection }}\n                  <a\n                    href=\"javascript:void(0);\"\n                    (click)=\"moveCollection(collections, allCollections, i)\"\n                  >\n                    <i class=\"ti-close close-icon\"></i>\n                  </a>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div\n            class=\"col-xs-12 form-group\"\n            [ngClass]=\"{\n              'has-error':\n                !form.controls['imageLarge'].valid &&\n                form.controls['imageLarge'].touched\n            }\"\n          >\n            <label>\n              Book Cover\n              <a\n                href=\"javascript:void(0);\"\n                (click)=\"\n                  this.form.patchValue({ imageLarge: '', imageSmall: '' })\n                \"\n              >\n                <i class=\"pe-7s-close-circle\" style=\"font-size: 100%\"></i>\n              </a>\n            </label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"Link to the book cover\"\n              formControlName=\"imageLarge\"\n            />\n            <span\n              class=\"help-block\"\n              *ngIf=\"\n                !form.controls['imageLarge'].valid &&\n                form.controls['imageLarge'].touched\n              \"\n            >\n              Please enter a valid link to your book cover.\n            </span>\n          </div>\n        </div>\n        <!-- Notes -->\n        <div class=\"row\">\n          <div class=\"col-xs-12 form-group\">\n            <label>Notes</label>\n            <textarea\n              formControlName=\"notes\"\n              rows=\"8\"\n              class=\"form-control\"\n              placeholder=\"Leave notes, thoughts, or a full review of the book here :)\"\n              value=\"\"\n            ></textarea>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-xs-12 required\">\n            <span style=\"color: red\">*</span> Required fields\n          </div>\n        </div>\n        <!-- Goodreads -->\n        <div *ngIf=\"book.goodreadsId\" class=\"row\">\n          <div class=\"col-md-12 imported-from-gr\">\n            <hr />\n            This book was imported from <img src=\"/assets/img/goodreads.png\" />©\n            <hr />\n          </div>\n        </div>\n\n        <!-- Buttons -->\n        <hr *ngIf=\"!book.goodreadsId\" />\n        <div class=\"row\">\n          <div class=\"col-xs-12\">\n            <button\n              type=\"button\"\n              class=\"btn btn-success\"\n              style=\"width: 100%\"\n              (click)=\"submit(form.value)\"\n              [disabled]=\"!form.valid\"\n            >\n              <i class=\"pe-7s-diskette\"></i>\n              Save\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</page-navigator>\n\n<modal\n  *ngIf=\"displayDelete\"\n  #deleteBookModal\n  title=\"Are you sure you want to delete {{ book.title }}?\"\n  content=\"This book will be removed permanently from your library.\"\n  cancel=\"Cancel\"\n  accept=\"Accept\"\n  [onAccept]=\"deleteBook.bind(this)\"\n></modal>\n"
        },
        {
            "name": "AddCollectionComponent",
            "id": "component-AddCollectionComponent-f1cdb27beafdf24a1cc8e7a2b42805b6",
            "file": "src/app/dashboard/collections/edit-collection/add-collection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "add-collection",
            "styleUrls": [
                "./edit-collection.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "edit-collection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "button",
                    "defaultValue": "'Add collection'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "collection",
                    "type": "Collection",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "description",
                    "defaultValue": "'Add a new collection to your library'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "displayDelete",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "formatDate",
                    "defaultValue": "formatDate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoadingBooks",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tableItems",
                    "defaultValue": "{ ...DEFAULT_TABLE_ITEMS, Cover: false }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "title",
                    "defaultValue": "'Add new collection'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "loadBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { Location } from '@angular/common'\nimport { Collection } from 'models/collection.model'\nimport { LibraryService } from 'services/library.service'\nimport { formatDate } from 'utils/helpers'\nimport { ANIMATIONS, DEFAULT_TABLE_ITEMS } from 'utils/constants'\nimport { map } from 'rxjs/operators'\n\n@Component({\n  moduleId: module.id,\n  selector: 'add-collection',\n  templateUrl: 'edit-collection.component.html',\n  styleUrls: ['./edit-collection.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class AddCollectionComponent implements OnInit, OnDestroy {\n  form: FormGroup\n  collection: Collection\n  title = 'Add new collection'\n  description = 'Add a new collection to your library'\n  button = 'Add collection'\n  books = []\n  isLoading = false\n  isLoadingBooks = true\n  displayDelete = false\n  formatDate = formatDate\n  subscription\n  tableItems = { ...DEFAULT_TABLE_ITEMS, Cover: false }\n\n  constructor(\n    private fb: FormBuilder,\n    private location: Location,\n    private libraryService: LibraryService\n  ) {\n    this.form = this.fb.group({\n      title: ['', Validators.required],\n      description: '',\n    })\n    this.loadBooks()\n  }\n\n  ngOnInit() {}\n\n  ngOnDestroy() {\n    if (!this.subscription) {\n      return\n    }\n    this.subscription.unsubscribe()\n  }\n\n  submit(formValues) {\n    this.collection = {\n      title: formValues.title,\n      description: formValues.description,\n      books: this.books.filter(book => book.isSelected),\n    } as Collection\n\n    console.log('Adding collection', this.collection)\n    this.libraryService\n      .addCollection(this.collection)\n      .then(collection => (this.collection.id = collection.id))\n\n    this.location.back()\n  }\n\n  loadBooks() {\n    this.libraryService.books$\n      .pipe(\n        map(books =>\n          books.map(book => {\n            book.canBeSelected = true\n            book.isSelected = false\n            return book\n          })\n        )\n      )\n      .subscribe(books => {\n        if (!books) {\n          return\n        }\n        this.isLoadingBooks = false\n        this.books = books\n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  display: flex;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./edit-collection.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<loading [visible]=\"isLoading\"></loading>\n<page-navigator *ngIf=\"!isLoading\">\n  <div class=\"card\" [@card]>\n    <div class=\"header\">\n      <h4 class=\"title\">{{title}}</h4>\n      <div>\n        <button *ngIf=\"displayDelete\" type=\"button\" class=\"btn btn-danger\" style=\"width: 100%\" (click)=\"this.modal.openModal()\">\n          <i class=\"pe-7s-trash\"></i>\n          Delete\n        </button>\n      </div>\n    </div>\n    <div class=\"content\">\n      <form [formGroup]=\"form\" (ngSubmit)=\"submit(form.value)\">\n        <div class=\"row\">\n          <div class=\"col-xs-12\">\n            <!-- Title -->\n            <div class=\"form-group\" [ngClass] = \"{'has-error': !form.controls['title'].valid && form.controls['title'].touched}\">\n              <label>Collection Title <span style=\"color: red\">*</span></label>\n              <input type=\"text\" class=\"form-control\" placeholder=\"Your version title\" formControlName=\"title\">\n              <span class=\"help-block\" *ngIf=\"!form.controls['title'].valid && form.controls['title'].touched\">Please enter a valid title.</span>\n            </div>\n          </div>\n        </div>\n        <!-- Description -->\n        <div class=\"form-group\">\n          <label>Description</label>\n          <textarea formControlName=\"description\" rows=\"3\" class=\"form-control\" placeholder=\"What is this collection about?\" value=\"\"></textarea>\n        </div>\n\n        <!-- Add books -->\n        <loading [visible]=\"isLoading || isLoadingBooks\"></loading>\n        <label>Books</label>\n        <h5 *ngIf=\"!books || !books.length\" class=\"text-muted\" style=\"font-style: italic; font-size: 0.9em; margin: 4px 0;\">\n          You currently don't have any books. Add a book to get started with your library! :)\n        </h5>\n        <books-display\n          *ngIf=\"!isLoadingBooks && !isLoading\"\n          [tilesDisplay]=\"false\"\n          [tableDisplayItems]=\"tableItems\"\n          [books]=\"books\"\n          [selectable]=\"true\"\n          [displayOnlySelectedBtn]=\"true\"\n        ></books-display>\n        <!-- Require -->\n        <div class=\"row\">\n          <div class=\"col-xs-12 required\">\n            <span style=\"color: red\">*</span> Required fields\n          </div>\n        </div>\n\n        <!-- Buttons -->\n\t\t\t\t<hr>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n            <button type=\"button\" class=\"btn btn-default\" style=\"width: 100%\" (click)=\"this.router.navigate(['../../'], { relativeTo: this.route })\">\n              <i class=\"pe-7s-back\"></i>\n              Cancel\n            </button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6\">\n            <button type=\"button\" class=\"btn btn-success\" style=\"width: 100%\" (click)=\"submit(form.value)\" [disabled]=\"!form.valid\">\n              <i class=\"pe-7s-diskette\"></i>\n              Save\n            </button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      </form>\n    </div>\n  </div>\n</page-navigator>\n\n<modal\n  *ngIf=\"collection\"\n  #deleteCollectionModal\n  title=\"Are you sure you want to delete {{collection.title}}?\"\n  content=\"This collection will be removed permanently from your library. All books related to this collection will be kept.\"\n  cancel=\"Cancel\"\n  accept=\"Accept\"\n  [onAccept]=\"deleteCollection && deleteCollection.bind(this)\"\n></modal>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-18797f6cab25b1ab8502c5f2db8759ba",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport 'bootstrap-notify'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "AuthorCardComponent",
            "id": "component-AuthorCardComponent-298478ac11f375fab07ff875f25e96ec",
            "file": "src/app/dashboard/core/author-card/author-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "author-card",
            "styleUrls": [
                "./author-card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./author-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "author",
                    "line": 12,
                    "type": ""
                },
                {
                    "name": "clickable",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "linkable",
                    "line": 14,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Author>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { Author } from 'models/author.model'\nimport { ANIMATIONS } from 'utils/constants'\n\n@Component({\n  selector: 'author-card',\n  templateUrl: './author-card.component.html',\n  styleUrls: ['./author-card.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class AuthorCardComponent implements OnInit {\n  @Input() author: Author & any\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n  @Output() onClick = new EventEmitter<Author>()\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  select() {\n    if (!this.clickable) {\n      return\n    }\n    this.onClick.emit(this.author)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 5px 0;\n}\n\nimg {\n  border-radius: 4px;\n}\n\n.card {\n  margin-bottom: 30px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n@media only screen and (min-width: 991px) {\n  .card {\n    height: 27vw;\n  }\n}\n\n.card-clickable:hover {\n  background: #ecfdef;\n  cursor: pointer;\n}\n\n.selected {\n  background: #ecfdef;\n}\n\n.title {\n  font-size: 1.2em;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  flex: 1;\n  height: 100%;\n  overflow: hidden;\n}\n\n.image {\n  height: auto;\n  flex: 1;\n  border-radius: 4px;\n}\n\n.image-wrapper {\n  height: 100%;\n  overflow: hidden;\n  border-radius: 4px;\n}\n",
                    "styleUrl": "./author-card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"card\"\n  (click)=\"select()\"\n  [ngClass]=\"{\n    'card-clickable': clickable && !author.canBeSelected,\n    selected: clickable && author.isSelected\n  }\"\n>\n  <div class=\"header\">\n    <!-- Header -->\n    <h4 class=\"title\">\n      <a\n        *ngIf=\"linkable\"\n        href=\"#\"\n        routerLink=\"/dashboard/authors/{{ author.id }}\"\n        >{{ author.name }}</a\n      >\n      {{ linkable ? '' : author.name }}\n    </h4>\n    <hr />\n  </div>\n  <div class=\"content\">\n    <!-- Image -->\n    <div class=\"image-wrapper\">\n      <a\n        *ngIf=\"linkable\"\n        href=\"javascript:void(0);\"\n        routerLink=\"/dashboard/authors/{{ author.id }}\"\n      >\n        <img\n          class=\"image img-rounded\"\n          [src]=\"\n            author.imageLarge\n              ? author.imageLarge\n              : author.imageSmall\n              ? author.imageSmall\n              : '/assets/img/no-book-cover.png'\n          \"\n          alt=\"Author picture\"\n        />\n      </a>\n      <img\n        *ngIf=\"!linkable\"\n        [src]=\"\n          author.imageLarge\n            ? author.imageLarge\n            : author.imageSmall\n            ? author.imageSmall\n            : '/assets/img/no-book-cover.png'\n        \"\n        alt=\"Author picture\"\n      />\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AuthorComponent",
            "id": "component-AuthorComponent-f65276a1a0f48d1878ad3e4643a21be8",
            "file": "src/app/dashboard/authors/author/author.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "author",
            "styleUrls": [
                "./author.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "author.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "author",
                    "defaultValue": "{} as Author",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hasSelectedBooks",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showAllAbout",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tableDisplayItems",
                    "defaultValue": "{\n    Cover: true,\n    Year: false,\n    Publisher: false,\n    Pages: false,\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "importBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "updateSelectedBooks",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { Book } from 'models/book.model'\nimport { Author } from 'models/author.model'\nimport { GoodreadsService } from 'services/goodreads.service'\nimport { LibraryService } from 'services/library.service'\nimport { parseBook, parseAuthor } from 'utils/helpers'\nimport { ANIMATIONS } from 'utils/constants'\nimport * as _ from 'lodash'\n\n@Component({\n  moduleId: module.id,\n  selector: 'author',\n  templateUrl: 'author.component.html',\n  styleUrls: ['./author.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class AuthorComponent implements OnInit {\n  author = {} as Author\n  isLoading = true\n  hasSelectedBooks = false\n  showAllAbout = false\n  tableDisplayItems = {\n    Cover: true,\n    Year: false,\n    Publisher: false,\n    Pages: false,\n  }\n\n  get localUrlPath(): string {\n    const splitUrl = this.router.url.split('/')\n    return splitUrl[splitUrl.length - 1]\n  }\n\n  constructor(\n    private goodreadsService: GoodreadsService,\n    private libraryService: LibraryService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.goodreadsService.getAuthor(+this.localUrlPath).subscribe(author => {\n      if (author) {\n        this.isLoading = false\n\n        const books = author.books.book.map(book =>\n          _.omit(parseBook(book), ['author'])\n        )\n\n        this.libraryService.books$.subscribe(ownBooks => {\n          if (!ownBooks) {\n            return\n          }\n          books.forEach(\n            book =>\n              (book.canBeSelected = !ownBooks\n                .map(ownBook => ownBook.goodreadsId)\n                .includes(book.goodreadsId))\n          )\n        })\n\n        this.author = parseAuthor(author, books) as Author\n      }\n    })\n  }\n\n  updateSelectedBooks(books: Book[]) {\n    this.hasSelectedBooks = books.some(book => book.isSelected)\n  }\n\n  importBooks() {\n    const booksToAdd = this.author.books\n      .filter(book => book.isSelected)\n      .map(book => ({\n        ...book,\n        author: this.author.name,\n        owned: false,\n        read: false,\n        favorite: false,\n        wishlist: false,\n        date: new Date().toISOString(),\n      }))\n    this.libraryService.addBooks(booksToAdd)\n    this.router.navigate(['/dashboard/books'])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\n  color: dimgray;\n}\n\nhr {\n  margin: 4px;\n}\n\n.author-photo {\n  display: block;\n  margin: auto;\n  border-radius: 0;\n  height: auto;\n  margin-bottom: 10px;\n}\n\n.collapse-button {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.collapse-button > i {\n  font-size: 28px;\n}\n\n.label {\n  font-size: 12px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #9a9a9a;\n  padding: 0;\n}\n",
                    "styleUrl": "./author.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "localUrlPath": {
                    "name": "localUrlPath",
                    "getSignature": {
                        "name": "localUrlPath",
                        "type": "string",
                        "returnType": "string",
                        "line": 30
                    }
                }
            },
            "templateData": "<loading [visible]=\"isLoading\"></loading>\n<page-navigator *ngIf=\"!isLoading\">\n  <div class=\"card\" [@card]>\n    <div class=\"header\">\n      <h4 class=\"title\">{{ author.name }}</h4>\n      <powered-by-goodreads></powered-by-goodreads>\n    </div>\n    <div class=\"content\">\n      <div class=\"row\">\n        <div class=\"col-md-3\">\n          <div class=\"image author-photo\">\n            <img\n              [src]=\"\n                author.imageLarge\n                  ? author.imageLarge\n                  : author.imageSmall\n                  ? author.imageSmall\n                  : '/assets/img/no-book-cover.png'\n              \"\n              alt=\"Author photo\"\n            />\n          </div>\n        </div>\n        <div class=\"col-md-9\">\n          <label>About:</label>\n          <p [innerHTML]=\"author.about | truncate: { paragraphs: 1 }\"></p>\n          <p\n            class=\"collapse\"\n            id=\"about\"\n            [innerHTML]=\"author.about | truncate: { paragraphStart: 1 }\"\n          ></p>\n          <div>\n            <a\n              href=\"#about\"\n              class=\"collapse-button\"\n              data-toggle=\"collapse\"\n              (click)=\"showAllAbout = !showAllAbout\"\n            >\n              <div class=\"label\">{{ showAllAbout ? 'Less' : 'More' }}</div>\n              <i\n                [ngClass]=\"{\n                  'pe-7s-angle-down': !showAllAbout,\n                  'pe-7s-angle-up': showAllAbout\n                }\"\n              ></i>\n            </a>\n            <hr />\n          </div>\n        </div>\n      </div>\n\n      <books-display\n        [books]=\"author.books\"\n        [selectable]=\"true\"\n        [tableDisplayItems]=\"tableDisplayItems\"\n        [displayBooksInLibraryInfo]=\"true\"\n        (selectedBooks)=\"updateSelectedBooks($event)\"\n      ></books-display>\n\n      <hr />\n      <div style=\"text-align: center;\">\n        <button\n          type=\"button\"\n          class=\"btn btn-success\"\n          style=\"width: 100%;\"\n          (click)=\"importBooks()\"\n          [disabled]=\"!hasSelectedBooks\"\n        >\n          Import books to your library\n        </button>\n      </div>\n    </div>\n  </div>\n</page-navigator>\n"
        },
        {
            "name": "AuthorsComponent",
            "id": "component-AuthorsComponent-a8bd14d14a2560b2214b56229d491346",
            "file": "src/app/dashboard/authors/authors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "authors-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "authors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'authors-cmp',\n  templateUrl: 'authors.component.html',\n  styleUrls: [],\n})\nexport class AuthorsComponent implements OnInit {\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-content\">\n  <div class=\"container-fluid\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "AuthorsDisplayComponent",
            "id": "component-AuthorsDisplayComponent-714cf20eee3019ad6f60cffb80266c76",
            "file": "src/app/dashboard/core/authors-display/authors-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "authors-display",
            "styleUrls": [
                "authors-display.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "authors-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "authors",
                    "line": 15,
                    "type": "Author[]"
                },
                {
                    "name": "cardsInRow",
                    "defaultValue": "4",
                    "line": 18
                },
                {
                    "name": "clickable",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "fullSearchBar",
                    "defaultValue": "false",
                    "line": 20
                },
                {
                    "name": "linkable",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "maxAuthors",
                    "line": 19
                },
                {
                    "name": "tilesDisplay",
                    "defaultValue": "true",
                    "line": 21
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Author>()",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayAll",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "immutableMaxAuthors",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pageCount",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "removeSpaces",
                    "defaultValue": "removeSpaces",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "searchInput",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchValue",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedAll",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "toggleTilesDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { removeSpaces } from 'utils/helpers'\nimport { MAX_BOOKS_DISPLAY, MAX_BOOKS_DISPLAY_LIST } from 'utils/constants'\nimport { FormControl } from '@angular/forms'\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators'\nimport { Author } from 'models/author.model'\n\n@Component({\n  moduleId: module.id,\n  selector: 'authors-display',\n  templateUrl: 'authors-display.component.html',\n  styleUrls: ['authors-display.component.css'],\n})\nexport class AuthorsDisplayComponent implements OnInit {\n  @Input() authors: Author[]\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n  @Input() cardsInRow = 4\n  @Input() maxAuthors\n  @Input() fullSearchBar = false\n  @Input() tilesDisplay = true\n\n  @Output() onClick = new EventEmitter<Author>()\n\n  searchInput = new FormControl()\n  displayAll = false\n  selectedAll = false\n  page = 1\n  pageCount = 1\n  immutableMaxAuthors = false\n  searchValue\n  removeSpaces = removeSpaces\n\n  ngOnInit() {\n    if (this.maxAuthors) {\n      this.immutableMaxAuthors = true\n    } else {\n      this.maxAuthors = MAX_BOOKS_DISPLAY\n    }\n\n    this.pageCount = Math.ceil((this.authors || []).length / this.maxAuthors)\n    this.searchInput.valueChanges\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe(value => (this.searchValue = value))\n  }\n\n  toggleTilesDisplay() {\n    this.tilesDisplay = !this.tilesDisplay\n    if (!this.immutableMaxAuthors) {\n      this.maxAuthors = this.tilesDisplay\n        ? MAX_BOOKS_DISPLAY\n        : MAX_BOOKS_DISPLAY_LIST\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons {\n  margin-bottom: 8px;\n}\n\n.btn-margin {\n  margin: 0 8px 0 0;\n}\n\n.full-search-bar {\n  width: 100%;\n}",
                    "styleUrl": "authors-display.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display: grid\">\n  <!-- Buttons -->\n  <div *ngIf=\"authors && authors.length > 0\" class=\"row buttons\">\n    <div class=\"col-md-12\" style=\"display: flex;\">\n      <button type=\"button\" class=\"btn btn-default btn-margin\" (click)=\"toggleTilesDisplay()\">\n        <i [ngClass]=\"{'ti-view-list': tilesDisplay, 'ti-layout-grid2': !tilesDisplay}\"></i>\n        {{tilesDisplay ? 'Table' : 'Tiles'}}\n      </button>\n      <div class=\"input-group btn-margin\" [ngClass]=\"{'full-search-bar': fullSearchBar}\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"Search\" [formControl]=\"searchInput\">\n        <span class=\"input-group-addon\" id=\"sizing-addon2\">\n          <i class=\"pe-7s-search search-icon\"></i>\n        </span>\n      </div>\n    </div>\n  </div>\n  <!-- Tiles -->\n  <ng-container *ngIf=\"tilesDisplay && authors && authors.length > 0\">\n    <authors-section\n      [authors]=\"authors | searchFilter: searchValue:['name'] | page: page:maxAuthors\"\n      [cardsInRow]=\"cardsInRow\"\n      [clickable]=\"clickable\"\n      [linkable]=\"linkable\"\n      (onClick)=\"onClick.emit($event)\"\n    ></authors-section>\n  </ng-container>\n  <!-- Table -->\n  <ng-container *ngIf=\"!tilesDisplay && authors && authors.length > 0\">\n    <authors-table\n      [authors]=\"authors | searchFilter: searchValue:['name'] | page:page:maxAuthors\"\n      [clickable]=\"clickable\"\n      [linkable]=\"linkable\"\n      (onClick)=\"onClick.emit($event)\"\n    ></authors-table>\n  </ng-container>\n  <!-- Pages -->\n  <pages\n    *ngIf=\"authors && authors.length\"\n    [count]=\"pageCount\"\n    [withRoute]=\"false\"\n    (nextSelectedPage)=\"page = $event\"\n  ></pages>\n</div>\n\n"
        },
        {
            "name": "AuthorsHomeComponent",
            "id": "component-AuthorsHomeComponent-3d6c42706eaaa8696266b630ab57b18a",
            "file": "src/app/dashboard/authors/authors-home/authors-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "authors-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "authors-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "maxAuthors",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "pageCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tilesDisplay",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Author } from 'models/author.model'\nimport { Book } from 'models/book.model'\nimport { LibraryService } from 'services/library.service'\nimport { ANIMATIONS, MAX_BOOKS, MAX_BOOKS_LIST } from 'utils/constants'\nimport { mergeMap, map } from 'rxjs/operators'\n\n@Component({\n  moduleId: module.id,\n  selector: 'authors-home',\n  templateUrl: 'authors-home.component.html',\n  styleUrls: [],\n  animations: [ANIMATIONS.CARD],\n})\nexport class AuthorsHomeComponent implements OnInit {\n  authors: Author[]\n  books: Book[]\n  isLoading = true\n  tilesDisplay = true\n  page: number\n  pageCount: number\n  maxAuthors: number\n\n  constructor(\n    private libraryService: LibraryService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.libraryService.authorCount$.subscribe(authorCount => {\n      if (!authorCount) {\n        this.isLoading = false\n        this.authors = []\n      }\n    })\n    this.libraryService.authors$.subscribe(authors => {\n      this.isLoading = false\n      this.authors = authors\n    })\n    this.route.queryParams.subscribe(params => {\n      this.tilesDisplay = !params['view'] || params['view'] === 'tiles'\n      this.page = params['page'] || 1\n    })\n    this.route.queryParams\n      .pipe(\n        mergeMap(params =>\n          this.libraryService.grAuthorIds$.pipe(\n            map(ids => ids.length),\n            map(authorCount => {\n              const view = params.view || 'tiles'\n              const max = view === 'tiles' ? MAX_BOOKS : MAX_BOOKS_LIST\n              const pageCount = Math.ceil(authorCount / max)\n              return {\n                maxAuthors: max,\n                pageCount: pageCount === 0 ? 1 : pageCount,\n              }\n            })\n          )\n        )\n      )\n      .subscribe(({ maxAuthors, pageCount }) => {\n        this.maxAuthors = maxAuthors\n        this.pageCount = pageCount\n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<library-navbar [type]=\"'authors'\" [displayPoweredByGr]=\"true\"></library-navbar>\n<loading [visible]=\"isLoading\"></loading>\n<!-- No authors -->\n<div\n  class=\"card\"\n  style=\"text-align: center;\"\n  [@card]\n  *ngIf=\"!isLoading && !authors.length\"\n>\n  <div class=\"header\">\n    <!-- Header -->\n    <h4 class=\"title\">\n      Oh no, your library is empty :(.\n    </h4>\n    <hr />\n    <p class=\"category\" placement=\"bottom\" style=\"padding-bottom: 10px\">\n      You don't seem to have any books or authors in your library. Why don't you\n      try adding a new book?<br />\n      You can add a new book by visiting the\n      <a routerLink=\"/dashboard/books\"><b>books</b></a> page on the sidebar and\n      clicking on <a routerLink=\"/dashboard/books/new\"><b>add new book</b></a>\n    </p>\n  </div>\n</div>\n<div\n  *ngIf=\"!isLoading && authors.length\"\n  [ngSwitch]=\"tilesDisplay\"\n  style=\"display: grid\"\n>\n  <authors-section\n    *ngSwitchCase=\"true\"\n    [authors]=\"authors | page: page:maxAuthors\"\n    [linkable]=\"true\"\n  ></authors-section>\n  <authors-table\n    *ngSwitchCase=\"false\"\n    [authors]=\"authors | page: page:maxAuthors\"\n    [linkable]=\"true\"\n  ></authors-table>\n</div>\n<pages *ngIf=\"!isLoading && authors.length\" [count]=\"pageCount\"></pages>\n"
        },
        {
            "name": "AuthorsSectionComponent",
            "id": "component-AuthorsSectionComponent-8e297cecbc99a580697372e704c569b4",
            "file": "src/app/dashboard/core/authors-section/authors-section.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "authors-section",
            "styleUrls": [
                "authors-section.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "authors-section.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "authors",
                    "line": 16,
                    "type": "Author[]"
                },
                {
                    "name": "cardsInRow",
                    "defaultValue": "4",
                    "line": 20
                },
                {
                    "name": "clickable",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "linkable",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "sectionId",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "sectionTitle",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Author>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayAll",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "removeSpaces",
                    "defaultValue": "removeSpaces",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { ANIMATIONS } from 'utils/constants'\nimport { removeSpaces } from 'utils/helpers'\nimport { Author } from 'models/author.model'\n\n@Component({\n  moduleId: module.id,\n  selector: 'authors-section',\n  templateUrl: 'authors-section.component.html',\n  styleUrls: ['authors-section.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class AuthorsSectionComponent implements OnInit {\n  @Input() sectionId: string\n  @Input() sectionTitle: string\n  @Input() authors: Author[]\n\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n  @Input() cardsInRow = 4\n\n  @Output() onClick = new EventEmitter<Author>()\n\n  removeSpaces = removeSpaces\n  displayAll = true\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h4 {\n  margin: 0;\n  display: flex;\n}\n\n.collapse-button {\n  display: flex;\n  align-items: center;\n}\n\n.collapse-button > i {\n  font-size: 28px;\n}",
                    "styleUrl": "authors-section.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" *ngIf=\"!!sectionTitle\" id=\"{{removeSpaces(sectionTitle)}}\">\n  <div class=\"col-md-12\">\n    <h4 class=\"title\">\n      {{sectionTitle}}\n      <a href=\"#{{sectionId}}\" class=\"collapse-button\" data-toggle=\"collapse\" (click)=\"displayAll = !displayAll\">\n        <i [ngClass]=\"{'pe-7s-angle-down': !displayAll, 'pe-7s-angle-up': displayAll}\"></i>\n      </a>\n    </h4>\n    <hr *ngIf=\"sectionTitle\">\n  </div>\n</div>\n\n<div class=\"row\" class=\"collapsable in\" id=\"{{sectionId}}\">\n  <grid [items]=\"authors\" [itemsInRow]=\"cardsInRow\">\n    <ng-template let-author>\n      <author-card\n        [author]=\"author\"\n        [clickable]=\"clickable\"\n        [linkable]=\"linkable\"\n        (onClick)=\"onClick.emit($event)\"\n      ></author-card>\n    </ng-template>\n  </grid>\n</div>"
        },
        {
            "name": "AuthorsTableComponent",
            "id": "component-AuthorsTableComponent-785f8c7b91bdc8d512d6824bbe208edb",
            "file": "src/app/dashboard/core/authors-table/authors-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "authors-table",
            "styleUrls": [
                "./authors-table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "authors-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "authors",
                    "line": 14,
                    "type": "Author[]"
                },
                {
                    "name": "clickable",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "linkable",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "sectionTitle",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Author>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { ANIMATIONS } from 'utils/constants'\nimport { Author } from 'models/author.model'\n\n@Component({\n  moduleId: module.id,\n  selector: 'authors-table',\n  templateUrl: 'authors-table.component.html',\n  styleUrls: ['./authors-table.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class AuthorsTableComponent implements OnInit {\n  @Input() sectionTitle: string\n  @Input() authors: Author[]\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n\n  @Output() onClick = new EventEmitter<Author>()\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\n  margin: 0;\n}\n\nimg {\n  height: 160px;\n  width: auto;\n}\n\n.row-clickable:hover {\n  cursor: pointer;\n  background: #ecfdef;\n}\n",
                    "styleUrl": "./authors-table.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" *ngIf=\"authors.length\">\n  <div class=\"col-md-12\">\n    <div class=\"card\">\n      <div class=\"content table-responsive table-full-width\">\n        <table class=\"table\">\n          \n          <tbody>\n            <tr\n              *ngFor=\"let author of authors\"\n              [ngClass]=\"{'row-clickable': clickable}\"\n              (click)=\"onClick.emit(author)\"\n            >\n              <!-- Image -->\n              <td class=\"col-md-1\">\n                <a\n                  *ngIf=\"linkable\"\n                  href=\"javascript:void(0);\"\n                  routerLink=\"/dashboard/authors/{{ author.id }}\"\n                >\n                  <img\n                    [src]=\"\n                      author.imageLarge\n                        ? author.imageLarge\n                        : author.imageSmall\n                        ? author.imageSmall\n                        : '/assets/img/no-book-cover.png'\n                    \"\n                    alt=\"Author picture\"\n                  />\n                </a>\n                <img\n                  *ngIf=\"!linkable\"\n                  [src]=\"\n                    author.imageLarge\n                      ? author.imageLarge\n                      : author.imageSmall\n                      ? author.imageSmall\n                      : '/assets/img/no-book-cover.png'\n                  \"\n                  alt=\"Author picture\"\n                />\n              </td>\n              <!-- Name -->\n              <td class=\"col\">\n                <a *ngIf=\"linkable\" href=\"#\" routerLink=\"{{author.id}}\">{{author.name}}</a>\n                {{linkable ? '' : author.name}}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "BookButtonsComponent",
            "id": "component-BookButtonsComponent-649ffc9c9275531f980833626713b76b",
            "file": "src/app/dashboard/core/book-buttons/book-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "book-buttons",
            "styleUrls": [
                "./book-buttons.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "book-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "favorite",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "owned",
                    "defaultValue": "false",
                    "line": 10
                },
                {
                    "name": "read",
                    "defaultValue": "false",
                    "line": 11
                },
                {
                    "name": "wishlist",
                    "defaultValue": "false",
                    "line": 13
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getValues",
                    "args": [],
                    "optional": false,
                    "returnType": "{ owned: boolean; read: boolean; favorite: boolean; wishlist: boolean; }",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'book-buttons',\n  templateUrl: 'book-buttons.component.html',\n  styleUrls: ['./book-buttons.component.css'],\n})\nexport class BookButtonsComponent implements OnInit {\n  @Input() owned = false\n  @Input() read = false\n  @Input() favorite = false\n  @Input() wishlist = false\n\n  ngOnInit() {}\n\n  getValues() {\n    return {\n      owned: this.owned,\n      read: this.read,\n      favorite: this.favorite,\n      wishlist: this.wishlist,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./book-buttons.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<label>Favorites</label><br>\n<div class=\"btn-group\" role=\"group\">\n  <button type=\"button\"\n    (click) = \"owned = !owned\"\n    class=\"btn btn-default\" [ngClass]=\"{'active': owned}\"\n    tooltip=\"Owned\"\n    [isDisabled]=\"false\"\n    [tooltipAnimation]=\"true\"\n    placement=\"bottom\">\n    <i class=\"pe-7s-check\" style=\"font-size: 1.3em;\"></i>\n  </button>\n  <button type=\"button\"\n    (click) = \"wishlist = !wishlist\"\n    class=\"btn btn-default\" [ngClass]=\"{'active': wishlist}\"\n    tooltip=\"Wishlist\"\n    [isDisabled]=\"false\"\n    [tooltipAnimation]=\"true\"\n    placement=\"bottom\">\n    <i class=\"pe-7s-gift\" style=\"font-size: 1.3em;\"></i>\n  </button>\n  <button type=\"button\"\n    (click) = \"read = !read\"\n    class=\"btn btn-default\" [ngClass]=\"{'active': read}\"\n    tooltip=\"Read\"\n    [isDisabled]=\"false\"\n    [tooltipAnimation]=\"true\"\n    placement=\"bottom\">\n    <i class=\"pe-7s-glasses\" style=\"font-size: 1.3em;\"></i>\n  </button>\n  <button type=\"button\"\n    (click) = \"favorite = !favorite\"\n    class=\"btn btn-default\" [ngClass]=\"{'active': favorite}\"\n    tooltip=\"Favorite\"\n    [isDisabled]=\"false\"\n    [tooltipAnimation]=\"true\"\n    placement=\"bottom\">\n    <i class=\"pe-7s-like\" style=\"font-size: 1.3em;\"></i>\n  </button>\n</div>"
        },
        {
            "name": "BookCardComponent",
            "id": "component-BookCardComponent-927fe503dd31310d00fe297ed0882bac",
            "file": "src/app/dashboard/core/book-card/book-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "book-card",
            "styleUrls": [
                "./book-card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./book-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "book",
                    "line": 15,
                    "type": "Book"
                },
                {
                    "name": "clickable",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "linkable",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "selectable",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "withButtons",
                    "line": 17,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Book>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedChanged",
                    "defaultValue": "new EventEmitter<Book>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formatDate",
                    "defaultValue": "formatDate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "authorRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "updateFavoriteIcon",
                    "args": [
                        {
                            "name": "values",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { Book } from 'models/book.model'\nimport { formatDate } from 'utils/helpers'\nimport { ANIMATIONS } from 'utils/constants'\nimport { LibraryService } from 'services/library.service'\nimport { Router, ActivatedRoute } from '@angular/router'\n\n@Component({\n  selector: 'book-card',\n  templateUrl: './book-card.component.html',\n  styleUrls: ['./book-card.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class BookCardComponent implements OnInit {\n  @Input() book: Book\n\n  @Input() withButtons: boolean\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n  @Input() selectable: boolean\n\n  @Output() selectedChanged = new EventEmitter<Book>()\n  @Output() onClick = new EventEmitter<Book>()\n\n  formatDate = formatDate\n\n  constructor(\n    private libraryService: LibraryService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {}\n\n  authorRoute() {\n    return this.book.goodreadsAuthorId\n      ? this.router.navigate(\n          [`/dashboard/authors/${this.book.goodreadsAuthorId}`],\n          { relativeTo: this.route }\n        )\n      : this.router.navigate(['/dashboard/authors/find'], {\n          relativeTo: this.route,\n          queryParams: { name: this.book.author },\n        })\n  }\n\n  select() {\n    if (!(this.selectable || this.clickable)) {\n      return\n    }\n    this.book.isSelected = !this.book.isSelected\n    this.selectedChanged.emit(this.book)\n  }\n\n  updateFavoriteIcon(values: {}) {\n    this.libraryService.updateBook({ ...this.book, ...values }, false)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div > img.tile-icon {\n  -webkit-transform: translate(-15%, -15%);\n}\n\ni.tile-icon {\n  font-size: 1.4em;\n  height: auto;\n  cursor: pointer;\n}\n\ni.owned {\n  color: green;\n}\n\ni.wishlist {\n  color: royalblue;\n}\n\ni.read {\n  color: orangered;\n}\n\ni.favorite {\n  color: violet;\n}\n\ni.inactive {\n  color: #c9c9c9;\n}\n\nhr {\n  margin: 5px 0;\n}\n\n.card {\n  margin-bottom: 30px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.card-selected {\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(24, 181, 24, 1);\n  background: #ecfdef;\n}\n\n.card-not-selectable {\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(101, 105, 24, 1);\n  background: #fdf4ec;\n}\n\n.card-clickable:hover {\n  background: #ecfdef;\n  cursor: pointer;\n}\n\n@media only screen and (min-width: 991px) {\n  .card {\n    height: 35vw;\n  }\n\n  .card-selectable {\n    cursor: pointer;\n  }\n\n  .no-buttons {\n    height: 30vw;\n  }\n}\n\n.title {\n  font-size: 1.2em;\n}\n\n.select-icon {\n  font-size: 20px;\n}\n\n.ti-control-stop {\n  font-size: 25px;\n  margin-top: -2px;\n  margin-left: -3px;\n  margin-bottom: -4px;\n}\n\n.ti-check-box {\n  color: #18b518;\n}\n\n.tile-date {\n  background-color: #eaeaea;\n  font-size: 0.8em;\n  border-radius: 0 0 4px 4px;\n}\n\n.image {\n  display: flex;\n  flex: 1;\n  height: auto;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.image-link {\n  flex: 1;\n}\n\n.image-src {\n  border-radius: 4px;\n}\n\n.icons {\n  padding: 10px 0 0 0;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  flex: 1;\n  height: 100%;\n  overflow: hidden;\n}\n\n.text-ellipsis {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.text-ellipsis:hover {\n  white-space: normal;\n}\n",
                    "styleUrl": "./book-card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"card\"\n  (click)=\"clickable ? onClick.emit(book) : select()\"\n  [ngClass]=\"{\n    'card-clickable': clickable,\n    'card-selectable': selectable && book.canBeSelected,\n    'card-selected': (selectable || clickable) && book.isSelected,\n    'card-not-selectable': selectable && !book.canBeSelected,\n    'no-buttons': !withButtons || selectable || clickable\n  }\"\n>\n  <div class=\"header\">\n    <!-- Header -->\n    <div class=\"row\">\n      <h4\n        class=\"title col-md-8 col-md-offset-2 text-ellipsis\"\n        [ngClass]=\"{\n          'col-md-8 col-md-offset-2': selectable && book.canBeSelected,\n          'col-md-12': !(selectable && book.canBeSelected)\n        }\"\n      >\n        <a\n          *ngIf=\"linkable\"\n          class=\"text-ellipsis\"\n          href=\"#\"\n          routerLink=\"/dashboard/books/{{ book.id }}\"\n        >\n          {{ book.title }}\n        </a>\n        {{ linkable ? '' : book.title }}\n      </h4>\n      <i class=\"col-md-2 select-icon\" *ngIf=\"selectable && book.canBeSelected\" [ngClass]=\"{\n        'ti-check-box': book.isSelected,\n        'ti-control-stop': !book.isSelected\n      }\"></i>\n    </div>\n    <hr>\n    <p class=\"category\" placement=\"bottom\">\n      <a *ngIf=\"linkable\" href=\"javascript:void(0);\" (click)=\"authorRoute()\">{{\n        book.author\n      }}</a>\n      {{ linkable ? '' : book.author }}\n    </p>\n  </div>\n\n  <div class=\"content\">\n    <!-- Image -->\n    <div class=\"image\">\n      <a\n        *ngIf=\"linkable\"\n        href=\"javascript:void(0);\"\n        routerLink=\"/dashboard/books/{{ book.id }}\"\n        class=\"image-link\"\n      >\n        <img\n          class=\"image-src\"\n          [src]=\"\n            book.imageLarge\n              ? book.imageLarge\n              : book.imageSmall\n              ? book.imageSmall\n              : '/assets/img/no-book-cover.png'\n          \"\n          alt=\"Book cover\"\n        />\n      </a>\n      <img\n        class=\"image-src\"\n        *ngIf=\"!linkable\"\n        [src]=\"\n          book.imageLarge\n            ? book.imageLarge\n            : book.imageSmall\n            ? book.imageSmall\n            : '/assets/img/no-book-cover.png'\n        \"\n        alt=\"Book cover\"\n      />\n    </div>\n\n    <!-- Icons -->\n    <div class=\"row icons\" *ngIf=\"withButtons && !selectable && !clickable\">\n      <div class=\"col-xs-3\">\n        <i\n          class=\"pe-7s-check tile-icon\"\n          (click)=\"updateFavoriteIcon({ owned: !book.owned })\"\n          [ngClass]=\"{ inactive: !book.owned, owned: book.owned }\"\n          tooltip=\"{{ book.owned ? 'Owned' : 'Not owned' }}\"\n          [isDisabled]=\"false\"\n          [tooltipAnimation]=\"true\"\n          placement=\"bottom\"\n        ></i>\n      </div>\n      <div class=\"col-xs-3\">\n          <i\n            class=\"pe-7s-gift tile-icon\"\n            (click)=\"updateFavoriteIcon({ wishlist: !book.wishlist })\"\n            [ngClass]=\"{ inactive: !book.wishlist, wishlist: book.wishlist }\"\n            tooltip=\"{{ book.wishlist ? 'In wishlist' : 'Not in wishlist' }}\"\n            [isDisabled]=\"false\"\n            [tooltipAnimation]=\"true\"\n            placement=\"bottom\"\n          ></i>\n        </div>\n      <div class=\"col-xs-3\">\n        <i\n          class=\"pe-7s-glasses tile-icon\"\n          (click)=\"updateFavoriteIcon({ read: !book.read })\"\n          [ngClass]=\"{ inactive: !book.read, read: book.read }\"\n          tooltip=\"{{ book.read ? 'Read' : 'Not read' }}\"\n          [isDisabled]=\"false\"\n          [tooltipAnimation]=\"true\"\n          placement=\"bottom\"\n        ></i>\n      </div>\n      <div class=\"col-xs-3\">\n        <i\n          class=\"pe-7s-like tile-icon\"\n          (click)=\"updateFavoriteIcon({ favorite: !book.favorite })\"\n          [ngClass]=\"{ inactive: !book.favorite, favorite: book.favorite }\"\n          tooltip=\"{{ book.favorite ? 'Favorite' : 'Not a favorite' }}\"\n          [isDisabled]=\"false\"\n          [tooltipAnimation]=\"true\"\n          placement=\"bottom\"\n        ></i>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BookComponent",
            "id": "component-BookComponent-5648e49d3904bb3d6dcfaa17d33a62fb",
            "file": "src/app/dashboard/books/book/book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "book",
            "styleUrls": [
                "./book.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "book",
                    "defaultValue": "{} as Book",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "libraryService",
                    "type": "LibraryService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "modal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deleteBookModal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "removeSpaces",
                    "defaultValue": "removeSpaces",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "authorRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "deleteBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "findBookOnGoodreads",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core'\nimport { Location } from '@angular/common'\nimport { Book } from 'models/book.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { removeSpaces } from 'utils/helpers'\nimport { LibraryService } from 'services/library.service'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs'\n\n@Component({\n  moduleId: module.id,\n  selector: 'book',\n  templateUrl: 'book.component.html',\n  styleUrls: ['./book.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class BookComponent implements OnInit, OnDestroy {\n  book = {} as Book\n  isLoading = true\n  subscription: Subscription\n\n  removeSpaces = removeSpaces\n\n  @ViewChild('deleteBookModal', { static: false }) modal\n\n  get localUrlPath(): string {\n    const splitUrl = this.router.url.split('/')\n    return splitUrl[splitUrl.length - 1]\n  }\n\n  constructor(\n    public libraryService: LibraryService,\n    private location: Location,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  authorRoute() {\n    return this.book.goodreadsAuthorId\n      ? this.router.navigate(\n          [`/dashboard/authors/${this.book.goodreadsAuthorId}`],\n          { relativeTo: this.route }\n        )\n      : this.router.navigate(['/dashboard/authors/find'], {\n          relativeTo: this.route,\n          queryParams: { name: this.book.author },\n        })\n  }\n\n  ngOnInit() {\n    this.subscription = this.libraryService\n      .findBook(this.localUrlPath)\n      .subscribe(book => {\n        if (book) {\n          this.isLoading = false\n          this.book = book\n        }\n      })\n  }\n\n  deleteBook() {\n    this.libraryService.deleteBook(this.book)\n    this.location.back()\n  }\n\n  findBookOnGoodreads() {\n    this.router.navigate(['dashboard/books/find'], {\n      queryParams: { title: this.book.title, libraryBookId: this.book.id },\n    })\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 16px 0;\n}\n\nh4 {\n  margin: 0;\n}\n\np {\n  color: dimgray;\n}\n\ni.owned {\n  color: green;\n}\n\ni.wishlist {\n  color: royalblue;\n}\n\ni.read {\n  color: orangered;\n}\n\ni.favorite {\n  color: violet;\n}\n\n.book-title {\n  padding: 10px 0;\n  display: flex;\n  justify-content: space-between;\n}\n\n.book-image {\n  display: block;\n  margin: auto;\n  border-radius: 0;\n  height: auto;\n  margin-bottom: 10px;\n}\n\n.unavailable {\n  font-size: 0.9em;\n  font-style: italic;\n  color: #cacaca;\n}\n\n.about-icon {\n  font-size: 1.4em;\n  color: #9a9a9a;\n  text-align: center;\n}\n\n.about-icon-unavailable {\n  color: #cacaca;\n}\n\n.imported-from-gr {\n  font-size: 16px;\n  color: #9a9a9a;\n  text-align: center;\n}\n\n.imported-from-gr > img {\n  height: 20px;\n  padding: 2px;\n}\n\n.gr-button {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-bottom: 4px;\n}\n\n.gr-logo {\n  height: 16px;\n  padding: 0 4px;\n  margin-bottom: 5px;\n}\n\n.button-wrapper {\n  padding-top: 2px;\n  padding-bottom: 2px;\n}\n\n.button-wrapper button {\n  width: 100%;\n}\n",
                    "styleUrl": "./book.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "localUrlPath": {
                    "name": "localUrlPath",
                    "getSignature": {
                        "name": "localUrlPath",
                        "type": "string",
                        "returnType": "string",
                        "line": 26
                    }
                }
            },
            "templateData": "<loading [visible]=\"isLoading\"></loading>\n<page-navigator *ngIf=\"!isLoading\">\n  <div class=\"card\" [@card]>\n    <div class=\"content\">\n      <div class=\"row\">\n        <div class=\"col-md-4\">\n          <div class=\"image book-image\">\n            <img\n              [src]=\"\n                book.imageLarge\n                  ? book.imageLarge\n                  : book.imageSmall\n                  ? book.imageSmall\n                  : '/assets/img/no-book-cover.png'\n              \"\n              alt=\"Book cover\"\n            />\n          </div>\n        </div>\n        <div class=\"col-md-8\">\n          <div class=\"book-title\">\n            <h4 class=\"\">{{ book.title }}</h4>\n            <button\n              *ngIf=\"!book.goodreadsId\"\n              type=\"button\"\n              class=\"btn btn-default gr-button\"\n              tooltip=\"Find book on Goodreads\"\n              [isDisabled]=\"false\"\n              [tooltipAnimation]=\"true\"\n              placement=\"bottom\"\n              (click)=\"findBookOnGoodreads()\"\n            >\n              <i class=\"pe-7s-search\"></i>\n              <img class=\"gr-logo\" src=\"/assets/img/goodreads.png\" />\n            </button>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <label>Author:</label>\n              <p>\n                <a href=\"javascript:void(0);\" (click)=\"authorRoute()\">\n                  {{ book.author }}\n                </a>\n              </p>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <label>Original title:</label>\n              <p [ngClass]=\"{ unavailable: !book.original }\">\n                {{ book.original ? book.original : 'Not available' }}\n              </p>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12 col-xs-6\">\n              <label>Publisher:</label>\n              <p [ngClass]=\"{ unavailable: !book.publisher }\">\n                {{ book.publisher ? book.publisher : 'Not available' }}\n              </p>\n            </div>\n            <div class=\"col-md-12 col-xs-6\">\n              <label>Language:</label>\n              <p [ngClass]=\"{ unavailable: !book.language }\">\n                {{ book.language ? book.language : 'Not available' }}\n              </p>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-2 col-xs-3\">\n              <label>Year</label>\n              <p [ngClass]=\"{ unavailable: !book.year }\">\n                {{ book.year ? book.year : 'Not available' }}\n              </p>\n            </div>\n            <div class=\"col-md-2 col-xs-3\">\n              <label>Pages</label>\n              <p [ngClass]=\"{ unavailable: !book.pages }\">\n                {{ book.pages ? book.pages : 'Not available' }}\n              </p>\n            </div>\n            <div class=\"col-md-8 col-xs-6\">\n              <label>Rating</label><br />\n              <rating\n                [(ngModel)]=\"book.rating\"\n                [readonly]=\"true\"\n                [titles]=\"['', '', '', '', '']\"\n              ></rating>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <label>Favorites</label>\n            </div>\n            <div class=\"col-xs-3\" style=\"text-align: center\">\n              <i\n                class=\"pe-7s-check about-icon\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.owned,\n                  owned: book.owned\n                }\"\n              ></i>\n              <div\n                class=\"text-muted\"\n                style=\"font-size: 0.8em\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.owned,\n                  owned: book.owned\n                }\"\n              >\n                Owned\n              </div>\n            </div>\n            <div class=\"col-xs-3\" style=\"text-align: center\">\n              <i\n                class=\"pe-7s-gift about-icon\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.wishlist,\n                  wishlist: book.wishlist\n                }\"\n              ></i>\n              <div\n                class=\"text-muted\"\n                style=\"font-size: 0.8em\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.wishlist,\n                  wishlist: book.wishlist\n                }\"\n              >\n                Wishlist\n              </div>\n            </div>\n            <div class=\"col-xs-3\" style=\"text-align: center\">\n              <i\n                class=\"pe-7s-glasses about-icon\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.read,\n                  read: book.read\n                }\"\n              ></i>\n              <div\n                class=\"text-muted\"\n                style=\"font-size: 0.8em\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.read,\n                  read: book.read\n                }\"\n              >\n                Read\n              </div>\n            </div>\n            <div class=\"col-xs-3\" style=\"text-align: center\">\n              <i\n                class=\"pe-7s-like about-icon\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.favorite,\n                  favorite: book.favorite\n                }\"\n              ></i>\n              <div\n                class=\"text-muted\"\n                style=\"font-size: 0.8em\"\n                [ngClass]=\"{\n                  'about-icon-unavailable': !book.favorite,\n                  favorite: book.favorite\n                }\"\n              >\n                Favorite\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <label>Collections</label>\n              <div>\n                <p\n                  *ngIf=\"!book.collections\"\n                  [ngClass]=\"{ unavailable: !book.collections }\"\n                >\n                  No collections\n                </p>\n                <ng-container\n                  *ngFor=\"\n                    let collection of book.collections;\n                    let lastItem = last\n                  \"\n                >\n                  <i class=\"pe-7s-albums\"></i>\n                  <a\n                    href=\"javascript:void(0);\"\n                    routerLink=\"/dashboard/collections\"\n                    [fragment]=\"removeSpaces(collection)\"\n                  >\n                    {{ collection }}</a\n                  >\n                  {{ lastItem ? '' : ', ' }}\n                </ng-container>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <label>Genres</label>\n              <div>\n                <p\n                  *ngIf=\"!book.genres\"\n                  [ngClass]=\"{ unavailable: !book.genres }\"\n                >\n                  No genres\n                </p>\n                <ng-container\n                  *ngFor=\"let genre of book.genres; let lastItem = last\"\n                >\n                  <i class=\"pe-7s-folder\"></i>\n                  <a\n                    href=\"javascript:void(0);\"\n                    routerLink=\"/dashboard/books\"\n                    [queryParams]=\"{ grouping: 'genre' }\"\n                    [fragment]=\"removeSpaces(genre)\"\n                    queryParamsHandling=\"merge\"\n                  >\n                    {{ genre }}</a\n                  >\n                  {{ lastItem ? '' : ', ' }}\n                </ng-container>\n              </div>\n            </div>\n          </div>\n          <!-- Notes -->\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <label>Notes</label>\n              <p [ngClass]=\"{ unavailable: !book.notes }\">\n                {{ book.notes ? book.notes : 'No notes available' }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- Goodreads -->\n      <div *ngIf=\"book.goodreadsId\" class=\"row\">\n        <div class=\"col-md-12 imported-from-gr\">\n          <hr />\n          This book was imported from <img src=\"/assets/img/goodreads.png\" />©\n          <hr />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-md-6 button-wrapper\">\n          <button\n            type=\"button\"\n            class=\"btn btn-danger\"\n            (click)=\"this.modal.openModal()\"\n          >\n            <i class=\"pe-7s-trash\"></i>\n            Delete\n          </button>\n        </div>\n        <div class=\"col-xs-12 col-md-6 button-wrapper\">\n          <button type=\"button\" class=\"btn btn-default\" routerLink=\"./edit\">\n            <i class=\"pe-7s-note\"></i>\n            Edit\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</page-navigator>\n\n<modal\n  #deleteBookModal\n  title=\"Are you sure you want to delete {{ book.title }}?\"\n  content=\"This book will be removed permanently from your library.\"\n  cancel=\"Cancel\"\n  accept=\"Accept\"\n  [onAccept]=\"deleteBook.bind(this)\"\n></modal>\n"
        },
        {
            "name": "BooksComponent",
            "id": "component-BooksComponent-0d01cbf30349c8e8e453fa7e262700b4",
            "file": "src/app/dashboard/books/books.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "books-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "books.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'books-cmp',\n  templateUrl: 'books.component.html',\n  styleUrls: [],\n})\nexport class BooksComponent implements OnInit {\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-content\">\n  <div class=\"container-fluid\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "BooksDisplayComponent",
            "id": "component-BooksDisplayComponent-5bf081360aead883bfc52bc2ef7983d0",
            "file": "src/app/dashboard/core/books-display/books-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "books-display",
            "styleUrls": [
                "books-display.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "books-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bookCardsInRow",
                    "defaultValue": "4",
                    "line": 25
                },
                {
                    "name": "books",
                    "line": 19,
                    "type": "Book[]"
                },
                {
                    "name": "clickable",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "displayBooksInLibraryInfo",
                    "defaultValue": "false",
                    "line": 28
                },
                {
                    "name": "displayOnlySelectedBtn",
                    "defaultValue": "false",
                    "line": 29
                },
                {
                    "name": "fullSearchBar",
                    "defaultValue": "false",
                    "line": 27
                },
                {
                    "name": "linkable",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "maxBooks",
                    "line": 26
                },
                {
                    "name": "selectable",
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "tableDisplayItems",
                    "defaultValue": "DEFAULT_TABLE_ITEMS",
                    "line": 31
                },
                {
                    "name": "tilesDisplay",
                    "defaultValue": "true",
                    "line": 32
                },
                {
                    "name": "withButtons",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Book>()",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedBooks",
                    "defaultValue": "new EventEmitter<Book[]>()",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayAll",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "immutableMaxBooks",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "onlySelected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "pageCount",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "removeSpaces",
                    "defaultValue": "removeSpaces",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "searchInput",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "searchValue",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "selectedAll",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "toggleTilesDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { Book } from 'models/book.model'\nimport { removeSpaces } from 'utils/helpers'\nimport {\n  MAX_BOOKS_DISPLAY,\n  DEFAULT_TABLE_ITEMS,\n  MAX_BOOKS_DISPLAY_LIST,\n} from 'utils/constants'\nimport { FormControl } from '@angular/forms'\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators'\n\n@Component({\n  moduleId: module.id,\n  selector: 'books-display',\n  templateUrl: 'books-display.component.html',\n  styleUrls: ['books-display.component.css'],\n})\nexport class BooksDisplayComponent implements OnInit {\n  @Input() books: Book[]\n\n  @Input() withButtons: boolean\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n  @Input() selectable: boolean\n  @Input() bookCardsInRow = 4\n  @Input() maxBooks\n  @Input() fullSearchBar = false\n  @Input() displayBooksInLibraryInfo = false\n  @Input() displayOnlySelectedBtn = false\n\n  @Input() tableDisplayItems = DEFAULT_TABLE_ITEMS\n  @Input() tilesDisplay = true\n\n  @Output() selectedBooks = new EventEmitter<Book[]>()\n  @Output() onClick = new EventEmitter<Book>()\n\n  searchInput = new FormControl()\n  displayAll = false\n  selectedAll = false\n  onlySelected = false\n  page = 1\n  pageCount = 1\n  immutableMaxBooks = false\n  searchValue\n  removeSpaces = removeSpaces\n\n  ngOnInit() {\n    if (this.maxBooks) {\n      this.immutableMaxBooks = true\n    } else {\n      this.maxBooks = MAX_BOOKS_DISPLAY\n    }\n\n    this.pageCount = Math.ceil(this.books.length / this.maxBooks)\n    this.searchInput.valueChanges\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe(value => (this.searchValue = value))\n  }\n\n  selectAll() {\n    this.selectedAll = !this.selectedAll\n    this.books.forEach(book => (book.isSelected = this.selectedAll))\n    this.selectedBooks.emit(this.books.filter(book => book.isSelected))\n  }\n\n  toggleTilesDisplay() {\n    this.tilesDisplay = !this.tilesDisplay\n    if (!this.immutableMaxBooks) {\n      this.maxBooks = this.tilesDisplay\n        ? MAX_BOOKS_DISPLAY\n        : MAX_BOOKS_DISPLAY_LIST\n      this.pageCount = Math.ceil(this.books.length / this.maxBooks)\n      if (this.page > this.pageCount) {\n        this.page = this.pageCount\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons {\n  margin-bottom: 8px;\n}\n\n.btn-margin {\n  margin: 0 8px 0 0;\n}\n\n.full-search-bar {\n  width: 100%;\n  margin: 0;\n}\n\n.not-selectable {\n  color: #9A9A9A;\n}\n\n.ti-info-alt {\n  background: #fdf4ec;\n  color: rgba(101, 105, 24, 1);\n  border-radius: 6px;\n}\n",
                    "styleUrl": "books-display.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display: grid\">\n  <!-- Buttons -->\n  <div *ngIf=\"books && books.length > 0\" class=\"row buttons\">\n    <div class=\"col-md-12\" style=\"display: flex;\">\n      <button type=\"button\" class=\"btn btn-default btn-margin\" (click)=\"toggleTilesDisplay()\">\n        <i [ngClass]=\"{'ti-view-list': tilesDisplay, 'ti-layout-grid2': !tilesDisplay}\"></i>\n        {{tilesDisplay ? 'Table' : 'Tiles'}}\n      </button>\n      <button\n        *ngIf=\"selectable\"\n        type=\"button\"\n        class=\"btn btn-margin\"\n        [ngClass]=\"{'btn-success': !selectedAll, 'btn-danger': selectedAll}\"\n        (click)=\"selectAll()\"\n      >\n        {{selectedAll ? 'Deselect all' : 'Select all'}}\n      </button>\n      <button\n        *ngIf=\"displayOnlySelectedBtn\"\n        type=\"button\"\n        class=\"btn btn-margin\"\n        [ngClass]=\"{'btn-success': !onlySelected, 'btn-danger': onlySelected}\"\n        (click)=\"onlySelected = !onlySelected\"\n      >\n        {{onlySelected ? 'All books' : 'Only books in collection'}}\n      </button>\n      <div class=\"input-group btn-margin\" [ngClass]=\"{'full-search-bar': fullSearchBar}\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"Search\" [formControl]=\"searchInput\">\n        <span class=\"input-group-addon\" id=\"sizing-addon2\">\n          <i class=\"pe-7s-search search-icon\"></i>\n        </span>\n      </div>\n    </div>\n  </div>\n  <!-- Tiles -->\n  <ng-container *ngIf=\"tilesDisplay\">\n    <books-section\n      [books]=\"books | bookFilter: (onlySelected ? 'isSelected' : null) | searchFilter: searchValue:['title', 'author', 'original'] | page: page:maxBooks\"\n      [cardsInRow]=\"bookCardsInRow\"\n      [withButtons]=\"withButtons\"\n      [clickable]=\"clickable\"\n      [selectable]=\"selectable\"\n      [linkable]=\"linkable\"\n      (selectedBooks)=\"selectedBooks.emit($event)\"\n      (onClick)=\"onClick.emit($event)\"\n    ></books-section>\n  </ng-container>\n  <!-- Table -->\n  <ng-container *ngIf=\"!tilesDisplay && books && books.length > 0\">\n    <table-items [items]=\"tableDisplayItems\" (displayItems)=\"tableDisplayItems=$event\"></table-items>\n    <books-table\n      [displayItems]=\"tableDisplayItems\"\n      [books]=\"books | bookFilter: (onlySelected ? 'isSelected' : null) | searchFilter: searchValue:['title', 'author', 'original'] | page:page:maxBooks\"\n      [withButtons]=\"withButtons\"\n      [clickable]=\"clickable\"\n      [selectable]=\"selectable\"\n      [linkable]=\"linkable\"\n      (selectedBooks)=\"selectedBooks.emit($event)\"\n      (onClick)=\"onClick.emit($event)\"\n    ></books-table>\n  </ng-container>\n  <!-- Can't be selected info -->\n  <div *ngIf=\"displayBooksInLibraryInfo\" class=\"row\">\n    <div class=\"col-md-12 not-selectable\">\n      <div class=\"col-md-12\">\n        <i class=\"ti-info-alt\"></i>\n        These books are already in your library\n      </div>\n    </div>\n  </div>\n  <!-- Pages -->\n  <pages\n    *ngIf=\"books && books.length\"\n    [count]=\"pageCount\"\n    [withRoute]=\"false\"\n    (nextSelectedPage)=\"page = $event\"\n  ></pages>\n</div>\n\n"
        },
        {
            "name": "BooksHomeComponent",
            "id": "component-BooksHomeComponent-62b3cf390b4a5da0860145ded5eb502b",
            "file": "src/app/dashboard/books/books-home/books-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "books-home",
            "styleUrls": [
                "./books-home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "books-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allBooks",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "bookGroupings",
                    "defaultValue": "BOOK_GROUPINGS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "filterMethod",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "filters",
                    "defaultValue": "FILTERS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "groupingMethod",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "MAX_BOOKS",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "MAX_BOOKS_LIST",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "maxBooks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "pageCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "PUSH_GROUPING",
                    "defaultValue": "{\n    genre: 'No genre',\n    language: 'No language',\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "tableDisplayItems",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "tagFilter",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tilesDisplay",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getQueryParams",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Book } from 'models/book.model'\nimport { LibraryService } from 'services/library.service'\nimport { scrollToAnchor } from 'utils/helpers'\nimport {\n  BOOK_GROUPINGS,\n  MAX_BOOKS,\n  MAX_BOOKS_LIST,\n  FILTERS,\n} from 'utils/constants'\nimport { map, mergeMap } from 'rxjs/operators'\n\n@Component({\n  moduleId: module.id,\n  selector: 'books-home',\n  templateUrl: 'books-home.component.html',\n  styleUrls: ['./books-home.component.css'],\n})\nexport class BooksHomeComponent implements OnInit, OnDestroy, AfterViewInit {\n  tilesDisplay = true\n  groupingMethod: string\n  filterMethod: string\n  allBooks: Book[] = []\n  books: Book[] = []\n  subscriptions = []\n  tagFilter: string[]\n  bookGroupings = BOOK_GROUPINGS\n  filters = FILTERS\n  tableDisplayItems = {}\n  isLoading = true\n  tags = []\n  pageCount: number\n  MAX_BOOKS = 0\n  MAX_BOOKS_LIST = 0\n  page: number\n  maxBooks: number\n\n  readonly PUSH_GROUPING = {\n    genre: 'No genre',\n    language: 'No language',\n  }\n\n  constructor(\n    private libraryService: LibraryService,\n    private route: ActivatedRoute\n  ) {\n    this.MAX_BOOKS = MAX_BOOKS\n    this.MAX_BOOKS_LIST = MAX_BOOKS_LIST\n    this.subscriptions.push(\n      this.libraryService.books$.subscribe(books => {\n        this.allBooks = books\n        this.books = books\n        this.isLoading = false\n      })\n    )\n    this.subscriptions.push(\n      this.libraryService.tags$.subscribe(tags => {\n        this.tags = tags\n      })\n    )\n    this.subscriptions.push(\n      this.route.queryParams.subscribe(params => {\n        this.tilesDisplay = !params['view'] || params['view'] === 'tiles'\n        this.groupingMethod = (params['grouping'] || '').split(' ')[0]\n        this.filterMethod = (params['filter'] || '').split(' ')[0]\n        this.page = params['page'] || 1\n      })\n    )\n    this.subscriptions.push(\n      this.route.fragment.subscribe(fragment => {\n        if (!fragment) {\n          return\n        }\n        scrollToAnchor(fragment, 100)\n      })\n    )\n\n    this.subscriptions.push(\n      this.route.queryParams\n        .pipe(\n          mergeMap(params =>\n            this.libraryService.bookCount$.pipe(\n              map(bookCount => {\n                const view = params.view || 'tiles'\n                const max =\n                  view === 'tiles' ? this.MAX_BOOKS : this.MAX_BOOKS_LIST\n                const pageCount = Math.ceil(bookCount / max)\n                return {\n                  maxBooks: max,\n                  pageCount: pageCount === 0 ? 1 : pageCount,\n                }\n              })\n            )\n          )\n        )\n        .subscribe(({ maxBooks, pageCount }) => {\n          this.maxBooks = maxBooks\n          this.pageCount = pageCount\n        })\n    )\n\n    this.groupingMethod = this.getQueryParams('grouping')\n    this.filterMethod = this.getQueryParams('filter')\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    if (this.route.snapshot.fragment) {\n      scrollToAnchor(this.route.snapshot.fragment, 100)\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe())\n  }\n\n  getQueryParams(name: string) {\n    return (this.route.snapshot.queryParamMap.get(name) || '').split(' ')[0]\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".no-books {\n  font-style: italic;\n  margin: 4px 0;\n  padding: 0 15px 10px 15px;\n}",
                    "styleUrl": "./books-home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<library-navbar [groupings]=\"bookGroupings\" [filters]=\"filters\" addButtonContent=\"Add a new book\"></library-navbar>\n<tags-list *ngIf=\"filterMethod === 'tags' && books.length\" [tags]=\"tags\" (selectedTags)=\"tagFilter=$event\"></tags-list>\n<loading [visible]=\"isLoading\"></loading>\n<!-- No books -->\n<no-books *ngIf=\"!isLoading && !books.length\"></no-books>\n<!-- Books -->\n<div *ngIf=\"!isLoading && books.length\" [ngSwitch]=\"tilesDisplay\" style=\"display: grid\">\n  <!-- Tiles -->\n  <ng-container *ngSwitchCase=\"true\">\n    <div *ngIf=\"!(books | page: page:maxBooks | bookFilter: filterMethod:tagFilter).length\">\n      <h5 class=\"text-muted no-books\">\n        No books available for this filter.\n      </h5>\n    </div>\n    <books-section\n      *ngIf=\"!groupingMethod\"\n      [books]=\"books | page: page:maxBooks | bookFilter: filterMethod:tagFilter\"\n      [withButtons]=\"true\"\n      [linkable]=\"true\"\n    ></books-section>\n    <ng-container *ngIf=\"groupingMethod !== 'no grouping' && books.length\">\n      <ng-container *ngFor=\"let item of books | page: page:maxBooks | bookFilter: filterMethod:tagFilter | bookGrouping: groupingMethod | iterable | pushToBottom: PUSH_GROUPING[groupingMethod]\">\n        <books-section\n          [sectionId]=\"item.id\"\n          [sectionTitle]=\"item.key\"\n          [books]=\"item.value\"\n          [withButtons]=\"true\"\n          [linkable]=\"true\"\n        ></books-section>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <!-- Table -->\n  <ng-container *ngSwitchCase=\"false\">\n    <table-items (displayItems)=\"tableDisplayItems=$event\"></table-items>\n    <div *ngIf=\"!(books | page: page:maxBooks | bookFilter: filterMethod:tagFilter).length\">\n      <h5 class=\"text-muted no-books\">\n        No books available for this filter.\n      </h5>\n    </div>\n    <books-table\n      *ngIf=\"!groupingMethod\"\n      [books]=\"books | page: page:maxBooks | bookFilter: filterMethod:tagFilter\"\n      [withButtons]=\"true\"\n      [linkable]=\"true\"\n      [displayItems]=\"tableDisplayItems\"\n    ></books-table>\n    <ng-container *ngFor=\"let item of books | page: page:maxBooks | bookFilter: filterMethod:tagFilter | bookGrouping: groupingMethod | iterable\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h4 class=\"title\">{{item.key}}</h4>\n          <hr>\n        </div>\n        <books-table\n          [books]=\"item.value\"\n          [withButtons]=\"true\"\n          [linkable]=\"true\"\n          [displayItems]=\"tableDisplayItems\"\n        ></books-table>\n      </div>\n    </ng-container>\n  </ng-container>\n  <pages *ngIf=\"!isLoading && books.length\" [count]=\"pageCount\"></pages>\n</div>\n  "
        },
        {
            "name": "BooksSectionComponent",
            "id": "component-BooksSectionComponent-1c56747f9e42eb08fc11ab33daf03f9e",
            "file": "src/app/dashboard/core/books-section/books-section.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "books-section",
            "styleUrls": [
                "books-section.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "books-section.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "books",
                    "line": 17,
                    "type": "Book[]"
                },
                {
                    "name": "cardsInRow",
                    "defaultValue": "4",
                    "line": 23
                },
                {
                    "name": "clickable",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "description",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "linkable",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "sectionId",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "sectionTitle",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "selectable",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "withButtons",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Book>()",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedBooks",
                    "defaultValue": "new EventEmitter<Book[]>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayAll",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "removeSpaces",
                    "defaultValue": "removeSpaces",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "updateSelectedBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { Book } from 'models/book.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { removeSpaces } from 'utils/helpers'\n\n@Component({\n  moduleId: module.id,\n  selector: 'books-section',\n  templateUrl: 'books-section.component.html',\n  styleUrls: ['books-section.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class BooksSectionComponent implements OnInit {\n  @Input() sectionId: string\n  @Input() sectionTitle: string\n  @Input() description: string\n  @Input() books: Book[]\n\n  @Input() withButtons: boolean\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n  @Input() selectable: boolean\n  @Input() cardsInRow = 4\n\n  @Output() selectedBooks = new EventEmitter<Book[]>()\n  @Output() onClick = new EventEmitter<Book>()\n\n  removeSpaces = removeSpaces\n  displayAll = true\n\n  ngOnInit() {}\n\n  updateSelectedBooks() {\n    this.selectedBooks.emit(this.books.filter(book => book.isSelected))\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h4 {\n  margin: 0;\n  display: flex;\n}\n\n.collapse-button {\n  display: flex;\n  align-items: center;\n}\n\n.collapse-button > i {\n  font-size: 28px;\n}",
                    "styleUrl": "books-section.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" *ngIf=\"!!sectionTitle\" id=\"{{removeSpaces(sectionTitle)}}\">\n  <div class=\"col-md-12\">\n    <h4 class=\"title\">\n      {{sectionTitle}}\n      <a href=\"#{{sectionId}}\" class=\"collapse-button\" data-toggle=\"collapse\" (click)=\"displayAll = !displayAll\">\n        <i [ngClass]=\"{'pe-7s-angle-down': !displayAll, 'pe-7s-angle-up': displayAll}\"></i>\n      </a>\n    </h4>\n    <p class=\"text-muted\">{{description}}</p>\n    <hr *ngIf=\"sectionTitle\">\n  </div>\n</div>\n\n<div class=\"row\" class=\"collapsable in\" id=\"{{sectionId}}\">\n  <grid [items]=\"books\" [itemsInRow]=\"cardsInRow\">\n    <ng-template let-book>\n      <book-card\n        [book]=\"book\"\n        [withButtons]=\"withButtons\"\n        [clickable]=\"clickable\"\n        [linkable]=\"linkable\"\n        [selectable]=\"selectable\"\n        (onClick)=\"onClick.emit($event)\"\n        (selectedChanged)=\"updateSelectedBooks()\"\n      ></book-card>\n    </ng-template>\n  </grid>\n</div>"
        },
        {
            "name": "BooksTableComponent",
            "id": "component-BooksTableComponent-fee8fdf78d122181cb708f09d4b494b8",
            "file": "src/app/dashboard/core/books-table/books-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "books-table",
            "styleUrls": [
                "./books-table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "books-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "books",
                    "line": 18,
                    "type": "Book[]"
                },
                {
                    "name": "clickable",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "description",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "displayItems",
                    "defaultValue": "{}",
                    "line": 29
                },
                {
                    "name": "linkable",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "sectionTitle",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "selectable",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "statusCannotBeSelected",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "statusIncluded",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "statusNotIncluded",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "withButtons",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "withDisplayItems",
                    "line": 24,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Book>()",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedBooks",
                    "defaultValue": "new EventEmitter<Book[]>()",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formatDate",
                    "defaultValue": "formatDate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "authorRoute",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "updateFavoriteIcon",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        },
                        {
                            "name": "values",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelectedBooks",
                    "args": [
                        {
                            "name": "selectedBook",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "selectedBook",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { Book } from 'models/book.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { formatDate } from 'utils/helpers'\nimport { LibraryService } from 'services/library.service'\nimport { ActivatedRoute, Router } from '@angular/router'\n\n@Component({\n  moduleId: module.id,\n  selector: 'books-table',\n  templateUrl: 'books-table.component.html',\n  styleUrls: ['./books-table.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class BooksTableComponent implements OnInit {\n  @Input() sectionTitle: string\n  @Input() description: string\n  @Input() books: Book[]\n\n  @Input() withButtons: boolean\n  @Input() clickable: boolean\n  @Input() linkable: boolean\n  @Input() selectable: boolean\n  @Input() withDisplayItems: boolean\n\n  @Input() statusIncluded: string\n  @Input() statusNotIncluded: string\n  @Input() statusCannotBeSelected: string\n  @Input() displayItems = {}\n\n  @Output() selectedBooks = new EventEmitter<Book[]>()\n  @Output() onClick = new EventEmitter<Book>()\n\n  formatDate = formatDate\n\n  constructor(\n    private libraryService: LibraryService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit() {}\n\n  updateSelectedBooks(selectedBook: Book) {\n    selectedBook.isSelected = !selectedBook.isSelected\n    this.selectedBooks.emit(this.books.filter(book => book.isSelected))\n  }\n\n  authorRoute(book: Book) {\n    return book.goodreadsAuthorId\n      ? this.router.navigate([`/dashboard/authors/${book.goodreadsAuthorId}`], {\n          relativeTo: this.route,\n        })\n      : this.router.navigate(['/dashboard/authors/find'], {\n          relativeTo: this.route,\n          queryParams: { name: book.author },\n        })\n  }\n\n  updateFavoriteIcon(book: Book, values: {}) {\n    this.libraryService.updateBook({ ...book, ...values })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "i.tile-icon {\n  font-size: 24px;\n  height: auto;\n  cursor: pointer;\n}\n\ni.owned {\n  color: green;\n}\n\ni.wishlist {\n  color: royalblue;\n}\n\ni.read {\n  color: orangered;\n}\n\ni.favorite {\n  color: violet;\n}\n\ni.inactive {\n  color: #c9c9c9;\n}\n\ntable {\n  margin: 0;\n}\n\nimg {\n  height: 160px;\n  width: auto;\n}\n\n.icons {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.row-selectable {\n  cursor: pointer;\n}\n\n.row-selected {\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(24, 181, 24, 1);\n  background: #ecfdef;\n}\n\n.row-not-selectable {\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(101, 105, 24, 1);\n  background: #fdf4ec;\n}\n\n.row-clickable:hover {\n  background: #ecfdef;\n  cursor: pointer;\n}\n\n.select-icon {\n  font-size: 20px;\n}\n\n.ti-control-stop {\n  /* font-size: 24px; */\n  margin-left: -3px;\n}\n\n.ti-check-box {\n  color: #18b518;\n}\n",
                    "styleUrl": "./books-table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" *ngIf=\"books.length\">\n  <div class=\"col-md-12\">\n    <div class=\"card\">\n      <div class=\"content table-responsive table-full-width\">\n        <table class=\"table\">\n          \n          <thead>\n            <tr>\n              <th *ngIf=\"selectable\" class=\"col-md-1\">Selected</th>\n              <th *ngIf=\"displayItems['Cover']\" class=\"col-md-1\"></th>\n              <th class=\"col\">Title</th>\n              <th *ngIf=\"displayItems['Original title']\" class=\"col-md-2\">Original title</th>\n              <th *ngIf=\"displayItems['Author']\" class=\"col-md-2\">Author</th>\n              <th *ngIf=\"displayItems['Added on']\" class=\"col\">Added on</th>\n              <th *ngIf=\"displayItems['Year']\" class=\"col\">Year</th>\n              <th *ngIf=\"displayItems['Publisher']\" class=\"col\">Publisher</th>\n              <th *ngIf=\"displayItems['Language']\" class=\"col\">Language</th>\n              <th *ngIf=\"displayItems['Pages']\" class=\"col\">Pages</th>\n              <th *ngIf=\"displayItems['Rating']\" class=\"col\">Rating</th>\n              <th *ngIf=\"displayItems['Favorites'] && withButtons\" class=\"col-md-1\"></th>\n            </tr>\n          \n          <tbody>\n            <tr\n              *ngFor=\"let book of books\"\n              (click)=\"clickable ? onClick.emit(book) : updateSelectedBooks(book)\"\n              [ngClass]=\"{\n                'row-clickable': clickable,\n                'row-selectable': selectable && book.canBeSelected,\n                'row-selected': (selectable || clickable) && book.isSelected,\n                'row-not-selectable': selectable && !book.canBeSelected\n              }\"\n            >\n              <!-- Select button -->\n              <td *ngIf=\"selectable\">\n                <i *ngIf=\"book.canBeSelected\" class=\"select-icon\"[ngClass]=\"{\n                  'ti-check-box': book.isSelected,\n                  'ti-control-stop': !book.isSelected\n                }\"></i>\n              </td>\n              <!-- Cover -->\n              <td *ngIf=\"displayItems['Cover']\">\n                <a\n                  *ngIf=\"linkable\"\n                  href=\"javascript:void(0);\"\n                  routerLink=\"/dashboard/books/{{ book.id }}\"\n                >\n                  <img\n                    [src]=\"\n                      book.imageLarge\n                        ? book.imageLarge\n                        : book.imageSmall\n                        ? book.imageSmall\n                        : '/assets/img/no-book-cover.png'\n                    \"\n                    alt=\"Book cover\"\n                  />\n                </a>\n                <img\n                  *ngIf=\"!linkable\"\n                  [src]=\"\n                    book.imageLarge\n                      ? book.imageLarge\n                      : book.imageSmall\n                      ? book.imageSmall\n                      : '/assets/img/no-book-cover.png'\n                  \"\n                  alt=\"Book cover\"\n                />\n              </td>\n              <!-- Title -->\n              <td class=\"col\">\n                <a *ngIf=\"linkable\" href=\"#\" routerLink=\"{{book.id}}\">{{book.title}}</a>\n                {{linkable ? '' : book.title}}\n              </td>\n              <!-- Original title -->\n              <td *ngIf=\"displayItems['Original title']\" class=\"col-md-2\">{{book.original}}</td>\n              <!-- Author -->\n              <td *ngIf=\"displayItems['Author']\" class=\"col-md-2\">\n                <a *ngIf=\"linkable\" href=\"javascript:void(0);\" (click)=\"authorRoute(book)\">{{book.author}}</a>\n                {{linkable ? '' : book.author}}\n              </td>\n              <!-- Date -->\n              <td *ngIf=\"displayItems['Added on']\" class=\"col\">{{formatDate(book.date)}}</td>\n              <!-- Year -->\n              <td *ngIf=\"displayItems['Year']\" class=\"col\">{{book.year}}</td>\n              <!-- Publisher -->\n              <td *ngIf=\"displayItems['Publisher']\" class=\"col\">{{book.publisher}}</td>\n              <!-- Language -->\n              <td *ngIf=\"displayItems['Language']\" class=\"col\">{{book.language}}</td>\n              <!-- Pages -->\n              <td *ngIf=\"displayItems['Pages']\" class=\"col\">{{book.pages}}</td>\n              <!-- Rating -->\n              <td *ngIf=\"displayItems['Rating']\" class=\"col\">{{book.Rating || 0}}</td>\n              <!-- Favorites -->\n              <td *ngIf=\"displayItems['Favorites'] && withButtons\" class=\"col-md-2\">\n                <div class=\"icons\">\n                  <i class=\"pe-7s-check tile-icon\"\n                    (click)=\"updateFavoriteIcon(book, { owned: !book.owned })\"\n                    [ngClass] = \"{'inactive': !book.owned, 'owned': book.owned}\"\n                    tooltip=\"{{book.owned ? 'Owned' : 'Not owned'}}\"\n                    [isDisabled]=\"false\"\n                    [tooltipAnimation]=\"true\"\n                    placement=\"bottom\"></i>\n                  <i class=\"pe-7s-gift tile-icon\"\n                    (click)=\"updateFavoriteIcon(book, { wishlist: !book.wishlist })\"\n                    [ngClass] = \"{'inactive': !book.wishlist, 'wishlist': book.wishlist}\"\n                    tooltip=\"{{book.wishlist ? 'In wishlist' : 'Not in wishlist'}}\"\n                    [isDisabled]=\"false\"\n                    [tooltipAnimation]=\"true\"\n                    placement=\"bottom\"></i>\n                  <i class=\"pe-7s-glasses tile-icon\"\n                    (click)=\"updateFavoriteIcon(book, { read: !book.read })\"\n                    [ngClass] = \"{'inactive': !book.read, 'read': book.read}\"\n                    tooltip=\"{{book.read ? 'Read' : 'Not read'}}\"\n                    [isDisabled]=\"false\"\n                    [tooltipAnimation]=\"true\"\n                    placement=\"bottom\"></i>\n                  <i class=\"pe-7s-like tile-icon\"\n                    (click)=\"updateFavoriteIcon(book, { favorite: !book.favorite })\"\n                    [ngClass] = \"{'inactive': !book.favorite, 'favorite': book.favorite}\"\n                    tooltip=\"{{book.favorite ? 'Favorite' : 'Not a favorite'}}\"\n                    [isDisabled]=\"false\"\n                    [tooltipAnimation]=\"true\"\n                    placement=\"bottom\"></i>\n                </div>\n              </td>\n\n              <!-- <td *ngIf=\"selectable\" class=\"col-xs-3\">\n                <div class=\"text-muted\" style=\"font-style: italic\">\n                  <i style=\"font-size: 0.9em\" [ngClass]=\"{'ti-check': book.isSelected || !book.canBeSelected, 'ti-close': !book.isSelected}\"></i>\n                  {{\n                    book.canBeSelected \n                    ? (book.isSelected ? statusIncluded : statusNotIncluded)\n                    : statusCannotBeSelected\n                  }}\n                </div>\n              </td> -->\n\n              <!-- <td *ngIf=\"selectable\" class=\"col-xs-3\">\n                <button\n                  style=\"text-align: center\"\n                  class=\"btn btn-default\"\n                  type=\"button\"\n                  [disabled]=\"!book.canBeSelected\"\n                  (click)=\"updateSelectedBooks(book)\"\n                >{{book.isSelected ? 'Remove' : 'Add'}}</button>\n              </td> -->\n\n              <!-- <td *ngIf=\"clickable\" class=\"col-xs-3\">\n                <button\n                  style=\"text-align: center\"\n                  class=\"btn btn-default\"\n                  type=\"button\"\n                  (click)=\"updateSelectedBooks(book)\"\n                >Select</button>\n              </td> -->\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "BookTagsComponent",
            "id": "component-BookTagsComponent-4e6e966dd23a95bef7a067021efc3882",
            "file": "src/app/dashboard/core/book-tags/book-tags.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "book-tags",
            "styleUrls": [
                "book-tags.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "book-tags.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconClass",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "items",
                    "line": 22,
                    "type": "string[]"
                },
                {
                    "name": "placeholder",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "suggestions",
                    "defaultValue": "[]",
                    "line": 24,
                    "type": "string[]"
                },
                {
                    "name": "tags",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "getItems",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "hasFocus",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "debouncedHasFocus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "filteredSuggestions",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "searchValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tagInput",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tagInput', {static: false}"
                        }
                    ]
                },
                {
                    "name": "tagInputValue",
                    "defaultValue": "new FormControl()",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "keyupHandle",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "pushItem",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n} from '@angular/core'\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators'\nimport { FormControl } from '@angular/forms'\n\n@Component({\n  moduleId: module.id,\n  selector: 'book-tags',\n  templateUrl: 'book-tags.component.html',\n  styleUrls: ['book-tags.component.css'],\n})\nexport class BookTagsComponent implements OnInit {\n  @Input() title: string\n  @Input() placeholder: string\n  @Input() iconClass: string\n  @Input() items: string[]\n  @Input() tags: boolean\n  @Input() suggestions: string[] = []\n\n  @Output() getItems = new EventEmitter<string[]>()\n  @Output() hasFocus = new EventEmitter<boolean>()\n\n  @ViewChild('tagInput', { static: false }) tagInput\n\n  tagInputValue: FormControl = new FormControl()\n  filteredSuggestions: string[] = []\n  debouncedHasFocus: boolean\n  searchValue: string\n\n  constructor() {}\n\n  ngOnInit() {\n    this.hasFocus\n      .pipe(debounceTime(100))\n      .subscribe(value => (this.debouncedHasFocus = value))\n\n    this.tagInputValue.valueChanges\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe(value => {\n        this.searchValue = value\n        if (!value) {\n          this.filteredSuggestions = []\n        } else {\n          this.filteredSuggestions = this.suggestions.filter(\n            suggestion => !this.items.includes(suggestion)\n          )\n        }\n      })\n\n    this.getItems.subscribe(array => {\n      if (!this.searchValue) {\n        return (this.filteredSuggestions = [])\n      }\n      this.filteredSuggestions = this.suggestions.filter(\n        suggestion => !array.includes(suggestion)\n      )\n    })\n  }\n\n  pushItem(value) {\n    if (value !== '') {\n      this.items.push(value)\n      this.getItems.emit(this.items)\n    }\n  }\n\n  keyupHandle(event, value) {\n    if (event.code === 'Comma' && value) {\n      this.pushItem(value.slice(0, -1))\n      this.tagInput.nativeElement.value = ''\n    }\n  }\n\n  removeItem(index) {\n    this.items.splice(index, 1)\n    this.getItems.emit(this.items)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".values {\n  padding: 5px 0;\n  font-size: 12px;\n}\n\n.value {\n  margin: 0 4px;\n}\n\n.tags {\n  background: #45cce8;\n  border-radius: 4px;\n  margin: 0 2px;\n  padding: 4px;\n  color: #f9f9f9;\n  font-weight: bold;\n  font-size: 12px;\n}\n\n.icon {\n  font-weight: bold;\n}\n\n.close-icon {\n  font-weight: bold;\n  font-size: 10px;\n}\n\n.white {\n  color: #f9f9f9;\n}\n\n.search-results {\n  padding: 0;\n  width: 100%;\n  z-index: 1;\n  max-height: 150px;\n  border-color: #888888;\n  border-radius: 4px;\n  list-style: none;\n  color: rgb(105, 105, 105);\n  border: 1px solid #ccc;\n  border-top: none;\n  /*so things don't jump around*/\n  position: absolute;\n  left: 0;\n  top: calc(50% + 20px);\n  overflow-y: auto;\n  background: #fff;\n}\n\n.result {\n  cursor: pointer;\n  min-height: 40px;\n  text-align: left;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  padding: 6px;\n  color: #333333;\n  font-size: 14px;\n}\n\n.result:hover {\n  background: #f7f7f7;\n}\n\n.btn {\n  height: 0px;\n}\n",
                    "styleUrl": "book-tags.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label>{{ title }}</label>\n<div class=\"input-group\">\n  <input\n    #tagInput\n    type=\"text\"\n    [formControl]=\"tagInputValue\"\n    class=\"form-control\"\n    placeholder=\"{{ placeholder }}\"\n    (keyup)=\"keyupHandle($event, tagInput.value)\"\n    (keydown.enter)=\"pushItem(tagInput.value); tagInput.value = ''\"\n    (focus)=\"hasFocus.emit(true)\"\n    (blur)=\"hasFocus.emit(false)\"\n  />\n  <span class=\"input-group-btn\">\n    <button\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"pushItem(tagInput.value); tagInput.value = ''\"\n    >\n      <i class=\"ti-plus\"></i>\n    </button>\n  </span>\n  <ul\n    *ngIf=\"debouncedHasFocus\"\n    class=\"search-results\"\n    [ngClass]=\"{\n      'no-border': !(filteredSuggestions | searchFilter: searchValue).length\n    }\"\n  >\n    <li\n      *ngFor=\"let suggestion of filteredSuggestions | searchFilter: searchValue\"\n      class=\"result\"\n      (click)=\"pushItem(suggestion)\"\n    >\n      <div class=\"props\">\n        {{ suggestion }}\n      </div>\n    </li>\n  </ul>\n</div>\n<div class=\"values\">\n  <span\n    *ngFor=\"let item of items; let lastItem = last; let i = index\"\n    class=\"value\"\n    [ngClass]=\"{ tags: tags }\"\n  >\n    <i class=\"{{ iconClass }} icon\" *ngIf=\"iconClass\"></i>\n    {{ item }}\n    <a href=\"javascript:void(0);\" (click)=\"removeItem(i)\">\n      <i class=\"ti-close close-icon\" [ngClass]=\"{ white: tags }\"></i>\n    </a>\n  </span>\n</div>\n"
        },
        {
            "name": "CollectionsComponent",
            "id": "component-CollectionsComponent-392ed076bfbf753aed9f6867989a767e",
            "file": "src/app/dashboard/collections/collections.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "collections-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "collections.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'collections-cmp',\n  templateUrl: 'collections.component.html',\n  styleUrls: [],\n})\nexport class CollectionsComponent implements OnInit {\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-content\">\n  <div class=\"container-fluid\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n  "
        },
        {
            "name": "CollectionsHomeComponent",
            "id": "component-CollectionsHomeComponent-98fb626522f61314a0cb3202d36bf3e6",
            "file": "src/app/dashboard/collections/collections-home/collections-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "collections-home",
            "styleUrls": [
                "collections-home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "collections-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "collectionGroupings",
                    "defaultValue": "COLLECTION_GROUPINGS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "collectionPages",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "collections",
                    "defaultValue": "[] as Collection[]",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "displayAll",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "filterMethod",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "filters",
                    "defaultValue": "FILTERS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "groupingMethod",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "maxBooks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "modal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deleteCollectionModal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "pageCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "removeSpaces",
                    "defaultValue": "removeSpaces",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "selectedCollection",
                    "defaultValue": "{} as Collection",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tableDisplayItems",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tagFilter",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tilesDisplay",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "number"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDeleteCollection",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Collection"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Collection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCollection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "getQueryParams",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  OnDestroy,\n  AfterViewInit,\n  ViewChild,\n} from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { Collection } from 'models/collection.model'\nimport { scrollToAnchor, removeSpaces } from 'utils/helpers'\nimport {\n  ANIMATIONS,\n  MAX_BOOKS_COLLECTION,\n  FILTERS,\n  COLLECTION_GROUPINGS,\n} from 'utils/constants'\nimport { LibraryService } from 'services/library.service'\n@Component({\n  moduleId: module.id,\n  selector: 'collections-home',\n  templateUrl: 'collections-home.component.html',\n  styleUrls: ['collections-home.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class CollectionsHomeComponent\n  implements OnInit, OnDestroy, AfterViewInit {\n  groupingMethod: string\n  filterMethod: string\n  bookCount = 0\n  collections = [] as Collection[]\n  selectedCollection = {} as Collection\n  isLoading = true\n  tilesDisplay = true\n  displayAll = {}\n  subscriptions = []\n  tagFilter: string[]\n  collectionGroupings = COLLECTION_GROUPINGS\n  filters = FILTERS\n  tableDisplayItems = {}\n  tags = []\n  maxBooks: number\n  collectionPages: object = {}\n  pageCount: number\n\n  removeSpaces = removeSpaces\n\n  @ViewChild('deleteCollectionModal', { static: false }) modal\n\n  constructor(\n    private libraryService: LibraryService,\n    protected router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.maxBooks = MAX_BOOKS_COLLECTION\n    this.subscriptions.push(\n      this.libraryService.collections$.subscribe(collections => {\n        if (!collections) {\n          return\n        }\n        this.isLoading = false\n        collections.forEach(collection => {\n          this.displayAll[collection.id] = true\n          this.collectionPages[collection.id] = {\n            page: 1,\n            pageCount: Math.ceil(collection.books.length / this.maxBooks),\n          }\n        })\n        this.collections = collections\n      })\n    )\n    this.subscriptions.push(\n      this.libraryService.tags$.subscribe(tags => {\n        this.tags = tags\n      })\n    )\n    this.subscriptions.push(\n      this.libraryService.bookCount$.subscribe(\n        value => (this.bookCount = value)\n      )\n    )\n    this.subscriptions.push(\n      this.route.fragment.subscribe(fragment => {\n        if (!fragment) {\n          return\n        }\n        scrollToAnchor(fragment, 100)\n      })\n    )\n    this.subscriptions.push(\n      this.route.queryParams.subscribe(params => {\n        this.tilesDisplay = !params['view'] || params['view'] === 'tiles'\n        this.groupingMethod = (params['grouping'] || '').split(' ')[0]\n        this.filterMethod = (params['filter'] || '').split(' ')[0]\n      })\n    )\n\n    this.groupingMethod = this.getQueryParams('grouping')\n    this.filterMethod = this.getQueryParams('filter')\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    if (this.route.snapshot.fragment) {\n      scrollToAnchor(this.route.snapshot.fragment, 100)\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe())\n  }\n\n  confirmDeleteCollection(collection: Collection) {\n    this.selectedCollection = collection\n    this.modal.openModal()\n  }\n\n  deleteCollection() {\n    this.libraryService.deleteCollection(this.selectedCollection)\n  }\n\n  getQueryParams(name: string) {\n    return (this.route.snapshot.queryParamMap.get(name) || '').split(' ')[0]\n  }\n\n  changePage(collectionId: number, page: number) {\n    this.collectionPages[collectionId].page = page\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 4px;\n}\n\n.collection-title {\n  margin: 0;\n  display: flex;\n}\n\n.buttons {\n  text-align: right;\n}\n\n.btn-margin {\n  margin: 0 8px 0 0;\n}\n\n.collapse-button {\n  display: flex;\n  align-items: center;\n}\n\n.collapse-button > i {\n  font-size: 28px;\n}\n\n.no-books {\n  font-style: italic;\n  margin: 4px 0;\n  padding: 0 0 10px 0;\n}\n\n.books {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "collections-home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<loading [visible]=\"isLoading\"></loading>\n<library-navbar\n  *ngIf=\"!isLoading\"\n  [groupings]=\"collectionGroupings\"\n  [filters]=\"filters\"\n  addButtonContent=\"Add a new collection\"\n></library-navbar>\n<tags-list\n  *ngIf=\"filterMethod === 'tags'\"\n  [tags]=\"tags\"\n  (selectedTags)=\"tagFilter = $event\"\n></tags-list>\n<!-- No books -->\n<div\n  class=\"card\"\n  style=\"text-align: center;\"\n  [@card]\n  *ngIf=\"!isLoading && !bookCount\"\n>\n  <div class=\"header\">\n    <!-- Header -->\n    <h4 class=\"title\">\n      Oh no, your library is empty :(.\n    </h4>\n    <hr />\n    <p class=\"category\" placement=\"bottom\" style=\"padding-bottom: 10px\">\n      You don't seem to have any books in your library. Why don't you try adding\n      a new book before creating a collection?<br />\n      You can add a new book by visiting the\n      <a routerLink=\"/dashboard/books\"><b>books</b></a> page on the sidebar and\n      clicking on <a routerLink=\"/dashboard/books/new\"><b>add new book</b></a>\n    </p>\n  </div>\n</div>\n<!-- Collections -->\n<ng-container *ngIf=\"collections.length === 0 && !isLoading\">\n  <!-- No collections -->\n  <div class=\"card\" style=\"text-align: center;\" [@card] *ngIf=\"!isLoading\">\n    <div class=\"header\">\n      <!-- Header -->\n      <h4 class=\"title\">\n        You don't have any collections yet.\n      </h4>\n      <hr />\n      <p class=\"category\" placement=\"bottom\" style=\"padding-bottom: 10px\">\n        Do you want to add a new collection? Collections let your organize your\n        books in any way you want!<br />\n        Click the button below to add a new collection :)\n      </p>\n      <button\n        type=\"button\"\n        class=\"btn btn-success library-nav-tile\"\n        routerLink=\"{{ router.url.split('?')[0] }}/new\"\n        style=\"margin: 10px 5px\"\n      >\n        <span class=\"ti-plus\" aria-hidden=\"true\"></span>\n        Add a new collection\n      </button>\n    </div>\n  </div>\n</ng-container>\n<ng-container [ngSwitch]=\"tilesDisplay\">\n  <table-items\n    (displayItems)=\"tableDisplayItems = $event\"\n    *ngSwitchCase=\"false\"\n  ></table-items>\n  <ng-container\n    *ngFor=\"let collection of collections | collectionGrouping: groupingMethod\"\n  >\n    <!-- Separator -->\n    <div class=\"row\" id=\"{{ removeSpaces(collection.title) }}\">\n      <div class=\"col-md-9\">\n        <!-- Title -->\n        <h4 class=\"title collection-title\">\n          {{ collection.title }}\n          <a\n            *ngIf=\"collection.books.length\"\n            href=\"#{{ collection.id }}\"\n            class=\"collapse-button\"\n            data-toggle=\"collapse\"\n            (click)=\"displayAll[collection.id] = !displayAll[collection.id]\"\n          >\n            <i\n              [ngClass]=\"{\n                'pe-7s-angle-down': !displayAll[collection.id],\n                'pe-7s-angle-up': displayAll[collection.id]\n              }\"\n            ></i>\n          </a>\n        </h4>\n      </div>\n      <div class=\"col-md-3 buttons\">\n        <button\n          class=\"btn btn-default btn-margin\"\n          routerLink=\"./{{ collection.id }}/edit\"\n        >\n          <i class=\"pe-7s-note\"></i>\n          Edit\n        </button>\n        <button\n          class=\"btn btn-danger btn-margin\"\n          (click)=\"confirmDeleteCollection(collection)\"\n        >\n          <i class=\"pe-7s-trash\"></i>\n          Delete\n        </button>\n      </div>\n    </div>\n    <hr class=\"library-hr\" />\n    <p class=\"text-muted\">{{ collection.description }}</p>\n\n    <!-- Books -->\n    <div\n      *ngIf=\"collection.books && collection.books.length > 0\"\n      class=\"collapse in books\"\n      id=\"{{ collection.id }}\"\n    >\n      <!-- No books -->\n      <div\n        *ngIf=\"\n          !(\n            collection.books\n            | page: collectionPages[collection.id].page:maxBooks\n            | bookFilter: filterMethod:tagFilter\n          ).length\n        \"\n      >\n        <h5\n          class=\"text-muted\"\n          style=\"font-style: italic; font-size: 0.9em; margin: 4px 0;\"\n        >\n          No books available for this filter.\n        </h5>\n      </div>\n      <books-section\n        *ngSwitchCase=\"true\"\n        [books]=\"\n          collection.books\n            | page: collectionPages[collection.id].page:maxBooks\n            | bookFilter: filterMethod:tagFilter\n        \"\n        [withButtons]=\"true\"\n        [linkable]=\"true\"\n      ></books-section>\n      <books-table\n        *ngSwitchCase=\"false\"\n        [books]=\"\n          collection.books\n            | page: collectionPages[collection.id].page:maxBooks\n            | bookFilter: filterMethod:tagFilter\n        \"\n        [withButtons]=\"true\"\n        [linkable]=\"true\"\n        [displayItems]=\"tableDisplayItems\"\n      ></books-table>\n      <pages\n        [count]=\"collectionPages[collection.id].pageCount\"\n        [withRoute]=\"false\"\n        (nextSelectedPage)=\"changePage(collection.id, $event)\"\n      ></pages>\n    </div>\n    <!-- No books -->\n    <div *ngIf=\"!collection.books || collection.books.length === 0\">\n      <h5 class=\"text-muted no-books\">\n        You currently don't have any books in this collection. Click on the edit\n        button above to add books to it.\n      </h5>\n    </div>\n  </ng-container>\n</ng-container>\n\n<modal\n  #deleteCollectionModal\n  title=\"Are you sure you want to delete {{ selectedCollection.title }}?\"\n  content=\"This collection will be removed permanently from your library. All books related to this collection will be kept.\"\n  cancel=\"Cancel\"\n  accept=\"Accept\"\n  [onAccept]=\"deleteCollection.bind(this)\"\n></modal>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-52513964a62002473b3fac99e4c22bb4",
            "file": "src/app/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { SessionService } from 'services/session.service'\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html'\n})\n\nexport class DashboardComponent implements OnInit {\n\n  constructor(private sessionService: SessionService) { }\n\n  ngOnInit() {\n    this.sessionService.buildSession()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <div class=\"sidebar\" data-color=\"custom-blue\" data-image=\"\">\n    <sidebar-cmp></sidebar-cmp>\n    <div\n      class=\"sidebar-background\"\n      style=\"background-image: url(/assets/img/background-02.jpg)\"\n    ></div>\n  </div>\n  <div class=\"main-panel\">\n    <navbar-cmp></navbar-cmp>\n    <div class=\"content\"><router-outlet></router-outlet></div>\n  </div>\n</div>\n"
        },
        {
            "name": "DashboardHomeComponent",
            "id": "component-DashboardHomeComponent-6d42e7ef8fa2784ce425c03348040ed6",
            "file": "src/app/dashboard/dashboard-home/dashboard-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-home",
            "styleUrls": [
                "./dashboard-home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayWelcomeMessage",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "notify",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { ANIMATIONS } from 'utils/constants'\nimport { SessionService } from 'services/session.service'\nimport { filter } from 'rxjs/operators'\nimport { notify } from 'utils/notifications'\n@Component({\n  selector: 'app-dashboard-home',\n  templateUrl: './dashboard-home.component.html',\n  styleUrls: ['./dashboard-home.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class DashboardHomeComponent implements OnInit {\n  displayWelcomeMessage = false\n\n  constructor(private sessionService: SessionService) {\n    this.sessionService.localUser$\n      .pipe(filter(user => !!user))\n      .subscribe(\n        user => (this.displayWelcomeMessage = user.displayWelcomeMessage)\n      )\n  }\n\n  ngOnInit() {}\n\n  notify() {\n    notify({ title: 'ehy', message: 'message' })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard-home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-content\" [@card]>\n  <div class=\"container-fluid\">\n    <!-- Welcome -->\n    <welcome *ngIf=\"displayWelcomeMessage\"></welcome>\n    <!-- Latest books -->\n    <last-added-books></last-added-books>\n  </div>\n</div>\n"
        },
        {
            "name": "DeleteAccountComponent",
            "id": "component-DeleteAccountComponent-f690d03f3987adafe822a1bb594c62ee",
            "file": "src/app/dashboard/profile/delete-account/delete-account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "delete-account",
            "styleUrls": [
                "./delete-account.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "line": 14,
                    "type": "User"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deleteAccountModal', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmDeleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "deleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewChild } from '@angular/core'\nimport { User } from 'models/user.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { AuthService } from 'services/auth.service'\nimport { SessionService } from 'services/session.service'\n\n@Component({\n  selector: 'delete-account',\n  templateUrl: './delete-account.component.html',\n  styleUrls: ['./delete-account.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class DeleteAccountComponent implements OnInit {\n  @Input() user: User\n\n  @ViewChild('deleteAccountModal', { static: false }) modal\n\n  constructor(\n    private authService: AuthService,\n    private sessionService: SessionService\n  ) {\n    this.user = this.sessionService.localUser\n  }\n\n  ngOnInit() {}\n\n  confirmDeleteAccount() {\n    this.modal.openModal()\n  }\n\n  deleteAccount() {\n    this.authService.deleteAccount()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./delete-account.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\" [@card]>\n  <div class=\"header\">\n    <h4 class=\"title\">\n      Delete account\n    </h4>\n  </div>\n  <div class=\"content\">\n    <div class=\"row\">\n      <div class=\"col-xs-12\">\n        <p class=\"text-center\">\n          This will permanently delete your account and all of your data. This can't be undone.\n        </p>\n        <button type=\"button\" class=\"btn btn-danger\" style=\"width: 100%;\" (click)=\"confirmDeleteAccount()\">\n          Delete account\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<modal\n  #deleteAccountModal\n  title=\"Are you sure you want to delete your account?\"\n  content=\"This will permanently delete your account and all of your data. This can't be undone.\"\n  cancel=\"Cancel\"\n  accept=\"Delete account\"\n  [onAccept]=\"deleteAccount.bind(this)\"\n></modal>"
        },
        {
            "name": "EditBookComponent",
            "id": "component-EditBookComponent-a6b4e4b7ac0cc6db4d24d8ec22c1bf4b",
            "file": "src/app/dashboard/books/edit-book/edit-book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "edit-book",
            "styleUrls": [
                "./edit-book.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "edit-book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_preventSubmit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "allAuthors",
                    "defaultValue": "[]",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "allCollections",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "allGenres",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "allTags",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "authorFocus",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "authorHasFocus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "authorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "book",
                    "defaultValue": "{} as Book",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "buttonsComponent",
                    "type": "BookButtonsComponent",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BookButtonsComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "collections",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "displayDelete",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "fromGoodreads",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "genres",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "goodreadsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "imageUpload",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imageUpload', {static: false}"
                        }
                    ]
                },
                {
                    "name": "loadingBook",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "loadingCollections",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "loadingImage",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "modal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deleteBookModal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "selectedAuthorId",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "title",
                    "defaultValue": "'Edit book'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "trigger",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244
                },
                {
                    "name": "enterKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGenres",
                    "args": [
                        {
                            "name": "genres",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "jsdoctags": [
                        {
                            "name": "genres",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTags",
                    "args": [
                        {
                            "name": "tags",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178
                },
                {
                    "name": "loadBook",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "loadCollections",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "loadGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 196
                },
                {
                    "name": "loadTags",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 186
                },
                {
                    "name": "moveCollection",
                    "args": [
                        {
                            "name": "origin",
                            "type": ""
                        },
                        {
                            "name": "target",
                            "type": ""
                        },
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "selectAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAuthors",
                    "args": [
                        {
                            "name": "authors",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "authors",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBook",
                    "args": [
                        {
                            "name": "book",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCollections",
                    "args": [
                        {
                            "name": "collections",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "collections",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGenres",
                    "args": [
                        {
                            "name": "genres",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "jsdoctags": [
                        {
                            "name": "genres",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTags",
                    "args": [
                        {
                            "name": "tags",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { BookButtonsComponent } from '../../core/book-buttons/book-buttons.component'\nimport { Book } from 'models/book.model'\nimport { Author } from 'models/author.model'\nimport { cleanFormValues } from 'utils/helpers'\nimport { ANIMATIONS } from 'utils/constants'\nimport { LibraryService } from 'services/library.service'\nimport {\n  mergeMap,\n  map,\n  debounceTime,\n  distinctUntilChanged,\n  last,\n} from 'rxjs/operators'\nimport { DatabaseService } from 'services/database.service'\nimport { SessionService } from 'services/session.service'\nimport { combineLatest, Subject } from 'rxjs'\nimport { notify } from 'utils/notifications'\n@Component({\n  moduleId: module.id,\n  selector: 'edit-book',\n  templateUrl: 'edit-book.component.html',\n  styleUrls: ['./edit-book.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class EditBookComponent implements OnInit, OnDestroy {\n  get bookId(): string {\n    const splitUrl = this.router.url.split('/')\n    return splitUrl[splitUrl.length - 2]\n  }\n\n  set preventSubmit(value) {\n    this._preventSubmit = value\n  }\n  form: FormGroup\n  allAuthors: Author[] = []\n  allCollections: string[] = []\n  allTags: string[] = []\n  allGenres: string[] = []\n  collections: string[]\n  genres: string[]\n  tags: string[]\n  selectedLanguage: string\n  book = {} as Book\n  selectedAuthorId = 0\n  title = 'Edit book'\n  fromGoodreads = false\n  subscriptions = []\n  loadingBook = true\n  loadingCollections = true\n  loadingImage = false\n  displayDelete = true\n  goodreadsId: number\n  authorName: string\n  authorHasFocus: boolean\n  authorFocus = new Subject<boolean>()\n  _preventSubmit: boolean\n\n  @ViewChild(BookButtonsComponent, { static: false })\n  buttonsComponent: BookButtonsComponent\n  @ViewChild('imageUpload', { static: false }) imageUpload\n  @ViewChild('deleteBookModal', { static: false }) modal\n\n  trigger\n\n  constructor(\n    private fb: FormBuilder,\n    private sessionService: SessionService,\n    private libraryService: LibraryService,\n    private databaseService: DatabaseService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      title: ['', Validators.required],\n      original: '',\n      author: ['', Validators.required],\n      publisher: '',\n      year: [0, Validators.min(0)],\n      pages: [0, Validators.min(0)],\n      notes: '',\n      imageLarge: '',\n      imageSmall: '',\n      rating: 0,\n    })\n\n    combineLatest(\n      this.loadCollections(),\n      this.loadBook(),\n      this.loadAuthors(),\n      this.loadTags(),\n      this.loadGenres()\n    ).subscribe(([collections, book, authors, tags, genres]) => {\n      this.setCollections(collections)\n      this.setBook(book)\n      this.setAuthors(authors)\n      this.setTags(tags)\n      this.setGenres(genres)\n    })\n\n    this.authorFocus\n      .pipe(debounceTime(10))\n      .subscribe(value => (this.authorHasFocus = value))\n\n    this.form\n      .get('author')\n      .valueChanges.pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe(value => (this.authorName = value))\n  }\n\n  loadCollections() {\n    return this.libraryService.rawCollections$.pipe(\n      mergeMap(collections =>\n        this.libraryService.rawBooks$.pipe(\n          map(books => {\n            const book = books.find(b => b.id === this.bookId)\n            if (!book) {\n              return []\n            }\n            this.loadingCollections = false\n            if (!book.collections) {\n              return collections.map(c => c.title)\n            }\n            return collections\n              .filter(c => !book.collections.includes(c.id))\n              .map(c => c.title)\n          })\n        )\n      )\n    )\n  }\n\n  setCollections(collections) {\n    this.allCollections = collections\n  }\n\n  loadBook() {\n    return this.libraryService.findBook(this.bookId)\n  }\n\n  setBook(book) {\n    if (!book) {\n      return\n    }\n    this.book = book\n    this.loadingBook = false\n    this.collections = this.book.collections || []\n\n    this.form.patchValue({\n      title: this.book.title,\n      original: this.book.original,\n      author: this.book.author,\n      publisher: this.book.publisher,\n      year: this.book.year,\n      pages: this.book.pages,\n      notes: this.book.notes,\n      imageLarge: this.book.imageLarge,\n      imageSmall: this.book.imageSmall,\n      rating: this.book.rating,\n    })\n\n    this.genres = this.book.genres || []\n    this.tags = this.book.tags || []\n    this.selectedLanguage = this.book.language\n      ? this.book.language\n      : 'Select a language'\n    this.authorName = this.book.author\n    this.selectedAuthorId = this.book.goodreadsAuthorId\n  }\n\n  loadAuthors() {\n    return this.libraryService.authors$\n  }\n\n  setAuthors(authors) {\n    this.allAuthors = authors\n  }\n\n  loadTags() {\n    return this.libraryService.tags$\n  }\n\n  setTags(tags) {\n    if (tags) {\n      this.allTags = tags\n    }\n  }\n\n  loadGenres() {\n    return this.libraryService.genres$\n  }\n\n  setGenres(genres) {\n    if (genres) {\n      this.allGenres = genres\n    }\n  }\n\n  selectAuthor(author) {\n    this.authorName = author.name\n    this.selectedAuthorId = author.id\n    this.form.patchValue({ author: author.name })\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe())\n  }\n\n  enterKeyDown(event, formValues) {\n    this._preventSubmit ? event.preventDefault() : this.submit(formValues)\n  }\n\n  submit(formValues) {\n    const newValues = {\n      genres: this.genres,\n      tags: this.tags,\n      collections: this.collections,\n      ...(this.selectedLanguage !== 'Select a language' && {\n        language: this.selectedLanguage,\n      }),\n      ...cleanFormValues(formValues),\n      ...this.buttonsComponent.getValues(),\n      ...(this.selectedAuthorId != null\n        ? { goodreadsAuthorId: this.selectedAuthorId }\n        : {}),\n      ...(this.goodreadsId ? { goodreadsId: this.goodreadsId } : {}),\n    }\n\n    Object.assign(this.book, newValues)\n\n    console.log('Updating book', this.book)\n\n    this.libraryService.updateBook(this.book)\n    this.router.navigate(['../../'], { relativeTo: this.route })\n  }\n\n  deleteBook() {\n    this.libraryService.deleteBook(this.book)\n    this.router.navigate(['/dashboard/books'])\n  }\n\n  uploadImage(event) {\n    this.loadingImage = true\n    this.databaseService\n      .uploadBookCover(\n        this.sessionService.userId,\n        this.book.id,\n        event.target.files[0]\n      )\n      .pipe(last())\n      .subscribe(imagePath => {\n        notify({ message: 'Cover succesfully updated' })\n        this.book.imageLarge = imagePath\n        this.form.patchValue({ imageLarge: imagePath, imageSmall: imagePath })\n        this.loadingImage = false\n      })\n  }\n\n  getGenres(genres: string[]) {\n    this.genres = genres\n  }\n\n  getTags(tags: string[]) {\n    this.tags = tags\n  }\n\n  moveCollection(origin, target, index) {\n    const collection = origin.splice(index, 1)[0]\n    target.push(collection)\n\n    this.allCollections.sort((a, b) => {\n      if (a < b) {\n        return -1\n      }\n      if (a > b) {\n        return 1\n      }\n      return 0\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 16px 0;\n}\n\n.book-image {\n  display: block;\n  margin: auto;\n  width: 300px;\n}\n\n.book-image > img {\n  height: 58px;\n  width: auto;\n}\n\n@media only screen and (max-width: 991px) {\n  .book-image {\n    width: 100%;\n  }\n}\n\n.btn-collections {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.required {\n  color: #9a9a9a;\n}\n\n.collections {\n  padding: 5px 0;\n  font-size: 12px;\n}\n\n.collection {\n  margin: 0 4px;\n}\n\n.icon {\n  font-weight: bold;\n}\n\n.close-icon {\n  font-weight: bold;\n  font-size: 10px;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n}\n\n.imported-from-gr {\n  font-size: 16px;\n  color: #9a9a9a;\n  text-align: center;\n}\n\n.imported-from-gr > img {\n  height: 20px;\n  padding: 2px;\n}\n\n.goodreads-img {\n  height: 16px;\n}\n\n.goodreads-img-disabled {\n  opacity: 0.2;\n}\n\n.search-results {\n  padding: 0;\n  width: 100%;\n  z-index: 1;\n  max-height: 150px;\n  border-color: #888888;\n  border-radius: 4px;\n  list-style: none;\n  color: rgb(105, 105, 105);\n  border: 1px solid #ccc;\n  border-top: none;\n  /*so things don't jump around*/\n  position: absolute;\n  left: 0;\n  top: calc(50% + 20px);\n  overflow-y: auto;\n  background: #fff;\n}\n\n.result {\n  cursor: pointer;\n  min-height: 70px;\n  text-align: left;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  padding: 6px;\n  color: #333333;\n  font-size: 14px;\n}\n\n.result:hover {\n  background: #f7f7f7;\n}\n\n.author-image {\n  width: 10%;\n}\n\n.author-name {\n  padding-left: 6px;\n}\n",
                    "styleUrl": "./edit-book.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "bookId": {
                    "name": "bookId",
                    "getSignature": {
                        "name": "bookId",
                        "type": "string",
                        "returnType": "string",
                        "line": 29
                    }
                },
                "preventSubmit": {
                    "name": "preventSubmit",
                    "setSignature": {
                        "name": "preventSubmit",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<loading [visible]=\"loadingBook || loadingCollections\"></loading>\n<page-navigator *ngIf=\"!(loadingBook || loadingCollections)\">\n  <div class=\"card\" [@card]>\n    <div class=\"header\">\n      <h4 class=\"title\">{{ title }}</h4>\n      <div *ngIf=\"displayDelete\">\n        <button\n          type=\"button\"\n          class=\"btn btn-danger\"\n          style=\"width: 100%\"\n          (click)=\"this.modal.openModal()\"\n        >\n          <i class=\"pe-7s-trash\"></i>\n          Delete\n        </button>\n      </div>\n    </div>\n\n    <div class=\"content\">\n      <form\n        (keydown.enter)=\"enterKeyDown($event, form.value)\"\n        [formGroup]=\"form\"\n      >\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <!-- Image -->\n            <loading-overlay [visible]=\"loadingImage\"></loading-overlay>\n            <img\n              class=\"book-image\"\n              [src]=\"\n                book.imageLarge\n                  ? book.imageLarge\n                  : book.imageSmall\n                  ? book.imageSmall\n                  : '/assets/img/no-book-cover.png'\n              \"\n              alt=\"Book cover\"\n              style=\"cursor: pointer\"\n              (click)=\"imageUpload.click()\"\n            />\n            <input\n              style=\"display: none\"\n              [hidden]=\"true\"\n              #imageUpload\n              type=\"file\"\n              (change)=\"uploadImage($event)\"\n            />\n          </div>\n        </div>\n        <!-- First row -->\n        <div class=\"row\">\n          <!-- Title -->\n          <div class=\"col-xs-12 col-md-6\">\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['title'].valid &&\n                  form.controls['title'].touched\n              }\"\n            >\n              <label>Book Title <span style=\"color: red\">*</span></label>\n              <div style=\"display: flex\">\n                <div style=\"width: 100%\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"Your version title\"\n                    formControlName=\"title\"\n                  />\n                  <span\n                    class=\"help-block\"\n                    *ngIf=\"\n                      !form.controls['title'].valid &&\n                      form.controls['title'].touched\n                    \"\n                  >\n                    Please enter a valid book title.\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Author -->\n          <div\n            [ngClass]=\"{\n              'col-xs-10 col-md-5': selectedAuthorId,\n              'col-xs-12 col-md-6': !selectedAuthorId\n            }\"\n          >\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['author'].valid &&\n                  form.controls['author'].touched\n              }\"\n            >\n              <label>Author <span style=\"color: red\">*</span></label>\n              <div style=\"display: flex; width: 100%; flex-direction: column;\">\n                <div class=\"input-group\" style=\"width: 100%;\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"Author name\"\n                    formControlName=\"author\"\n                    (focus)=\"authorFocus.next(true)\"\n                    (blur)=\"authorFocus.next(false)\"\n                  />\n                  <div\n                    class=\"input-group-addon\"\n                    style=\"border: 1px solid #E3E3E3\"\n                  >\n                    <img\n                      class=\"goodreads-img\"\n                      [ngClass]=\"{\n                        'goodreads-img-disabled': !selectedAuthorId\n                      }\"\n                      src=\"/assets/img/goodreads.png\"\n                      [tooltip]=\"\n                        selectedAuthorId\n                          ? 'Linked to Goodreads'\n                          : 'Not linked to Goodreads'\n                      \"\n                      [tooltipAnimation]=\"true\"\n                      placement=\"bottom\"\n                    />\n                  </div>\n                  <ul\n                    *ngIf=\"authorHasFocus\"\n                    class=\"search-results\"\n                    #searchResults\n                  >\n                    <li\n                      *ngFor=\"\n                        let author of allAuthors\n                          | searchFilter: authorName:['name']\n                      \"\n                      class=\"result\"\n                      (click)=\"selectAuthor(author)\"\n                    >\n                      <img\n                        class=\"author-image\"\n                        (click)=\"selectAuthor(author)\"\n                        *ngIf=\"author.imageSmall || author.imageLarge\"\n                        [src]=\"author.imageSmall || author.imageLarge\"\n                        alt=\"Author\"\n                      />\n                      <div class=\"author-name\">\n                        {{ author.name }}\n                      </div>\n                    </li>\n                    <li\n                      *ngIf=\"\n                        !(allAuthors | searchFilter: authorName:['name']).length\n                      \"\n                      #result\n                      class=\"result\"\n                    >\n                      No results found\n                    </li>\n                  </ul>\n                </div>\n                <span\n                  class=\"help-block\"\n                  *ngIf=\"\n                    !form.controls['author'].valid &&\n                    form.controls['author'].touched\n                  \"\n                >\n                  Please enter a valid author name.\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-xs-2 col-md-1\" *ngIf=\"selectedAuthorId\">\n            <button\n              type=\"button\"\n              (click)=\"selectedAuthorId = 0\"\n              class=\"btn btn-default\"\n              style=\"margin-top: 25px; width: 100%;\"\n              tooltip=\"Remove Goodreads Link\"\n              [tooltipAnimation]=\"true\"\n              placement=\"bottom\"\n            >\n              <i class=\"ti-unlink icon\"></i>\n            </button>\n          </div>\n        </div>\n\n        <!-- Second row -->\n        <div class=\"row\">\n          <!-- Original title -->\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label>Original Title</label>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"Original version title\"\n                formControlName=\"original\"\n              />\n            </div>\n          </div>\n          <!-- Publisher -->\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label>Publisher</label>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"Publisher\"\n                formControlName=\"publisher\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <!-- Third row -->\n        <div class=\"row\">\n          <!-- Year -->\n          <div class=\"col-md-2\">\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['year'].valid && form.controls['year'].touched\n              }\"\n            >\n              <label>Year</label>\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                placeholder=\"Year\"\n                formControlName=\"year\"\n              />\n              <span\n                class=\"help-block\"\n                *ngIf=\"\n                  !form.controls['year'].valid && form.controls['year'].touched\n                \"\n                >Please enter a valid year.</span\n              >\n            </div>\n          </div>\n          <!-- Pages -->\n          <div class=\"col-md-2\">\n            <div\n              class=\"form-group\"\n              [ngClass]=\"{\n                'has-error':\n                  !form.controls['pages'].valid &&\n                  form.controls['pages'].touched\n              }\"\n            >\n              <label>Pages</label>\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                placeholder=\"Pages\"\n                formControlName=\"pages\"\n              />\n              <span\n                class=\"help-block\"\n                *ngIf=\"\n                  !form.controls['pages'].valid &&\n                  form.controls['pages'].touched\n                \"\n                >Please enter a valid number of pages.</span\n              >\n            </div>\n          </div>\n          <!-- Language -->\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <language-selector\n                [selectedLanguage]=\"selectedLanguage\"\n                (select)=\"selectedLanguage = $event\"\n              ></language-selector>\n            </div>\n          </div>\n          <!-- About -->\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <book-buttons\n                [owned]=\"!!book.owned\"\n                [read]=\"!!book.read\"\n                [favorite]=\"!!book.favorite\"\n                [wishlist]=\"!!book.wishlist\"\n              ></book-buttons>\n            </div>\n          </div>\n          <!-- Rating -->\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <label>Rating</label><br />\n              <rating\n                style=\"font-size: 20px\"\n                formControlName=\"rating\"\n                [titles]=\"['', '', '', '', '']\"\n              ></rating>\n            </div>\n          </div>\n        </div>\n\n        <!-- Fourth row -->\n        <div class=\"row\">\n          <!-- Genres -->\n          <div class=\"col-md-4\">\n            <div class=\"form-group\">\n              <!-- Genres -->\n              <book-tags\n                title=\"Genres\"\n                placeholder=\"Add genre...\"\n                iconClass=\"pe-7s-folder\"\n                [items]=\"genres\"\n                [suggestions]=\"allGenres\"\n                (getItems)=\"getGenres($event)\"\n                (hasFocus)=\"preventSubmit = $event\"\n              ></book-tags>\n            </div>\n          </div>\n          <!-- Tags-->\n          <div class=\"col-md-4\">\n            <div class=\"form-group\">\n              <!-- Tags -->\n              <book-tags\n                title=\"Tags\"\n                placeholder=\"Add tags...\"\n                iconClass=\"pe-7s-ticket\"\n                [items]=\"tags\"\n                [suggestions]=\"allTags\"\n                (getItems)=\"getTags($event)\"\n                (hasFocus)=\"preventSubmit = $event\"\n                tags=\"true\"\n              ></book-tags>\n            </div>\n          </div>\n          <!-- Collection -->\n          <div class=\"col-md-4\">\n            <div class=\"form-group\">\n              <label>Collections</label>\n              <div class=\"dropdown\">\n                <button\n                  class=\"btn btn-default dropdown-toggle btn-collections\"\n                  type=\"button\"\n                  data-toggle=\"dropdown\"\n                >\n                  Add book to a collection\n                  <span class=\"caret\"></span>\n                </button>\n                <ul class=\"dropdown-menu\">\n                  <ng-container *ngIf=\"allCollections.length\">\n                    <li\n                      *ngFor=\"let collection of allCollections; let i = index\"\n                    >\n                      <a\n                        href=\"javascript:void(0);\"\n                        (click)=\"moveCollection(allCollections, collections, i)\"\n                      >\n                        {{ collection }}\n                      </a>\n                    </li>\n                  </ng-container>\n                  <li *ngIf=\"!allCollections.length\">\n                    <a><i>No collections</i></a>\n                  </li>\n                </ul>\n              </div>\n              <div class=\"collections\">\n                <span\n                  *ngFor=\"\n                    let collection of collections;\n                    let i = index;\n                    let lastItem = last\n                  \"\n                  class=\"collection\"\n                >\n                  <i class=\"pe-7s-albums icon\"></i>\n                  {{ collection }}\n                  <a\n                    href=\"javascript:void(0);\"\n                    (click)=\"moveCollection(collections, allCollections, i)\"\n                  >\n                    <i class=\"ti-close close-icon\"></i>\n                  </a>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div\n            class=\"col-xs-12 form-group\"\n            [ngClass]=\"{\n              'has-error':\n                !form.controls['imageLarge'].valid &&\n                form.controls['imageLarge'].touched\n            }\"\n          >\n            <label>\n              Book Cover\n              <a\n                href=\"javascript:void(0);\"\n                (click)=\"\n                  this.form.patchValue({ imageLarge: '', imageSmall: '' })\n                \"\n              >\n                <i class=\"pe-7s-close-circle\" style=\"font-size: 100%\"></i>\n              </a>\n            </label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"Link to the book cover\"\n              formControlName=\"imageLarge\"\n            />\n            <span\n              class=\"help-block\"\n              *ngIf=\"\n                !form.controls['imageLarge'].valid &&\n                form.controls['imageLarge'].touched\n              \"\n            >\n              Please enter a valid link to your book cover.\n            </span>\n          </div>\n        </div>\n        <!-- Notes -->\n        <div class=\"row\">\n          <div class=\"col-xs-12 form-group\">\n            <label>Notes</label>\n            <textarea\n              formControlName=\"notes\"\n              rows=\"8\"\n              class=\"form-control\"\n              placeholder=\"Leave notes, thoughts, or a full review of the book here :)\"\n              value=\"\"\n            ></textarea>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-xs-12 required\">\n            <span style=\"color: red\">*</span> Required fields\n          </div>\n        </div>\n        <!-- Goodreads -->\n        <div *ngIf=\"book.goodreadsId\" class=\"row\">\n          <div class=\"col-md-12 imported-from-gr\">\n            <hr />\n            This book was imported from <img src=\"/assets/img/goodreads.png\" />©\n            <hr />\n          </div>\n        </div>\n\n        <!-- Buttons -->\n        <hr *ngIf=\"!book.goodreadsId\" />\n        <div class=\"row\">\n          <div class=\"col-xs-12\">\n            <button\n              type=\"button\"\n              class=\"btn btn-success\"\n              style=\"width: 100%\"\n              (click)=\"submit(form.value)\"\n              [disabled]=\"!form.valid\"\n            >\n              <i class=\"pe-7s-diskette\"></i>\n              Save\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</page-navigator>\n\n<modal\n  *ngIf=\"displayDelete\"\n  #deleteBookModal\n  title=\"Are you sure you want to delete {{ book.title }}?\"\n  content=\"This book will be removed permanently from your library.\"\n  cancel=\"Cancel\"\n  accept=\"Accept\"\n  [onAccept]=\"deleteBook.bind(this)\"\n></modal>\n"
        },
        {
            "name": "EditCollectionComponent",
            "id": "component-EditCollectionComponent-50c5ffa366ff24630b827903eeb92af8",
            "file": "src/app/dashboard/collections/edit-collection/edit-collection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "edit-collection",
            "styleUrls": [
                "./edit-collection.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "edit-collection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "bookSubscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "button",
                    "defaultValue": "'Update collection'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "collection",
                    "defaultValue": "{} as Collection",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "description",
                    "defaultValue": "'Edit collection'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "displayDelete",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "formatDate",
                    "defaultValue": "formatDate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoadingBooks",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "modal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deleteCollectionModal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tableItems",
                    "defaultValue": "{ ...DEFAULT_TABLE_ITEMS, Cover: false }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "defaultValue": "'Edit collection'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCollection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "loadBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "loadCollection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { Location } from '@angular/common'\nimport { Router } from '@angular/router'\nimport { Collection } from 'models/collection.model'\nimport { formatDate } from 'utils/helpers'\nimport { ANIMATIONS, DEFAULT_TABLE_ITEMS } from 'utils/constants'\nimport { LibraryService } from 'services/library.service'\nimport { mergeMap, map } from 'rxjs/operators'\n\n@Component({\n  moduleId: module.id,\n  selector: 'edit-collection',\n  templateUrl: 'edit-collection.component.html',\n  styleUrls: ['./edit-collection.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class EditCollectionComponent implements OnInit, OnDestroy {\n  form: FormGroup\n  collection = {} as Collection\n  title = 'Edit collection'\n  description = 'Edit collection'\n  button = 'Update collection'\n  isLoading = true\n  books = []\n  isLoadingBooks = true\n  displayDelete = true\n  formatDate = formatDate\n  subscription\n  bookSubscription\n  tableItems = { ...DEFAULT_TABLE_ITEMS, Cover: false }\n\n  @ViewChild('deleteCollectionModal', { static: false }) modal\n\n  get collectionId(): string {\n    const splitUrl = this.router.url.split('/')\n    return splitUrl[splitUrl.length - 2]\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private location: Location,\n    private libraryService: LibraryService,\n    private router: Router\n  ) {\n    this.form = this.fb.group({\n      title: ['', Validators.required],\n      description: '',\n    })\n\n    this.loadCollection()\n    this.loadBooks()\n  }\n\n  ngOnInit() {}\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n    if (this.bookSubscription) {\n      this.bookSubscription.unsubscribe()\n    }\n  }\n\n  deleteCollection() {\n    this.libraryService.deleteCollection(this.collection)\n  }\n\n  submit(formValues) {\n    this.collection = {\n      ...this.collection,\n      title: formValues.title,\n      description: formValues.description,\n      books: this.books.filter(book => book.isSelected),\n    }\n\n    this.libraryService.updateCollection(this.collection)\n    this.location.back()\n  }\n\n  loadCollection() {\n    this.subscription = this.libraryService\n      .findCollection(this.collectionId)\n      .subscribe(collection => {\n        if (!collection) {\n          return\n        }\n        this.collection = collection\n        this.isLoading = false\n\n        this.form.patchValue({\n          title: this.collection.title,\n          description: this.collection.description,\n        })\n      })\n  }\n\n  loadBooks() {\n    this.libraryService\n      .findCollection(this.collectionId)\n      .pipe(\n        mergeMap(collection =>\n          this.libraryService.books$.pipe(\n            map(books =>\n              books.map(book => {\n                book.canBeSelected = true\n                book.isSelected =\n                  book.collections &&\n                  collection &&\n                  book.collections.includes(collection.id)\n                return book\n              })\n            )\n          )\n        )\n      )\n      .subscribe(books => {\n        if (!books) {\n          return\n        }\n        this.isLoadingBooks = false\n        this.books = books\n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  display: flex;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./edit-collection.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "collectionId": {
                    "name": "collectionId",
                    "getSignature": {
                        "name": "collectionId",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                }
            },
            "templateData": "<loading [visible]=\"isLoading\"></loading>\n<page-navigator *ngIf=\"!isLoading\">\n  <div class=\"card\" [@card]>\n    <div class=\"header\">\n      <h4 class=\"title\">{{title}}</h4>\n      <div>\n        <button *ngIf=\"displayDelete\" type=\"button\" class=\"btn btn-danger\" style=\"width: 100%\" (click)=\"this.modal.openModal()\">\n          <i class=\"pe-7s-trash\"></i>\n          Delete\n        </button>\n      </div>\n    </div>\n    <div class=\"content\">\n      <form [formGroup]=\"form\" (ngSubmit)=\"submit(form.value)\">\n        <div class=\"row\">\n          <div class=\"col-xs-12\">\n            <!-- Title -->\n            <div class=\"form-group\" [ngClass] = \"{'has-error': !form.controls['title'].valid && form.controls['title'].touched}\">\n              <label>Collection Title <span style=\"color: red\">*</span></label>\n              <input type=\"text\" class=\"form-control\" placeholder=\"Your version title\" formControlName=\"title\">\n              <span class=\"help-block\" *ngIf=\"!form.controls['title'].valid && form.controls['title'].touched\">Please enter a valid title.</span>\n            </div>\n          </div>\n        </div>\n        <!-- Description -->\n        <div class=\"form-group\">\n          <label>Description</label>\n          <textarea formControlName=\"description\" rows=\"3\" class=\"form-control\" placeholder=\"What is this collection about?\" value=\"\"></textarea>\n        </div>\n\n        <!-- Add books -->\n        <loading [visible]=\"isLoading || isLoadingBooks\"></loading>\n        <label>Books</label>\n        <h5 *ngIf=\"!books || !books.length\" class=\"text-muted\" style=\"font-style: italic; font-size: 0.9em; margin: 4px 0;\">\n          You currently don't have any books. Add a book to get started with your library! :)\n        </h5>\n        <books-display\n          *ngIf=\"!isLoadingBooks && !isLoading\"\n          [tilesDisplay]=\"false\"\n          [tableDisplayItems]=\"tableItems\"\n          [books]=\"books\"\n          [selectable]=\"true\"\n          [displayOnlySelectedBtn]=\"true\"\n        ></books-display>\n        <!-- Require -->\n        <div class=\"row\">\n          <div class=\"col-xs-12 required\">\n            <span style=\"color: red\">*</span> Required fields\n          </div>\n        </div>\n\n        <!-- Buttons -->\n\t\t\t\t<hr>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n            <button type=\"button\" class=\"btn btn-default\" style=\"width: 100%\" (click)=\"this.router.navigate(['../../'], { relativeTo: this.route })\">\n              <i class=\"pe-7s-back\"></i>\n              Cancel\n            </button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6\">\n            <button type=\"button\" class=\"btn btn-success\" style=\"width: 100%\" (click)=\"submit(form.value)\" [disabled]=\"!form.valid\">\n              <i class=\"pe-7s-diskette\"></i>\n              Save\n            </button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      </form>\n    </div>\n  </div>\n</page-navigator>\n\n<modal\n  *ngIf=\"collection\"\n  #deleteCollectionModal\n  title=\"Are you sure you want to delete {{collection.title}}?\"\n  content=\"This collection will be removed permanently from your library. All books related to this collection will be kept.\"\n  cancel=\"Cancel\"\n  accept=\"Accept\"\n  [onAccept]=\"deleteCollection && deleteCollection.bind(this)\"\n></modal>"
        },
        {
            "name": "EditUserInfoComponent",
            "id": "component-EditUserInfoComponent-8fe93929e2f65f7bb94127565b881245",
            "file": "src/app/dashboard/profile/edit-user-info/edit-user-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "edit-user-info",
            "styleUrls": [
                "./edit-user-info.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-user-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "croppedImage",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "imageChangedEvent",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isLoadingAvatar",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user",
                    "defaultValue": "{} as User",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "imageChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imageCropped",
                    "args": [
                        {
                            "name": "event",
                            "type": "ImageCroppedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ImageCroppedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "updateEmail",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateName",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePassword",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadAvatar",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadBackground",
                    "args": [
                        {
                            "name": "image",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { ImageCroppedEvent } from 'ngx-image-cropper'\nimport { mergeMap, last } from 'rxjs/operators'\nimport { User } from 'models/user.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { SessionService } from 'services/session.service'\nimport { DatabaseService } from 'services/database.service'\nimport { AuthService } from 'services/auth.service'\nimport { notify } from 'utils/notifications'\nimport { confirmPassword, confirmEmail } from 'utils/validators'\n\n@Component({\n  selector: 'edit-user-info',\n  templateUrl: './edit-user-info.component.html',\n  styleUrls: ['./edit-user-info.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class EditUserInfoComponent implements OnInit {\n  user = {} as User\n  form: FormGroup\n  imageChangedEvent: any\n  croppedImage: any\n  isLoading = false\n  isLoadingAvatar = false\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private sessionService: SessionService,\n    private databaseService: DatabaseService\n  ) {\n    this.user = this.sessionService.localUser\n    this.form = this.fb.group(\n      {\n        name: [this.user.name, Validators.required],\n        email: [this.user.email, [Validators.required, Validators.email]],\n        confirmEmail: ['', [Validators.required, Validators.email]],\n        oldPassword: ['', Validators.required],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', [Validators.required, Validators.minLength(6)]],\n      },\n      { validator: [confirmPassword, confirmEmail] }\n    )\n  }\n\n  ngOnInit() {}\n\n  updateName({ name }: { name: string }) {\n    console.log('Updating user', name)\n\n    this.databaseService\n      .updateUser(this.user.id, { name })\n      .then(() => notify({ message: 'User profile succesfully updated' }))\n      .then(() => this.router.navigate(['/dashboard/profile']))\n  }\n\n  updateEmail({ email, password }: { email: string; password: string }) {\n    console.log('Updating user', email)\n\n    this.authService\n      .updateUserEmail(email, password)\n      .then(() => notify({ message: 'User profile succesfully updated' }))\n      .then(() => this.router.navigate(['/dashboard/profile']))\n  }\n\n  updatePassword({\n    password,\n    oldPassword,\n  }: {\n    password: string\n    oldPassword: string\n  }) {\n    console.log('Updating user', password)\n\n    this.authService\n      .updateUserPassword(oldPassword, password)\n      .then(() => notify({ message: 'User profile succesfully updated' }))\n      .then(() => this.router.navigate(['/dashboard/profile']))\n  }\n\n  imageChanged(event) {\n    this.imageChangedEvent = event\n  }\n\n  imageCropped(event: ImageCroppedEvent) {\n    this.croppedImage = event.file\n  }\n\n  uploadBackground(image) {\n    if (!image) {\n      return\n    }\n    this.isLoading = true\n    this.databaseService\n      .uploadBackgroundImage(this.sessionService.userId, image)\n      .pipe(\n        mergeMap<any, any>(imagePath =>\n          this.databaseService.updateUser(this.sessionService.userId, {\n            backgroundUrl: imagePath,\n          })\n        ),\n        last()\n      )\n      .subscribe(e => {\n        notify({ message: 'Background image succesfully updated' })\n        this.user = this.sessionService.localUser\n        this.isLoading = false\n        this.imageChanged(null)\n        this.croppedImage = null\n      })\n  }\n\n  uploadAvatar(event) {\n    this.isLoadingAvatar = true\n    this.databaseService\n      .uploadAvatar(this.sessionService.userId, event.target.files[0])\n      .pipe(\n        mergeMap<any, any>(imagePath =>\n          this.databaseService.updateUser(this.sessionService.userId, {\n            avatarUrl: imagePath,\n          })\n        ),\n        last()\n      )\n      .subscribe(e => {\n        notify({ message: 'Avatar succesfully updated' })\n        this.user = this.sessionService.localUser\n        this.isLoadingAvatar = false\n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "i {\n  padding-right: 4px;\n}\n\nhr {\n  margin: 0;\n}\n\n.row {\n  padding: 2px 0\n}\n\n.justify {\n  display: flex;\n  justify-content: space-between;\n  padding: 0 35px;\n  font-weight: 400;\n}\n\n.avatar-wrapper {\n  border-radius: 50%;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n}\n\n.avatar {\n  margin: 0;\n  width: 200px;\n  height: 200px;\n}\n\n.avatar-edit {\n  position: absolute;\n  margin: 0;\n  bottom: 0;\n  width: 100%;\n  font-size: 16px;\n  color: #FFFFFF;\n  background: rgba(0, 0, 0, 0.1);\n  padding-bottom: 16px;\n}\n\n.avatar-edit:hover {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.background-image {\n  width: 100%;\n  height: auto;\n}\n",
                    "styleUrl": "./edit-user-info.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<page-navigator>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <!-- Avatar -->\n      <div class=\"card card-user\" [@card]>\n        <div class=\"header\">\n          <h4 class=\"title\">User Info</h4>\n        </div>\n        <div class=\"content\">\n          <div class=\"row\" style=\"text-align: center;\">\n            <div class=\"col-xs-12\" style=\"position: relative\">\n              <div class=\"avatar-wrapper\">\n                <loading-overlay [visible]=\"isLoadingAvatar\"></loading-overlay>\n                <img\n                  class=\"avatar border-gray\"\n                  [src]=\"user.avatarUrl || '/assets/img/default-avatar.png'\"\n                >\n                <input style=\"display: none\" [hidden]=\"true\" #avatarUpload type=\"file\" (change)=\"uploadAvatar($event)\">\n                <a href=\"javascript:void(0);\" (click)=\"avatarUpload.click()\">\n                  <h4 class=\"avatar-edit\">\n                    Upload avatar\n                  </h4>\n                </a>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <form [formGroup]=\"form\" (ngSubmit)=\"updateName(form.value)\">\n                <div class=\"form-group\" [ngClass] = \"{'has-error': !form.controls['name'].valid && form.controls['name'].touched}\">\n                  <label>Name:</label>\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Name\" formControlName=\"name\">\n                  <span class=\"help-block\" *ngIf=\"!form.controls['name'].valid && form.controls['name'].touched\">Please enter a valid name.</span>\n                </div>\n                <hr>\n                <!-- Save button -->\n                <div style=\"text-align: center;\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!form.controls['name'].valid\" style=\"width: 100%;\">\n                    <i class=\"pe-7s-diskette\"></i>\n                    Save\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <!-- Email -->\n      <div class=\"card\" [@card]>\n        <div class=\"header\">\n          <h4 class=\"title\">E-mail</h4>\n        </div>\n        <div class=\"content\">\n          <!-- Name -->\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <form [formGroup]=\"form\" (ngSubmit)=\"updateEmail(form.value)\">\n                <!-- Email -->\n                <div class=\"form-group\" [ngClass] = \"{'has-error': !form.controls['email'].valid && form.controls['email'].touched}\">\n                  <label>E-mail:</label>\n                  <input type=\"text\" class=\"form-control\" placeholder=\"E-mail\" formControlName=\"email\">\n                  <span class=\"help-block\" *ngIf=\"!form.controls['email'].valid && form.controls['email'].touched\">Please enter a valid e-mail.</span>\n                </div>\n                <!-- Emmil confirmation -->\n                <div class=\"form-group\" [ngClass] = \"{'has-error': !form.controls['confirmEmail'].valid && form.controls['confirmEmail'].touched}\">\n                  <label>Confirm e-mail:</label>\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Confirm e-mail\" formControlName=\"confirmEmail\">\n                  <span class=\"help-block\" *ngIf=\"!form.controls['confirmEmail'].valid && form.controls['confirmEmail'].touched\">E-mail doesn't match.</span>\n                </div>\n                <div class=\"form-group\">\n                  <label>Password:</label>\n                  <input type=\"password\" class=\"form-control\" placeholder=\"Password\" formControlName=\"password\">\n                </div>\n                <hr>\n                <!-- Save button -->\n                <div style=\"text-align: center;\">\n                  <button\n                    type=\"submit\"\n                    class=\"btn btn-success\"\n                    [disabled]=\"!form.controls['email'].valid || !form.controls['confirmEmail'].valid\"\n                    style=\"width: 100%;\"\n                  >\n                    <i class=\"pe-7s-diskette\"></i>\n                    Save\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-6\">\n      <!-- Password -->\n      <div class=\"card\" [@card]>\n        <div class=\"header\">\n          <h4 class=\"title\">Password</h4>\n        </div>\n        <div class=\"content\">\n          <!-- Name -->\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <form [formGroup]=\"form\" (ngSubmit)=\"updatePassword(form.value)\">\n                <!-- Current password -->\n                <div class=\"form-group\">\n                  <label>Current password:</label>\n                  <input type=\"password\" class=\"form-control\" placeholder=\"Current password\" formControlName=\"oldPassword\">\n                </div>\n                <!-- Password -->\n                <div class=\"form-group\" [ngClass] = \"{'has-error': !form.controls['password'].valid && form.controls['password'].touched}\">\n                  <label>New password:</label>\n                  <input type=\"password\" class=\"form-control\" placeholder=\"New password\" formControlName=\"password\">\n                  <span class=\"help-block\" *ngIf=\"!form.controls['password'].valid && form.controls['password'].touched\">Please enter a valid password.</span>\n                </div>\n                <!-- Password confirmation -->\n                <div class=\"form-group\" [ngClass] = \"{'has-error': !form.controls['confirmPassword'].valid && form.controls['confirmPassword'].touched}\">\n                  <label>Confirm password:</label>\n                  <input type=\"password\" class=\"form-control\" placeholder=\"Password\" formControlName=\"confirmPassword\">\n                  <span class=\"help-block\" *ngIf=\"!form.controls['confirmPassword'].valid && form.controls['confirmPassword'].touched\">Password doesn't match.</span>\n                </div>\n                <hr>\n                <!-- Save button -->\n                <div style=\"text-align: center;\">\n                  <button\n                    type=\"submit\"\n                    class=\"btn btn-success\"\n                    [disabled]=\"!form.controls['password'].valid || !form.controls['confirmPassword'].valid\"\n                    style=\"width: 100%;\">\n                    <i class=\"pe-7s-diskette\"></i>\n                    Save\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Background image -->\n  <div class=\"card\" [@card]>\n    <div class=\"header\">\n      <h4 class=\"title\">Background image</h4>\n    </div>\n    <div class=\"content\">\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <input style=\"display: none\" [hidden]=\"true\" #backgroundUpload type=\"file\" (change)=\"imageChanged($event)\">\n          <loading-overlay [visible]=\"isLoading\"></loading-overlay>\n          <img\n            *ngIf=\"!croppedImage\"\n            [src]=\"user.backgroundUrl || '/assets/img/bookshelf03.jpg'\"\n            alt=\"Background\"\n            class=\"background-image\"\n          >\n          <image-cropper\n            [imageChangedEvent]=\"imageChangedEvent\"\n            [maintainAspectRatio]=\"true\"\n            [aspectRatio]=\"16 / 3\"\n            [resizeToWidth]=\"1920\"\n            outputType=\"file\"\n            format=\"jpg\"\n            (imageCropped)=\"imageCropped($event)\"\n          ></image-cropper>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <button type=\"button\" class=\"btn btn-default\" style=\"width: 100%;\" (click)=\"backgroundUpload.click()\">\n            <i class=\"pe-7s-upload\"></i>\n            Upload\n          </button>\n        </div>\n        <div class=\"col-xs-6\">\n          <button type=\"button\" class=\"btn btn-success\" [ngClass]=\"{disabled: !croppedImage}\" style=\"width: 100%;\" (click)=\"uploadBackground(croppedImage)\">\n            <i class=\"pe-7s-diskette\"></i>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</page-navigator>\n"
        },
        {
            "name": "FindAuthorComponent",
            "id": "component-FindAuthorComponent-382e4b5ab2c0dde3039ba51959c5f2c0",
            "file": "src/app/dashboard/authors/find-author/find-author.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "find-author",
            "styleUrls": [
                "./find-author.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "find-author.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authors",
                    "defaultValue": "[]",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "hasSelectedBooks",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedAuthor",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "selectAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "updateSelectedBooks",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { Author } from 'models/author.model'\nimport { Book } from 'models/book.model'\nimport { GoodreadsService } from 'services/goodreads.service'\nimport { LibraryService } from 'services/library.service'\nimport { parseAuthor } from 'utils/helpers'\nimport { ANIMATIONS } from 'utils/constants'\nimport { mergeMap, map } from 'rxjs/operators'\n\n@Component({\n  moduleId: module.id,\n  selector: 'find-author',\n  templateUrl: 'find-author.component.html',\n  styleUrls: ['./find-author.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class FindAuthorComponent implements OnInit, OnDestroy {\n  authors: Author[] = []\n  books: Book[]\n  selectedAuthor: Author\n  isLoading = true\n  hasSelectedBooks = false\n  subscription\n\n  get localUrlPath(): string {\n    const splitUrl = this.router.url.split('/')\n    return splitUrl[splitUrl.length - 1]\n  }\n\n  constructor(\n    private libraryService: LibraryService,\n    private goodreadsService: GoodreadsService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.route.queryParams\n      .pipe(\n        map(params => params.name),\n        mergeMap<any, any>(name => this.goodreadsService.searchAuthor(name))\n      )\n      .subscribe((authors: Author[]) => {\n        this.isLoading = false\n        this.authors = authors.map(author => parseAuthor(author))\n      })\n\n    this.subscription = this.libraryService.books$.subscribe(books => {\n      if (!books) {\n        return\n      }\n      this.books = books.map(book => ({\n        ...book,\n        isSelected: false,\n        canBeSelected: true,\n      }))\n    })\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n  }\n\n  selectAuthor(author: Author) {\n    if (this.selectedAuthor) {\n      this.selectedAuthor.isSelected = false\n    }\n    this.selectedAuthor = author\n    author.isSelected = true\n  }\n\n  updateSelectedBooks(books: Book[]) {\n    this.hasSelectedBooks = books.some(book => book.isSelected)\n  }\n\n  updateBooks() {\n    const selectedBooks = this.books.filter(book => book.isSelected)\n    const hasGoodreadsAuthorId = selectedBooks.filter(\n      book => book.goodreadsAuthorId\n    )\n    if (hasGoodreadsAuthorId) {\n      // open modal\n    }\n    selectedBooks.forEach(book => {\n      book.goodreadsAuthorId = this.selectedAuthor.id\n      book.author = this.selectedAuthor.name\n      this.libraryService.updateBook(book)\n    })\n    this.router.navigate(['/dashboard/books'])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./find-author.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "localUrlPath": {
                    "name": "localUrlPath",
                    "getSignature": {
                        "name": "localUrlPath",
                        "type": "string",
                        "returnType": "string",
                        "line": 26
                    }
                }
            },
            "templateData": "<page-navigator>\n  <div class=\"card\" style=\"text-align: center\" [@card]>\n    <div class=\"header\">\n      <h4 class=\"title\">\n        We couldn't find this author\n        <powered-by-goodreads></powered-by-goodreads>\n      </h4>\n      <hr />\n      <p class=\"category\" placement=\"bottom\" style=\"padding-bottom: 10px\">\n        Unfortunately, we couldn't find any information on this author.<br />\n        Here are some suggestions from Goodreads. You can choose one of the\n        authors below and then choose to which books you'd like to associate\n        this author.\n      </p>\n    </div>\n    <div class=\"content\">\n      <hr />\n      <loading [visible]=\"isLoading\"></loading>\n      <authors-display\n        *ngIf=\"!isLoading\"\n        [maxAuthors]=\"12\"\n        [authors]=\"authors\"\n        [clickable]=\"true\"\n        (onClick)=\"selectAuthor($event)\"\n      ></authors-display>\n\n      <div *ngIf=\"selectedAuthor\" class=\"row\" style=\"text-align: left\">\n        <div class=\"col-xs-12\">\n          <hr />\n          <h5>Select books written by {{ selectedAuthor.name }}</h5>\n        </div>\n\n        <div class=\"col-xs-12\">\n          <hr />\n          <books-display\n            [books]=\"books\"\n            [selectable]=\"true\"\n            (selectedBooks)=\"updateSelectedBooks($event)\"\n          ></books-display>\n        </div>\n\n        <div class=\"col-xs-12\" style=\"text-align: center;\">\n          <hr />\n          <button\n            type=\"button\"\n            class=\"btn btn-success\"\n            style=\"width: 100%;\"\n            (click)=\"updateBooks()\"\n            [disabled]=\"!hasSelectedBooks\"\n          >\n            Associate books\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</page-navigator>\n"
        },
        {
            "name": "FindBookComponent",
            "id": "component-FindBookComponent-db24153c724e35d2c67499074457abf0",
            "file": "src/app/dashboard/books/find-book/find-book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "find-book",
            "styleUrls": [
                "find-book.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "find-book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedBook",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tableItems",
                    "defaultValue": "{\n    Cover: true,\n    Author: true,\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "selectBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms'\nimport { GoodreadsService } from 'services/goodreads.service'\nimport { parseBook } from 'utils/helpers'\nimport { Book } from 'models/book.model'\nimport { map, mergeMap } from 'rxjs/operators'\nimport { ActivatedRoute, Router } from '@angular/router'\n\n@Component({\n  moduleId: module.id,\n  selector: 'find-book',\n  templateUrl: 'find-book.component.html',\n  styleUrls: ['find-book.component.css'],\n})\nexport class FindBookComponent implements OnInit {\n  form: FormGroup\n  books: Book[]\n  selectedBook: Book\n  isLoading = true\n  tableItems = {\n    Cover: true,\n    Author: true,\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private goodreadsService: GoodreadsService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.route.queryParams\n      .pipe(\n        map(params => params.title),\n        mergeMap<any, any>(title => this.goodreadsService.searchBook(title))\n      )\n      .subscribe((books: Book[]) => {\n        this.isLoading = false\n        this.books = books.map(book => ({\n          ...parseBook(book),\n          canBeSelected: true,\n          isSelected: false,\n        }))\n      })\n    this.form = this.fb.group({\n      searchInput: ['', Validators.required],\n    })\n  }\n\n  selectBook(book: Book) {\n    if (this.selectedBook) {\n      this.selectedBook.isSelected = false\n    }\n    book.isSelected = true\n    this.router.navigate([`/dashboard/books/import/${book.goodreadsId}`], {\n      queryParams: {\n        libraryBookId: this.route.snapshot.queryParamMap.get('libraryBookId'),\n      },\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 4px 0;\n}",
                    "styleUrl": "find-book.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"header\">\n    <h4 class=\"title\">Find book</h4>\n    <powered-by-goodreads></powered-by-goodreads>\n  </div>\n  <div class=\"content\">\n    <loading [visible]=\"isLoading\"></loading>\n    <hr *ngIf=\"!isLoading && books && books.length\" />\n    <div class=\"books-display\" *ngIf=\"!isLoading && books && books.length\">\n      <books-display\n        [fullSearchBar]=\"true\"\n        [maxBooks]=\"8\"\n        [tilesDisplay]=\"false\"\n        [tableDisplayItems]=\"tableItems\"\n        [books]=\"books\"\n        [clickable]=\"true\"\n        (onClick)=\"selectBook($event)\"\n      ></books-display>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-8e591794ac4c15c17be64010aa3f5283",
            "file": "src/app/home/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "footer-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "test",
                    "defaultValue": "new Date()",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'footer-cmp',\n  templateUrl: 'footer.component.html'\n})\n\nexport class FooterComponent {\n  test: Date = new Date()\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<footer class=\"footer\">\n  <div class=\"container-fluid\">\n    <nav class=\"pull-left\">\n      <ul>\n        <li>\n          <a href=\"https://github.com/deadalley/book-lib\">\n            GitHub Repository\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <div class=\"copyright pull-right\">\n      &copy; {{test | date: 'yyyy'}}, made by <a href=\"https://github.com/deadalley\">@DeadAlley</a>\n    </div>\n  </div>\n</footer>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-5b2d881c9eeed674649d254513fa0e2e-1",
            "file": "src/app/dashboard/shared/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "footer-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "test",
                    "defaultValue": "new Date()",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n    moduleId: module.id,\n    selector: 'footer-cmp',\n    templateUrl: 'footer.component.html'\n})\n\nexport class FooterComponent {\n    test: Date = new Date()\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FooterComponent-1",
            "templateData": "<footer class=\"footer\">\n    <div class=\"container-fluid\">\n        <nav class=\"pull-left\">\n            <ul>\n\n                <li>\n                    <a href=\"https://www.creative-tim.com\">\n                        Creative Tim\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://blog.creative-tim.com\">\n                       Blog\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://www.creative-tim.com/license\">\n                        Licenses\n                    </a>\n                </li>\n            </ul>\n        </nav>\n        <div class=\"copyright pull-right\">\n            &copy; {{test | date: 'yyyy'}}, made with <i class=\"fa fa-heart heart\"></i> by <a href=\"https://www.creative-tim.com\">Creative Tim</a>\n        </div>\n    </div>\n</footer>\n"
        },
        {
            "name": "GetStartedComponent",
            "id": "component-GetStartedComponent-dfa4cdfbd5262943f95983f2daeb275e",
            "file": "src/app/home/get-started/get-started.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "get-started",
            "styleUrls": [
                "get-started.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "get-started.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "loadComponent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "loginEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "loginFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "loginGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core'\nimport { AuthService } from '../../../services/auth.service'\n\n@Component({\n  moduleId: module.id,\n  selector: 'get-started',\n  templateUrl: 'get-started.component.html',\n  styleUrls: ['get-started.component.css']\n})\n\nexport class GetStartedComponent implements OnInit {\n  errorMessage: string\n\n  @Output() loadComponent = new EventEmitter<string>()\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() { }\n\n  loginGoogle() {\n    this.authService.loginGoogle()\n  }\n\n  loginFacebook() {\n    this.authService.loginFacebook()\n  }\n\n  loginEmail() {\n    this.loadComponent.emit('signin')\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "img {\n  width: 250px;\n}\n\n.col-xs-12 {\n  padding: 8px 0;\n}\n\n.card {\n  text-align: center;\n}",
                    "styleUrl": "get-started.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"header\">\n    <h4 class=\"title\">Get started</h4>\n  </div>\n  <div class=\"content\">\n    <div class=\"row\">\n      <div class=\"col-xs-12\">\n        <a href=\"javascript:void(0);\" (click)=\"loginGoogle()\">\n          <img\n            src=\"/assets/img/Flat/Social buttons by Dreamstale (5).svg\"\n            alt=\"Login with Google\"\n          >\n        </a>\n      </div>\n      <div class=\"col-xs-12\">\n        <a href=\"javascript:void(0);\" (click)=\"loginFacebook()\">\n          <img\n            src=\"/assets/img/Flat/Social buttons by Dreamstale (2).svg\"\n            alt=\"Login with Facebook\"\n          >\n        </a>\n      </div>\n      <div class=\"col-xs-12\">\n        <a href=\"javascript:void(0);\" (click)=\"loginEmail()\">\n          <img\n            src=\"/assets/img/Flat/Social buttons by Dreamstale (4).svg\"\n            alt=\"Login with Google\"\n          >\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GoodreadsComponent",
            "id": "component-GoodreadsComponent-8336ed33127acf70f93747e47e2f251a",
            "file": "src/app/dashboard/goodreads/goodreads.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "goodreads-cmp",
            "styleUrls": [
                "goodreads.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "goodreads.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'goodreads-cmp',\n  templateUrl: 'goodreads.component.html',\n  styleUrls: ['goodreads.component.css']\n})\n\nexport class GoodreadsComponent implements OnInit {\n  ngOnInit() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n  padding: 20px;\n  text-align: center;\n}\n\n.title img {\n  width: 200px;\n}\n\n.category {\n  text-align: center;\n}\n\n.category img {\n  height: 14px;\n}\n\nhr {\n  margin: 4px 0;\n}",
                    "styleUrl": "goodreads.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-content\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card\">\n          <div class=\"header\">\n            <h4 class=\"title\"><img src=\"/assets/img/goodreads.png\"></h4>\n            <hr>\n            <p class=\"category\" placement=\"bottom\" style=\"padding-bottom: 10px\">\n              This page is powered by the <img src=\"/assets/img/goodreads.png\"> database.<br>\n              You can search books and authors and import them into your BookLib library.<br>\n              If you have Goodreads account, you can import your books from there.\n            </p>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n        <goodreads-search-book></goodreads-search-book>\n      </div>\n      <div class=\"col-md-6\">\n        <goodreads-search-author></goodreads-search-author>\n      </div>\n      <div class=\"col-md-12\">\n        <goodreads-import></goodreads-import>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "GoodreadsImportComponent",
            "id": "component-GoodreadsImportComponent-ebe41ba0d7e79bab72bf11c87d5e5f97",
            "file": "src/app/dashboard/goodreads/goodreads-import/goodreads-import.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "goodreads-import",
            "styleUrls": [
                "./goodreads-import.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "goodreads-import.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "goodreadsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "hasSelectedBooks",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tableDisplayItems",
                    "defaultValue": "{\n    Cover: true,\n    Year: false,\n    Publisher: false,\n    Pages: false,\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "connectToGoodreads",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "importBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "loadBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "selection",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelectedBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { GoodreadsService } from 'services/goodreads.service'\nimport { LibraryService } from 'services/library.service'\nimport { Book } from 'models/book.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { AuthService } from 'services/auth.service'\nimport { SessionService } from 'services/session.service'\nimport { mergeMap, filter, map } from 'rxjs/operators'\nimport { combineLatest } from 'rxjs'\nimport { parseBook } from 'utils/helpers'\nimport { Router } from '@angular/router'\n\n@Component({\n  moduleId: module.id,\n  selector: 'goodreads-import',\n  templateUrl: 'goodreads-import.component.html',\n  styleUrls: ['./goodreads-import.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class GoodreadsImportComponent implements OnInit {\n  goodreadsId: number\n  books: Book[]\n  isLoading = true\n  hasSelectedBooks = false\n  tableDisplayItems = {\n    Cover: true,\n    Year: false,\n    Publisher: false,\n    Pages: false,\n  }\n\n  constructor(\n    private goodreadsService: GoodreadsService,\n    private libraryService: LibraryService,\n    private authService: AuthService,\n    private sessionService: SessionService,\n    private router: Router\n  ) {\n    this.sessionService.goodreadsId$.subscribe(id => {\n      this.goodreadsId = +id\n      if (this.goodreadsId) {\n        this.loadBooks()\n      } else {\n        this.isLoading = false\n      }\n    })\n  }\n\n  ngOnInit() {}\n\n  connectToGoodreads() {\n    this.authService.loginGoodreads()\n  }\n\n  loadBooks() {\n    combineLatest(\n      this.sessionService.goodreadsId$.pipe(\n        filter(goodreadsId => !!goodreadsId),\n        mergeMap(goodreadsId =>\n          this.goodreadsService.getBooksForUser(goodreadsId)\n        )\n      ),\n      this.libraryService.books$.pipe(\n        map<any, any>(books =>\n          books.map(book => book.goodreadsId).filter(id => id)\n        )\n      )\n    )\n      .pipe(\n        map(([books, userBookGrIds]) => {\n          return books\n            .map(\n              book =>\n                ({\n                  ...parseBook(book),\n                  owned: false,\n                  read: false,\n                  favorite: false,\n                  wishlist: false,\n                  date: new Date().toISOString(),\n                  isSelected: false,\n                } as Book)\n            )\n            .map(book => ({\n              ...book,\n              canBeSelected: !userBookGrIds.includes(book.goodreadsId),\n            }))\n        })\n      )\n      .subscribe(books => {\n        this.books = books\n        this.isLoading = false\n      })\n  }\n\n  updateSelectedBooks() {\n    this.hasSelectedBooks = this.books.some(book => book.isSelected)\n  }\n\n  selectAll(selection: boolean) {\n    this.books.forEach(book => (book.isSelected = selection))\n    this.updateSelectedBooks()\n  }\n\n  importBooks() {\n    this.libraryService\n      .addBooks(this.books.filter(book => book.isSelected))\n      .then(() => this.router.navigate(['/dashboard/books']))\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".info-with-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.icon {\n  font-size: 36px;\n  color: red;\n  padding: 4px;\n}\n\n.no-margin {\n  margin: 0;\n}\n",
                    "styleUrl": "./goodreads-import.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"header\">\n    <h4 class=\"title\">Import your library from Goodreads</h4>\n    <p class=\"category\">\n      Choose the books you want to import from your Goodreads account\n    </p>\n  </div>\n  <div class=\"content\">\n    <!-- Not connected to GR -->\n    <div *ngIf=\"!goodreadsId\" class=\"row\">\n      <div class=\"col-md-12\" style=\"text-align: center;\">\n        <div class=\"info-with-icon\">\n          <i class=\"pe-7s-attention icon\"></i>\n          <h4 class=\"text-muted no-margin\">\n            You're not connected to a Goodreads account.\n          </h4>\n        </div>\n        <p class=\"category\" placement=\"bottom\" style=\"padding-bottom: 10px;\">\n          Would you like to connect now?\n        </p>\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          (click)=\"connectToGoodreads()\"\n        >Connect to Goodreads</button>\n      </div>\n    </div>\n    <!-- Books -->\n    <loading [visible]=\"isLoading\"></loading>\n    <books-display\n      *ngIf=\"!isLoading && books && books.length\"\n      [books]=\"books\"\n      [selectable]=\"true\"\n      [tableDisplayItems]=\"tableDisplayItems\"\n      [displayBooksInLibraryInfo]=\"true\"\n      (selectedBooks)=\"updateSelectedBooks($event)\"\n    ></books-display>\n    <!-- No books to add -->\n    <div class=\"row\" *ngIf=\"!isLoading && goodreadsId && (!books || books.length === 0)\">\n      <div class=\"col-xs-12 text-center\">\n        <h4 class=\"text-muted\">You don't have any new books to add from your Goodreads library. :(</h4>\n        <p>\n          <a href=\"javascript:void(0);\" routerLink=\"../../\">Return to library</a>\n        </p>\n      </div>\n    </div>\n    <!-- Button -->\n    <div *ngIf=\"!isLoading && goodreadsId\" style=\"text-align: center;\">\n      <button\n        type=\"button\"\n        class=\"btn btn-success\"\n        style=\"width: 100%;\"\n        (click)=\"importBooks()\"\n        [disabled]=\"!hasSelectedBooks\"\n      >\n        Import books to your library\n      </button>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "GoodreadsInfoComponent",
            "id": "component-GoodreadsInfoComponent-16d01eccce73630c27b9fed53dff9422",
            "file": "src/app/dashboard/profile/goodreads-info/goodreads-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "goodreads-info",
            "styleUrls": [
                "./goodreads-info.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./goodreads-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "line": 14,
                    "type": "User"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "connectedToGoodreads",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "loginGoodreads",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core'\nimport { User } from 'models/user.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { AuthService } from 'services/auth.service'\nimport { SessionService } from 'services/session.service'\n\n@Component({\n  selector: 'goodreads-info',\n  templateUrl: './goodreads-info.component.html',\n  styleUrls: ['./goodreads-info.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class GoodreadsInfoComponent implements OnInit {\n  @Input() user: User\n  connectedToGoodreads: boolean\n\n  constructor(\n    private authService: AuthService,\n    private sessionService: SessionService\n  ) {\n    this.sessionService.goodreadsId$.subscribe(id => {\n      this.connectedToGoodreads = !!id\n    })\n    this.user = this.sessionService.localUser\n  }\n\n  ngOnInit() {}\n\n  loginGoodreads() {\n    this.authService.loginGoodreads('dashboard/profile')\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "i {\n  padding-right: 4px;\n}\n\n.row {\n  padding: 2px 0\n}\n\n.justify {\n  display: flex;\n  justify-content: space-between;\n  padding: 0 35px;\n  font-weight: 400;\n}\n\n.align-center {\n  text-align: center;\n}\n",
                    "styleUrl": "./goodreads-info.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\" [@card]>\n  <div class=\"header\">\n    <h4 class=\"title\">\n      Goodreads Account\n    </h4>\n  </div>\n  <div class=\"content\">\n    <ng-container [ngSwitch]=\"connectedToGoodreads\">\n      <div class=\"row\" *ngSwitchCase=\"false\">\n        <p class=\"col-xs-12 text-center\">\n          <i class=\"pe-7s-close-circle\" style=\"font-size: 1.0em; color: #ff0505\"></i>\n          Your account is not yet connected to Goodreads\n        </p>\n        <div class=\"col-md-4 col-xs-10 col-md-offset-4 col-xs-offset-1 align-center\">\n          <a class=\"btn btn-social btn-goodreads\" (click)=\"loginGoodreads()\">\n            <span style=\"font-size: 26px; line-height: 44px;\" class=\"fab fa-goodreads-g\"></span>\n            Connect to Goodreads\n          </a>\n        </div>\n      </div>\n      <div class=\"row justify-content-center\" *ngSwitchCase=\"true\">\n        <div class=\"col-xs-12 text-center\">\n          <p>\n            <i class=\"pe-7s-check\" style=\"font-size: 1.0em; color: #00bb1a\"></i>\n            Your account is already connected to Goodreads\n          </p>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>"
        },
        {
            "name": "GoodreadsSearchAuthorComponent",
            "id": "component-GoodreadsSearchAuthorComponent-b3d4acefe313aca03b3f7f2245cef056",
            "file": "src/app/dashboard/goodreads/goodreads-search-author/goodreads-search-author.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "goodreads-search-author",
            "styleUrls": [
                "goodreads-search-author.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "goodreads-search-author.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tableItems",
                    "defaultValue": "{\n    Cover: true,\n    Author: true,\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "selectAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms'\nimport { GoodreadsService } from 'services/goodreads.service'\nimport { parseAuthor } from 'utils/helpers'\nimport { Author } from 'models/author.model'\nimport { Router } from '@angular/router'\n\n@Component({\n  moduleId: module.id,\n  selector: 'goodreads-search-author',\n  templateUrl: 'goodreads-search-author.component.html',\n  styleUrls: ['goodreads-search-author.component.css'],\n})\nexport class GoodreadsSearchAuthorComponent implements OnInit {\n  form: FormGroup\n  authors: Author[]\n  isLoading = false\n  tableItems = {\n    Cover: true,\n    Author: true,\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private goodreadsService: GoodreadsService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      searchInput: ['', Validators.required],\n    })\n  }\n\n  submit({ searchInput }) {\n    const query = searchInput\n    this.isLoading = true\n    this.goodreadsService.searchAuthor(query).subscribe(authors => {\n      this.isLoading = false\n      this.authors = authors.map(author => parseAuthor(author))\n    })\n  }\n\n  selectAuthor(author: Author) {\n    this.router.navigate([`/dashboard/authors/${author.id}`])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  text-align: center;\n}\n\n.input-group {\n  flex: 1;\n}\n\n.btn-margin {\n  margin: 0 8px;\n}\n\n.search-container {\n  display: flex;\n}\n\n.authors-display {\n  margin: 8px 0;\n}",
                    "styleUrl": "goodreads-search-author.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"header\">\n    <h4 class=\"title\">Search authors</h4>\n  </div>\n  <div class=\"content\">\n    <form [formGroup]=\"form\" class=\"search-container\" (ngSubmit)=\"submit(form.value)\">\n      <div class=\"input-group\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"Search\" formControlName=\"searchInput\">\n        <span class=\"input-group-addon\" id=\"sizing-addon2\">\n          <i class=\"pe-7s-search search-icon\"></i>\n        </span>\n      </div>\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-margin\"\n      >Search</button>\n    </form>\n    <hr *ngIf=\"!isLoading && authors && authors.length\">\n    <loading [visible]=\"isLoading\"></loading>\n    <div class=\"authors-display\" *ngIf=\"!isLoading && authors && authors.length\">\n      <authors-display\n        [fullSearchBar]=\"true\"\n        [maxAuthors]=\"4\"\n        [cardsInRow]=\"2\"\n        [tilesDisplay]=\"false\"\n        [authors]=\"authors\"\n        [clickable]=\"true\"\n        (onClick)=\"selectAuthor($event)\"\n      ></authors-display>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GoodreadsSearchBookComponent",
            "id": "component-GoodreadsSearchBookComponent-06b44e4479f9069ef7e2aa4f16b3d2b6",
            "file": "src/app/dashboard/goodreads/goodreads-search-book/goodreads-search-book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "goodreads-search-book",
            "styleUrls": [
                "goodreads-search-book.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "goodreads-search-book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tableItems",
                    "defaultValue": "{\n    Cover: true,\n    Author: true,\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "importBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms'\nimport { GoodreadsService } from 'services/goodreads.service'\nimport { parseBook } from 'utils/helpers'\nimport { Book } from 'models/book.model'\nimport { map, mergeMap } from 'rxjs/operators'\nimport { LibraryService } from 'services/library.service'\nimport { MAX_BOOKS } from 'utils/constants'\nimport { Router } from '@angular/router'\n\n@Component({\n  moduleId: module.id,\n  selector: 'goodreads-search-book',\n  templateUrl: 'goodreads-search-book.component.html',\n  styleUrls: ['goodreads-search-book.component.css'],\n})\nexport class GoodreadsSearchBookComponent implements OnInit {\n  form: FormGroup\n  books: Book[]\n  isLoading = false\n  tableItems = {\n    Cover: true,\n    Author: true,\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private goodreadsService: GoodreadsService,\n    private libraryService: LibraryService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      searchInput: ['', Validators.required],\n    })\n  }\n\n  submit({ searchInput }) {\n    const query = searchInput\n    this.isLoading = true\n    this.goodreadsService.searchBook(query).subscribe(books => {\n      this.isLoading = false\n      this.books = books.map(book => ({\n        ...parseBook(book),\n        canBeSelected: true,\n        isSelected: false,\n      }))\n    })\n  }\n\n  importBooks() {\n    const importedBookIds = this.books\n      .filter(book => book.isSelected)\n      .map(book => book.goodreadsId)\n    this.goodreadsService\n      .getBooks(importedBookIds)\n      .pipe(\n        map(books => books.map(book => parseBook(book))),\n        mergeMap(books => this.libraryService.addBooks(books as Book[])),\n        mergeMap(() => this.libraryService.books$),\n        map(books => books.length)\n      )\n      .subscribe(bookCount =>\n        this.router.navigate(['/dashboard/books'], {\n          queryParams: { page: Math.ceil(bookCount / MAX_BOOKS) },\n        })\n      )\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  text-align: center;\n}\n\n.input-group {\n  flex: 1;\n}\n\n.btn-margin {\n  margin: 0 8px;\n}\n\n.search-container {\n  display: flex;\n}\n\n.books-display {\n  margin: 8px 0;\n}",
                    "styleUrl": "goodreads-search-book.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"header\">\n    <h4 class=\"title\">Search books</h4>\n  </div>\n  <div class=\"content\">\n    <form [formGroup]=\"form\" class=\"search-container\" (ngSubmit)=\"submit(form.value)\">\n      <div class=\"input-group\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"Search\" formControlName=\"searchInput\">\n        <span class=\"input-group-addon\" id=\"sizing-addon2\">\n          <i class=\"pe-7s-search search-icon\"></i>\n        </span>\n      </div>\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-margin\"\n      >Search</button>\n    </form>\n    <hr *ngIf=\"!isLoading && books && books.length\">\n    <loading [visible]=\"isLoading\"></loading>\n    <div class=\"books-display\" *ngIf=\"!isLoading && books && books.length\">\n      <books-display\n        [fullSearchBar]=\"true\"\n        [maxBooks]=\"4\"\n        [bookCardsInRow]=\"2\"\n        [tilesDisplay]=\"false\"\n        [tableDisplayItems]=\"tableItems\"\n        [books]=\"books\"\n        [selectable]=\"true\"\n      ></books-display>\n      <button\n        type=\"button\"\n        class=\"btn btn-success\"\n        style=\"width: 100%;\"\n        (click)=\"importBooks()\"\n      >Import</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-decf68ea42fa13699a499ca16fd8cf47",
            "file": "src/app/dashboard/core/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "grid",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 17,
                    "type": "any[]"
                },
                {
                    "name": "itemsInRow",
                    "defaultValue": "4",
                    "line": 18
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentTemplate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef, {static: false}"
                        }
                    ]
                },
                {
                    "name": "gridColumns",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ContentChild,\n  TemplateRef,\n} from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  // tslint:disable-next-line:component-selector\n  selector: 'grid',\n  templateUrl: 'grid.component.html',\n  styleUrls: [],\n})\nexport class GridComponent implements OnInit {\n  @Input() items: any[]\n  @Input() itemsInRow = 4\n\n  @ContentChild(TemplateRef, { static: false }) contentTemplate\n\n  gridColumns = {}\n\n  ngOnInit() {\n    const divider = `col-md-${12 / this.itemsInRow}`\n    this.gridColumns[divider] = true\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngFor=\"let item of items; let i = index;\">\n  <div class=\"clearfix\" *ngIf=\"i % itemsInRow == 0\"></div>\n  <div [ngClass]=\"gridColumns\">\n    <ng-template\n      [ngTemplateOutlet]=\"contentTemplate\"\n      [ngTemplateOutletContext]=\"{$implicit: item}\"\n    ></ng-template>\n  </div>\n</ng-container>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-164cf30b214ce1420358a76305ea4020",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentToLoad",
                    "defaultValue": "'getstarted'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "environment",
                    "defaultValue": "environment",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { environment } from 'environments/environment'\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  componentToLoad = 'getstarted'\n  environment = environment\n\n  set setComponentToLoad(component: string) {\n    this.componentToLoad = component\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clear-filter:after,\n.clear-filter:before {\n  display: none;\n}\n.page-header {\n  height: 125vh;\n  max-height: 700px;\n  padding: 0;\n  color: #ffffff;\n  position: relative;\n  background-position: center center;\n  background-size: cover;\n  margin: 0;\n}\n.page-header .page-header-image {\n  position: absolute;\n  background-size: cover;\n  background-position: center center;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n}\n.page-header footer {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n}\n.page-header .container {\n  height: 100%;\n  z-index: 1;\n  text-align: center;\n}\n.page-header .container > .content-center {\n  top: 37%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -ms-transform: translate(-50%, -50%);\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  text-align: center;\n  color: #ffffff;\n  width: 100%;\n  max-width: 880px;\n}\n.page-header .category,\n.page-header .description {\n  color: rgba(255, 255, 255, 0.5);\n}\n.page-header.page-header-small {\n  height: 60vh;\n  max-height: 440px;\n}\n.page-header:after,\n.page-header:before {\n  position: absolute;\n  z-index: 0;\n  width: 100%;\n  height: 100%;\n  display: block;\n  left: 0;\n  top: 0;\n  content: '';\n}\n.page-header:before {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.page-header[filter-color='custom'] {\n  background: rgba(44, 44, 44, 0.2);\n  /* For browsers that do not support gradients */\n  background: -webkit-linear-gradient(\n    90deg,\n    rgba(43, 77, 113, 0.2),\n    rgba(16, 168, 226, 0.6)\n  );\n  /* For Safari 5.1 to 6.0 */\n  background: -o-linear-gradient(\n    90deg,\n    rgba(43, 77, 113, 0.2),\n    rgba(16, 168, 226, 0.6)\n  );\n  /* For Opera 11.1 to 12.0 */\n  background: -moz-linear-gradient(\n    90deg,\n    rgba(43, 77, 113, 0.2),\n    rgba(16, 168, 226, 0.6)\n  );\n  /* For Firefox 3.6 to 15 */\n  background: linear-gradient(\n    0deg,\n    rgba(43, 77, 113, 0.2),\n    rgba(16, 168, 226, 0.6)\n  );\n  /* Standard syntax */\n}\n.page-header .container {\n  z-index: 2;\n}\n.main {\n  background: rgb(255, 255, 255);\n}\n.info-paragraph {\n  text-align: left;\n}\nhr {\n  border-top: 1px solid #dddddd;\n}\n.section-item {\n  padding: 0 120px;\n}\n.items {\n  z-index: 2;\n}\n.n-logo {\n  height: 150px;\n  width: auto;\n}\nli {\n  text-align: center;\n  font-size: 20px;\n  padding: 12px;\n  font-weight: 300;\n  list-style-type: none;\n}\n\n.astrodivider {\n  max-width: 100%;\n  position: relative;\n  z-index: 2;\n}\n.astrodividermask {\n  overflow: hidden;\n  position: absolute;\n  height: 20px;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n.astrodividermask:after {\n  content: '';\n  display: block;\n  margin: -25px auto 0;\n  width: 100%;\n  height: 25px;\n  border-radius: 125px / 12px;\n  box-shadow: 0 0 8px #8a8a8a;\n}\n.astrodivider span {\n  width: 40px;\n  height: 40px;\n  position: absolute;\n  bottom: 100%;\n  margin-bottom: -20px;\n  left: 50%;\n  margin-left: -25px;\n  border-radius: 100%;\n  box-shadow: 0 2px 4px #ababab;\n  background: #fff;\n  display: flex;\n}\n.astrodivider i {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-style: normal;\n  color: #949494;\n}\n",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "setComponentToLoad": {
                    "name": "setComponentToLoad",
                    "setSignature": {
                        "name": "setComponentToLoad",
                        "type": "void",
                        "args": [
                            {
                                "name": "component",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "component",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<home-navbar></home-navbar>\n<div class=\"page-header\" filter-color=\"custom\">\n  <div\n    class=\"page-header-image clear-filter\"\n    data-parallax=\"true\"\n    style=\"background-image: url('/assets/img/background-01.jpg');\"\n  ></div>\n  <div class=\"container\">\n    <div class=\"content-center brand\">\n      <img class=\"n-logo\" src=\"./assets/img/booklib-128x128.png\" alt=\"\" />\n      <h1 class=\"h1-seo\">Book Lib</h1>\n      <h3>Your personal library. Everywhere you go.</h3>\n    </div>\n  </div>\n</div>\n<div class=\"main\">\n  <div class=\"section section-basic\">\n    <home-section\n      sectionTitle=\"Catalog your books and keep your library organized\"\n    >\n      <div class=\"row section-item\">\n        <div class=\"col-md-12\">\n          <img\n            style=\"height: 450px; width: auto;\"\n            src=\"/assets/img/home/book.png\"\n            alt=\"social-media-page\"\n          />\n        </div>\n        <div class=\"col-md-12 items\">\n          <ul>\n            <li>\n              Manually add books to your library with title, author, title in\n              original language, publisher, year of publication and number of\n              pages\n            </li>\n            <hr />\n            <li>\n              Customize your books: give them a rating, separate them in\n              categories such as favorite, owned, read or in wishlist and add\n              personalized notes to them, like a review or thoughts you had\n              while reading\n            </li>\n            <hr />\n            <li>\n              Categorize and organize your books by adding tags and genres to\n              them or adding them to a collection\n            </li>\n          </ul>\n        </div>\n      </div>\n    </home-section>\n    <div class=\"astrodivider\">\n      <div class=\"astrodividermask\"></div>\n      <span>\n        <i class=\"pe-7s-angle-down\" style=\"font-size: 24px;\"></i>\n      </span>\n    </div>\n    <home-section sectionTitle=\"Make the most out of your collections\">\n      <div class=\"row section-item\">\n        <div class=\"col-md-12\">\n          <img\n            style=\"height: 450px; width: auto;\"\n            src=\"/assets/img/home/collections.png\"\n            alt=\"social-media-page\"\n          />\n        </div>\n        <div class=\"col-md-12 items\">\n          <ul>\n            <li>\n              BookLib allows you to separate your books in collections.\n              Collections can have as many books as you want and can be\n              organized any way you want\n            </li>\n            <hr />\n            <li>\n              Have a favorite trilogy? Want to put together all those hundreds\n              of books written by your favorite author? Create a new collection\n              and organize your books according to your needs\n            </li>\n          </ul>\n        </div>\n      </div>\n    </home-section>\n    <div class=\"astrodivider\">\n      <div class=\"astrodividermask\"></div>\n      <span>\n        <i class=\"pe-7s-angle-down\" style=\"font-size: 24px;\"></i>\n      </span>\n    </div>\n    <home-section sectionTitle=\"Share your library with the world\">\n      <div class=\"row section-item\">\n        <div class=\"col-md-12\">\n          <img\n            style=\"height: 450px; width: auto;\"\n            src=\"/assets/img/home/social-media-page.png\"\n            alt=\"social-media-page\"\n          />\n        </div>\n        <div class=\"col-md-12 items\">\n          <ul>\n            <li>\n              Share updates about books and collections in your library with\n              friends over Facebook or Twitter\n            </li>\n            <hr />\n            <li>\n              Invite friends to create their own personal libraries and see what\n              books they are reading or want to read next\n            </li>\n          </ul>\n        </div>\n      </div>\n    </home-section>\n    <div class=\"astrodivider\">\n      <div class=\"astrodividermask\"></div>\n      <span>\n        <i class=\"pe-7s-angle-down\" style=\"font-size: 24px;\"></i>\n      </span>\n    </div>\n    <home-section\n      sectionTitle=\"Access millions of books and add them to your library\"\n    >\n      <div class=\"row section-item\">\n        <div class=\"col-md-12\">\n          <img\n            style=\"height: 350px; width: auto;\"\n            src=\"/assets/img/home/import.png\"\n            alt=\"import\"\n          />\n        </div>\n        <div class=\"col-md-12 items\">\n          <ul>\n            <li>\n              Import book data from millions of books available in the Goodreads\n              and Amazon databases\n            </li>\n            <hr />\n            <li>\n              Connect your BookLib account to your Amazon or Goodreads account\n              and import your book favorites and wishlist easily\n            </li>\n            <hr />\n            <li>\n              Keep track of your favorite authors and their work by accessing\n              the Goodreads database directly from BookLib\n            </li>\n          </ul>\n        </div>\n      </div>\n    </home-section>\n    <div class=\"astrodivider\">\n      <div class=\"astrodividermask\"></div>\n      <span>\n        <i class=\"pe-7s-angle-down\" style=\"font-size: 24px;\"></i>\n      </span>\n    </div>\n    <home-section sectionTitle=\"Import your library and take it anywhere\">\n      <div class=\"row section-item\">\n        <div class=\"col-md-12\">\n          <img\n            style=\"height: 350px; width: auto;\"\n            src=\"/assets/img/home/phone.png\"\n            alt=\"sheet\"\n          />\n        </div>\n        <div class=\"col-md-12 items\">\n          <ul>\n            <li>\n              Tired of keeping tracking of your books in boring spreadsheet\n              files? Import those files directly into BookLib and start managing\n              your personal library in a much more intuitive way!\n            </li>\n            <hr />\n            <li>\n              Access your personal library anywhere and show the world your\n              impressive collection!\n            </li>\n          </ul>\n        </div>\n      </div>\n    </home-section>\n  </div>\n</div>\n<footer-cmp></footer-cmp>\n"
        },
        {
            "name": "HomeNavbarComponent",
            "id": "component-HomeNavbarComponent-372ca7a03c3f3086443f9e9d9073ef4f",
            "file": "src/app/home/home-navbar/home-navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-navbar",
            "styleUrls": [
                "./home-navbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home-navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selected",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "showSignIn",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "showSignUp",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'home-navbar',\n  templateUrl: './home-navbar.component.html',\n  styleUrls: ['./home-navbar.component.css'],\n})\nexport class HomeNavbarComponent implements OnInit {\n  showSignUp = false\n  showSignIn = false\n  selected = ''\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\n  font-size: 16px;\n  color: #ffffff;\n  font-weight: 200;\n}\n\nli > a:hover > p {\n  color: #aaaaaa;\n}\n\n.navbar-default {\n  background: rgb(9, 41, 53);\n  margin-bottom: 0;\n}\n\n.brand-with-icon {\n  display: flex;\n  align-items: center;\n}\n\n.icon-brand {\n  height: 28px;\n  width: auto;\n  padding: 0 4px;\n}\n\n.bold {\n  font-weight: 400;\n}\n\n.brand {\n  font-size: 20px;\n  line-height: 1;\n}\n",
                    "styleUrl": "./home-navbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-default\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <div class=\"brand-with-icon\">\n        <img\n          class=\"icon-brand\"\n          src=\"./assets/img/booklib-32x32.png\"\n          alt=\"BookLib\"\n        />\n        <a class=\"navbar-brand\" routerLink=\"/home\" href=\"javascript:void(0);\">\n          <p class=\"bold brand\">\n            BookLib\n          </p>\n        </a>\n      </div>\n    </div>\n    <ul class=\"nav navbar-nav navbar-right\">\n      <li>\n        <popover-container\n          label=\"Sign in\"\n          [show]=\"selected == 'Sign in'\"\n          (selected)=\"selected = $event\"\n        >\n          <sign-in></sign-in>\n        </popover-container>\n      </li>\n      <li>\n        <popover-container\n          label=\"Sign up\"\n          [show]=\"selected == 'Sign up'\"\n          (selected)=\"selected = $event\"\n          [bold]=\"true\"\n        >\n          <sign-up></sign-up>\n        </popover-container>\n      </li>\n      <li class=\"separator hidden-lg hidden-md\"></li>\n    </ul>\n  </div>\n</nav>\n"
        },
        {
            "name": "HomeSectionComponent",
            "id": "component-HomeSectionComponent-0fc5c3355592f8cb28ed5d5345b5a3d4",
            "file": "src/app/home/home-section/home-section.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-section",
            "styleUrls": [
                "./home-section.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home-section.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sectionTitle",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core'\n\n@Component({\n  selector: 'home-section',\n  templateUrl: './home-section.component.html',\n  styleUrls: ['./home-section.component.css'],\n})\nexport class HomeSectionComponent implements OnInit {\n  @Input() sectionTitle: string\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  text-align: center;\n}\n\n.section-img {\n  height: 200px;\n}\n\n.section:after {\n  content: '';\n  display: block;\n  width: 100%;\n  height: 175px;\n  position: absolute;\n  bottom: 0;\n  background: linear-gradient(to bottom, transparent, rgba(245, 245, 245, 1));\n}\n\n.section {\n  position: relative;\n}\n",
                    "styleUrl": "./home-section.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"section section-basic\">\n  <div class=\"container\">\n    <h2>{{ sectionTitle }}</h2>\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ImportComponent",
            "id": "component-ImportComponent-68566cbf4f94c5a071518bdd9e63f1b6",
            "file": "src/app/dashboard/import/import.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "import-cmp",
            "styleUrls": [
                "./import.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "import.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "booksToImport",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "displayAttributesInfo",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayBooksToImport",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "displayTableInfo",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "languages",
                    "defaultValue": "LANGUAGES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tableItems",
                    "defaultValue": "{\n    Cover: true,\n    'Original title': true,\n    Author: true,\n    Year: true,\n    Publisher: true,\n    Language: true,\n    Pages: true,\n    Rating: true,\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "importLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "returnToBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { ANIMATIONS, LANGUAGES } from 'utils/constants'\nimport { ImportService } from 'services/import.service'\nimport { LibraryService } from 'services/library.service'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { omit } from 'lodash'\n\n@Component({\n  moduleId: module.id,\n  selector: 'import-cmp',\n  templateUrl: 'import.component.html',\n  styleUrls: ['./import.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class ImportComponent implements OnInit {\n  languages = LANGUAGES\n  displayTableInfo = false\n  displayAttributesInfo = false\n  displayBooksToImport = true\n  booksToImport = []\n  tableItems = {\n    Cover: true,\n    'Original title': true,\n    Author: true,\n    Year: true,\n    Publisher: true,\n    Language: true,\n    Pages: true,\n    Rating: true,\n  }\n\n  constructor(\n    private importService: ImportService,\n    private libraryService: LibraryService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit() {}\n\n  uploadFile(event) {\n    this.importService.readFile(event.target.files[0]).subscribe(\n      books =>\n        (this.booksToImport = books.map(book => ({\n          ...book,\n          canBeSelected: true,\n          isSelected: true,\n        })))\n    )\n  }\n\n  importLibrary() {\n    this.libraryService.addBooks(\n      this.booksToImport\n        .filter(book => book.isSelected)\n        .map(book => omit(book, ['canBeSelected', 'isSelected']))\n    )\n  }\n\n  returnToBooks() {\n    this.router.navigate(['/dashboard/books'], { relativeTo: this.route })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h5 {\n  margin-bottom: 0;\n}\n\n.header {\n  text-align: center;\n}\n\n.header-collapsable {\n  display: flex;\n  justify-content: space-between;\n}\n\n.instructions {\n  font-size: 14px;\n}\n\n.icon {\n  align-self: center;\n  padding: 0 6px;\n  font-size: 50px;\n}\n\n.pe-7s-info {\n  color: #3fc4e0;\n}\n\n.pe-7s-cloud-upload {\n  color: green;\n}\n\n.pe-7s-attention {\n  color: #e60e09;\n}\n\n.container-with-icon {\n  display: flex;\n  justify-content: left;\n}\n\n.list-group {\n  width: 200px;\n  max-height: 260px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  overflow: auto;\n}\n\n.item {\n  color: #333;\n  font-size: 16px;\n}\n\n.table {\n  border-radius: 6px;\n  width: 100%;\n  background: #f7f7f8;\n  -webkit-box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.125);\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.125);\n}\n\n.no-margin {\n  margin: 4px;\n}\n\n.file-type {\n  font-style: italic;\n  font-size: 0.9em;\n}\n",
                    "styleUrl": "./import.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "importService",
                        "type": "ImportService"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "importService",
                        "type": "ImportService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-content\">\n  <div class=\"container-fluid\">\n    <div class=\"card\" [@card]>\n      <div class=\"header\">\n        <!-- Header -->\n        <h4 class=\"title\">\n          Import library\n        </h4>\n        <hr class=\"no-margin\">\n      </div>\n      <div class=\"content\">\n        <!-- How to -->\n        <div class=\"row\">\n          <div class=\"col-md-12 container-with-icon\">\n            <i class=\"pe-7s-info icon\"></i>\n            <div>\n              <h5>\n                Prepare your file\n              </h5>\n              <p class=\"text-muted instructions\">\n                To import your library from a spreadsheet file (.xlsx, .csv), organize the information from your books according to the\n                structure displayed below (without the headers):\n              </p>\n              <a href=\"#tableInfo\" class=\"collapse-button\" data-toggle=\"collapse\" (click)=\"displayTableInfo = !displayTableInfo\">\n                {{displayTableInfo ? 'Hide' : 'Show'}}\n                <i [ngClass]=\"{'pe-7s-angle-down': !displayTableInfo, 'pe-7s-angle-up': displayTableInfo}\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div class=\"collapse\" id=\"tableInfo\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th class=\"col\">Title</th>\n                  <th class=\"col\">Author</th>\n                  <th class=\"col\">Original title</th>\n                  <th class=\"col\">Publisher</th>\n                  <th class=\"col\">Pages</th>\n                  <th class=\"col\">Year</th>\n                  <th class=\"col\">Language</th>\n                  <th class=\"col\">Rating</th>\n                  <th class=\"col\">Owned</th>\n                  <th class=\"col\">Wishlist</th>\n                  <th class=\"col\">Read</th>\n                  <th class=\"col\">Favorite</th>\n                  <th class=\"col\">Book cover link</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td class=\"col\">My Book</td>\n                <td class=\"col\">John Doe</td>\n                <td class=\"col\">My Book</td>\n                <td class=\"col\">Publisher Inc.</td>\n                <td class=\"col\">300</td>\n                <td class=\"col\">1990</td>\n                <td class=\"col\">English</td>\n                <td class=\"col\">0</td>\n                <td class=\"col\">X</td>\n                <td class=\"col\"></td>\n                <td class=\"col\"></td>\n                <td class=\"col\">X</td>\n                <td class=\"col\">http://link-to-image.com/image.png</td>\n              </tr>\n              <tr>\n                <td class=\"col\">My Book</td>\n                <td class=\"col\">John Doe</td>\n                <td class=\"col\">Mi Libro</td>\n                <td class=\"col\"></td>\n                <td class=\"col\"></td>\n                <td class=\"col\">1990</td>\n                <td class=\"col\">Español</td>\n                <td class=\"col\">2</td>\n                <td class=\"col\"></td>\n                <td class=\"col\"></td>\n                <td class=\"col\">X</td>\n                <td class=\"col\"></td>\n                <td class=\"col\">http://link-to-image.com/image.png</td>\n              </tr>\n              <tr>\n                <td class=\"col\">My Book</td>\n                <td class=\"col\">John Doe</td>\n                <td class=\"col\">Mein Buch</td>\n                <td class=\"col\">Publisher Inc.</td>\n                <td class=\"col\"></td>\n                <td class=\"col\"></td>\n                <td class=\"col\">Deutsch</td>\n                <td class=\"col\">5</td>\n                <td class=\"col\">X</td>\n                <td class=\"col\"></td>\n                <td class=\"col\"></td>\n                <td class=\"col\">X</td>\n                <td class=\"col\"></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <hr>\n        <!-- Attributes -->\n        <div class=\"row\">\n          <div class=\"col-md-12 container-with-icon\">\n            <i class=\"pe-7s-attention icon\"></i>\n            <div>\n              <h5>\n                Configure your attributes\n              </h5>\n              <p class=\"text-muted instructions\">\n                To correctly import your books from a spreadsheet file, use the following formatting for the provided attributes:\n              </p>\n              <a href=\"#attributesInfo\" class=\"collapse-button\" data-toggle=\"collapse\" (click)=\"displayAttributesInfo = !displayAttributesInfo\">\n                {{displayAttributesInfo ? 'Hide' : 'Show'}}\n                <i [ngClass]=\"{'pe-7s-angle-down': !displayAttributesInfo, 'pe-7s-angle-up': displayAttributesInfo}\"></i>\n              </a>\n            </div>\n          </div>\n          <div class=\"collapse col-md-12\" style=\"margin-left: 62px;\" id=\"attributesInfo\">\n            <ul>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Title :</span>\n                  The title of the book <span style=\"color: red; font-style: italic;\">(required)</span>.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Author:</span>\n                  The author of the book <span style=\"color: red; font-style: italic;\">(required)</span>.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Original title:</span>\n                  The title in the original title of the book.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Publisher</span>\n                  The publisher of this version of the book.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Pages:</span>\n                  Page count of this version of the book. Should be a whole number larger than 0.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Year:</span>\n                  The year of publication of the book. Should be a whole number larger than 0.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Language:</span>\n                  The language in which this version of the book was written. The language should be available\n                  in the following list:\n                </p>\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" *ngFor=\"let language of languages\">{{language}}</li>\n                </ul>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Rating:</span>\n                  Your personal rating. Should be a whole number between 0 and 5.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Owned:</span>\n                  Indicates if you own this book or not.\n                  Mark your owned books with an 'X', otherwise leave this field blank.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Wishlist:</span>\n                  Indicates if this book is in your wishlist.\n                  Mark the books in your wishlist with an 'X', otherwise leave this field blank.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Read:</span>\n                  Indicates if you've read this book or not.\n                  Mark the books you've read with an 'X', otherwise leave this field blank.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Favorite:</span>\n                  Indicates if this books if one of your favorites or not.\n                  Mark your favorite books with an 'X', otherwise leave this field blank.\n                </p>\n              </li>\n              <li>\n                <p class=\"text-muted instructions\">\n                  <span class=\"item\">Image link:</span>\n                  Provide an image link to the book cover.\n                </p>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <hr>\n        <!-- Import button -->\n        <div class=\"row\">\n          <div class=\"col-md-12 container-with-icon\">\n            <i class=\"pe-7s-cloud-upload icon\"></i>\n            <div style=\"flex: 1; display: flex;\">\n              <div>\n                <h5>\n                  Import your library\n                </h5>\n                <p class=\"text-muted file-type\">File format: .xlxs, .csv.</p>\n              </div>\n              <button\n                type=\"button\"\n                class=\"btn btn-success\"\n                style=\"width: 260px; margin-left: 20px;\"\n                (click)=\"fileUpload.click()\"\n              >Choose file</button>\n              <input style=\"display: none\" [hidden]=\"true\" #fileUpload type=\"file\" (change)=\"uploadFile($event)\">\n            </div>\n          </div>\n        </div>\n        <hr *ngIf=\"booksToImport.length\">\n        <!-- Books -->\n        <div *ngIf=\"booksToImport.length\" class=\"row\">\n          <div class=\"col-md-12 container-with-icon\">\n            <i class=\"pe-7s-notebook icon\"></i>\n            <div>\n              <h5>\n                Choose your books\n              </h5>\n              <p class=\"text-muted instructions\">\n                Choose which books you want to import:\n              </p>\n              <a href=\"#booksInfo\" class=\"collapse-button\" data-toggle=\"collapse\" (click)=\"displayBooksToImport = !displayBooksToImport\">\n                {{displayBooksToImport ? 'Hide' : 'Show'}}\n                <i [ngClass]=\"{'pe-7s-angle-down': !displayBooksToImport, 'pe-7s-angle-up': displayBooksToImport}\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div id=\"booksInfo\" class=\"collapse in\" style=\"margin-top: 4px;\">\n          <books-display\n            *ngIf=\"booksToImport.length\"\n            [tilesDisplay]=\"false\"\n            [tableDisplayItems]=\"tableItems\"\n            [books]=\"booksToImport\"\n            [selectable]=\"true\"\n          ></books-display>\n          <div *ngIf=\"booksToImport.length\" class=\"row\">\n            <div class=\"col-md-12\">\n              <button\n                type=\"button\"\n                class=\"btn btn-success\"\n                style=\"width: 100%;\"\n                (click)=\"importLibrary()\"\n              >Import library</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LanguageSelectorComponent",
            "id": "component-LanguageSelectorComponent-ad2471b507f7e394350b3f48c83dcfaa",
            "file": "src/app/dashboard/core/language-selector/language-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "language-selector",
            "styleUrls": [
                "./language-selector.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./language-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedLanguage",
                    "line": 22
                },
                {
                    "name": "withLabel",
                    "defaultValue": "true",
                    "line": 23
                }
            ],
            "outputsClass": [
                {
                    "name": "select",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "languageInput",
                    "defaultValue": "new BehaviorSubject<string>(this.languageInputBuffer)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "languageInput$",
                    "defaultValue": "this.languageInput.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "languageInputBuffer",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "languageList",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'languageList', {static: false}"
                        }
                    ]
                },
                {
                    "name": "languages",
                    "defaultValue": "LANGUAGES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "languagesRef",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'languages'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "findLanguage",
                    "args": [
                        {
                            "name": "input",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core'\nimport { LANGUAGES } from 'utils/constants'\nimport { BehaviorSubject } from 'rxjs'\nimport { map, debounceTime } from 'rxjs/operators'\nimport { upperCaseFirstLetter } from 'utils/helpers'\n\n@Component({\n  selector: 'language-selector',\n  templateUrl: './language-selector.component.html',\n  styleUrls: ['./language-selector.component.css'],\n})\nexport class LanguageSelectorComponent implements OnInit {\n  languages = LANGUAGES\n  @Input() selectedLanguage\n  @Input() withLabel = true\n  @Output() select = new EventEmitter<string>()\n\n  @ViewChild('languageList', { static: false }) languageList\n  @ViewChildren('languages') languagesRef\n\n  languageInputBuffer = ''\n  languageInput = new BehaviorSubject<string>(this.languageInputBuffer)\n  languageInput$ = this.languageInput.asObservable()\n\n  ngOnInit() {\n    this.languageInput$\n      .pipe(\n        debounceTime(300),\n        map(input => upperCaseFirstLetter(input))\n      )\n      .subscribe(input => {\n        this.findLanguage(input)\n        this.languageInputBuffer = ''\n      })\n  }\n\n  onKeyUp(event) {\n    this.languageInput.next(\n      (this.languageInputBuffer = this.languageInputBuffer.concat(event.key))\n    )\n  }\n\n  findLanguage(input: string) {\n    const index = this.languages.findIndex(language =>\n      language.startsWith(input)\n    )\n\n    if (index === -1) {\n      return\n    }\n\n    const element = this.languagesRef.toArray()[index].nativeElement\n    this.languageList.nativeElement.scrollTop = element.offsetTop\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "i.tile-icon {\n  font-size: 1.4em;\n}\n\ni.active {\n  color: #333;\n}\n\ni.inactive {\n  color: #c9c9c9;\n}\n\n.dropdown-menu {\n  height: auto;\n  max-height: 200px;\n  overflow-x: hidden;\n}\n",
                    "styleUrl": "./language-selector.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<label *ngIf=\"withLabel\">Language</label>\n<div class=\"dropdown\">\n  <button\n    class=\"btn btn-default dropdown-toggle\"\n    type=\"button\"\n    id=\"dropdownLanguage\"\n    data-toggle=\"dropdown\"\n    (keyup)=\"onKeyUp($event)\"\n  >\n    {{selectedLanguage}}\n    <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownLanguage\" (keyup)=\"onKeyUp($event)\" #languageList>\n    <li *ngFor=\"let language of languages; let i = index\" #languages>\n      <a href=\"javascript:void(0);\" (click)=\"select.emit(language)\">\n        {{language}}\n      </a>\n    </li>\n  </ul>\n</div>"
        },
        {
            "name": "LastAddedBooksComponent",
            "id": "component-LastAddedBooksComponent-2a8058b72e098fd8ff1550d0f5b90768",
            "file": "src/app/dashboard/dashboard-home/last-added-books/last-added-books.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "last-added-books",
            "styleUrls": [
                "./last-added-books.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "last-added-books.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hasBooks",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "latestBooks",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core'\nimport { Book } from 'models/book.model'\nimport { LibraryService } from 'services/library.service'\n\n@Component({\n  moduleId: module.id,\n  selector: 'last-added-books',\n  templateUrl: 'last-added-books.component.html',\n  styleUrls: ['./last-added-books.component.css'],\n})\nexport class LastAddedBooksComponent implements OnInit, OnDestroy {\n  latestBooks: Book[]\n  isLoading = true\n  subscription\n  hasBooks = false\n\n  constructor(private libraryService: LibraryService) {}\n\n  ngOnInit() {\n    this.subscription = this.libraryService.latestBooks$.subscribe(books => {\n      if (!books) {\n        return\n      }\n\n      this.isLoading = false\n      this.latestBooks = books\n      this.hasBooks = this.latestBooks.length > 0\n    })\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".overflow-row {\n  overflow-x: auto;\n  white-space: nowrap;\n  margin: 5px;\n  padding-top: 1px;\n}\n\n.overflow-col {\n  display: inline-block;\n  float: none;\n  width: 30%;\n  padding: 0 5px;\n}\n",
                    "styleUrl": "./last-added-books.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<loading [visible]=\"isLoading\"></loading>\n<div class=\"card\" *ngIf=\"hasBooks\">\n  <div class=\"header\">\n    <h4 class=\"title\">Recently added books</h4>\n  </div>\n  <div class=\"content\">\n    <loading [visible]=\"isLoading\"></loading>\n    <div class=\"row\">\n      <ng-container *ngFor=\"let book of latestBooks; let i = index;\">\n        <div class=\"col-md-3\">\n          <book-card\n            [book]=\"book\"\n            [withButtons]=\"false\"\n            [linkable]=\"true\"\n          ></book-card>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "LibraryNavbarComponent",
            "id": "component-LibraryNavbarComponent-6d3f304cbac2279ff3e3e445cb9706f7",
            "file": "src/app/dashboard/core/library-navbar/library-navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "library-navbar",
            "styleUrls": [
                "library-navbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "library-navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addButtonContent",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "displayPoweredByGr",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "filters",
                    "line": 21,
                    "type": "string[]"
                },
                {
                    "name": "groupings",
                    "line": 20,
                    "type": "string[]"
                },
                {
                    "name": "type",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchBoxItems",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "searchBoxLink",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "searchBoxProps",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "searchBoxSearchProps",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedFilter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedGrouping",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tilesDisplay",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGrouping",
                    "args": [
                        {
                            "name": "grouping",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "grouping",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTilesDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from '@angular/core'\nimport { Router, ActivatedRoute, Params } from '@angular/router'\nimport { upperCaseFirstLetter } from 'utils/helpers'\n\nimport { Book } from 'models/book.model'\nimport { LibraryService } from 'services/library.service'\nimport { Author } from 'models/author.model'\n\n@Component({\n  moduleId: module.id,\n  selector: 'library-navbar',\n  templateUrl: 'library-navbar.component.html',\n  styleUrls: ['library-navbar.component.css'],\n})\nexport class LibraryNavbarComponent implements OnInit, OnDestroy {\n  subscriptions = []\n  tilesDisplay = false\n  selectedGrouping: string\n  selectedFilter: string\n  @Input() groupings: string[]\n  @Input() filters: string[]\n  @Input() addButtonContent: string\n  @Input() displayPoweredByGr: boolean\n  @Input() type: string\n\n  searchBoxItems = []\n  searchBoxProps\n  searchBoxSearchProps\n  searchBoxLink\n\n  books: Book[]\n  authors: Author[]\n\n  get viewQueryParam(): string {\n    return this.route.snapshot.queryParamMap.get('view')\n  }\n\n  get localUrlPath(): string {\n    const splitUrl = this.router.url.split('/')\n    return splitUrl[splitUrl.length - 1].split('?')[0]\n  }\n\n  constructor(\n    public router: Router,\n    private route: ActivatedRoute,\n    private libraryService: LibraryService\n  ) {\n    this.route.queryParams.subscribe(params => {\n      this.selectedGrouping = params['grouping']\n        ? upperCaseFirstLetter(params['grouping'])\n        : 'No grouping'\n\n      this.selectedFilter = params['filter']\n        ? upperCaseFirstLetter(params['filter'])\n        : 'No filter'\n      this.tilesDisplay = !params['view'] || params['view'] === 'tiles'\n    })\n  }\n\n  ngOnInit() {\n    if (this.type === 'authors') {\n      this.libraryService.authors$.subscribe(authors => {\n        this.authors = authors\n        this.searchBoxItems = authors\n        this.searchBoxProps = { main: 'name' }\n        this.searchBoxSearchProps = ['name']\n        this.searchBoxLink = '/dashboard/authors/'\n      })\n    } else {\n      this.subscriptions.push(\n        this.libraryService.books$.subscribe(books => {\n          this.books = books\n          this.searchBoxItems = books\n          this.searchBoxProps = { main: 'title', sub: 'author' }\n          this.searchBoxSearchProps = ['title', 'original', 'author']\n          this.searchBoxLink = '/dashboard/books/'\n        })\n      )\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe())\n  }\n\n  toggleTilesDisplay() {\n    const queryParams: Params = {\n      ...this.route.snapshot.queryParams,\n      view:\n        !this.viewQueryParam || this.viewQueryParam === 'tiles'\n          ? 'list'\n          : 'tiles',\n    }\n    this.router.navigate(['.'], { relativeTo: this.route, queryParams })\n  }\n\n  setGrouping(grouping: string) {\n    const queryParams: Params = {\n      ...this.route.snapshot.queryParams,\n      grouping:\n        grouping === 'No grouping' ? null : grouping.toLocaleLowerCase(),\n    }\n    this.router.navigate([`.`], {\n      relativeTo: this.route,\n      queryParams,\n    })\n  }\n\n  setFilter(filter: string) {\n    const queryParams: Params = {\n      ...this.route.snapshot.queryParams,\n      filter: filter === 'No filter' ? null : filter.toLocaleLowerCase(),\n    }\n    this.router.navigate(['.'], {\n      relativeTo: this.route,\n      queryParams,\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\n  display: flex;\n  align-items: center;\n}\n\n.content {\n  padding: 0;\n}\n\n.nav {\n  display: inline-flex;\n  width: 100%;\n}\n\n.library-nav-right {\n  width: 100%;\n  padding-right: 5px;\n}\n\n.library-nav-right > ul {\n  float: right;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: inline-flex;\n}\n\n.library-nav-btn > a {\n  display: block;\n  margin: 0;\n  padding: 20px 20px;\n  border-right: 1px solid #d8d8d8;\n}\n\n@media only screen and (max-width: 600px) {\n  .nav {\n    display: block;\n  }\n\n  .library-nav-btn > a {\n    border-right: 0;\n  }\n\n  .library-nav-right > ul {\n    display: block;\n    width: 100%;\n  }\n}\n\n.library-nav-btn > a:hover {\n  background-color: #d8d8d8;\n}\n\n.library-nav-btn.active > a {\n  background-color: #f7f7f7;\n}\n\n/* keeps the tab background white */\n.library-nav-btn:hover > a {\n  background: #f2f2f2;\n  text-shadow: none;\n}\n\n.library-nav-btn.left > a {\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n",
                    "styleUrl": "library-navbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "viewQueryParam": {
                    "name": "viewQueryParam",
                    "getSignature": {
                        "name": "viewQueryParam",
                        "type": "string",
                        "returnType": "string",
                        "line": 34
                    }
                },
                "localUrlPath": {
                    "name": "localUrlPath",
                    "getSignature": {
                        "name": "localUrlPath",
                        "type": "string",
                        "returnType": "string",
                        "line": 38
                    }
                }
            },
            "templateData": "<!-- Navbar -->\n<div class=\"card\">\n  <div class=\"content\">\n    <nav class=\"navbar\">\n      <ul class=\"nav navbar-nav\">\n        <!-- Buttons -->\n        <!-- DO NOT ERASE -->\n        <!-- <li [ngClass]=\"{'active': localUrlPath === 'books', 'library-nav-btn': true, 'left': true}\">\n          <a href=\"javascript:void(0);\" routerLink=\"./books\">\n          <i class=\"pe-7s-bookmarks\" style=\"vertical-align:middle; font-size: 1.4em;\"></i> Books</a>\n        </li>\n        <li [ngClass]=\"{'active': localUrlPath === 'collections', 'library-nav-btn': true}\">\n          <a href=\"javascript:void(0);\" routerLink=\"./collections\">\n          <i class=\"pe-7s-box1\" style=\"vertical-align:middle; font-size: 1.4em;\"></i> Collections</a>\n        </li> -->\n        <!-- Search -->\n        <li style=\"text-align: right\">\n          <search-box\n            [withMargin]=\"true\"\n            [items]=\"searchBoxItems\"\n            [props]=\"searchBoxProps\"\n            [searchProps]=\"searchBoxSearchProps\"\n            [link]=\"searchBoxLink\"\n          ></search-box>\n        </li>\n        <!-- Grouping -->\n        <li *ngIf=\"groupings && groupings.length\">\n          <div class=\"dropdown\">\n            <button\n              class=\"btn btn-default dropdown-toggle\"\n              type=\"button\"\n              id=\"dropdownMenu1\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"true\"\n            >\n              {{ selectedGrouping }}\n              <span class=\"caret\"></span>\n            </button>\n            <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n              <li style=\"padding: 8px 16px\">Select grouping</li>\n              <li role=\"separator\" class=\"divider\"></li>\n              <li *ngFor=\"let grouping of groupings\">\n                <a href=\"javascript:void(0);\" (click)=\"setGrouping(grouping)\">\n                  {{ grouping }}\n                </a>\n              </li>\n            </ul>\n          </div>\n        </li>\n        <!-- Filtering -->\n        <li *ngIf=\"filters && filters.length\">\n          <div class=\"dropdown\">\n            <button\n              class=\"btn btn-default dropdown-toggle\"\n              type=\"button\"\n              id=\"dropdownMenu2\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"true\"\n            >\n              {{ selectedFilter }}\n              <span class=\"caret\"></span>\n            </button>\n            <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n              <li style=\"padding: 8px 16px\">Select filter</li>\n              <li role=\"separator\" class=\"divider\"></li>\n              <li *ngFor=\"let filter of filters\">\n                <a href=\"javascript:void(0);\" (click)=\"setFilter(filter)\">\n                  {{ filter }}\n                </a>\n              </li>\n            </ul>\n          </div>\n        </li>\n        <li class=\"library-nav-right\">\n          <ul style=\"height: 100%\">\n            <li *ngIf=\"addButtonContent\" class=\"text-center\">\n              <!-- Tiles or Table -->\n              <button\n                type=\"button\"\n                class=\"btn btn-default library-nav-tile\"\n                (click)=\"toggleTilesDisplay()\"\n                style=\"margin: 10px 5px\"\n                [tooltip]=\"\n                  tilesDisplay ? 'Display as tables' : 'Display as tiles'\n                \"\n                [tooltipAnimation]=\"true\"\n                placement=\"top\"\n              >\n                <span\n                  *ngIf=\"tilesDisplay\"\n                  class=\"ti-view-list\"\n                  aria-hidden=\"true\"\n                ></span>\n                <span\n                  *ngIf=\"!tilesDisplay\"\n                  class=\"ti-layout-grid2\"\n                  aria-hidden=\"true\"\n                ></span>\n              </button>\n              <!-- Add book -->\n              <button\n                type=\"button\"\n                class=\"btn btn-success library-nav-tile\"\n                routerLink=\"{{ router.url.split('?')[0] }}/new\"\n                style=\"margin: 10px 5px\"\n              >\n                <span class=\"ti-plus\" aria-hidden=\"true\"></span>\n                {{ addButtonContent }}\n              </button>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </nav>\n  </div>\n</div>\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-457e092a4b38b83ca9711400dca9273e",
            "file": "src/app/dashboard/core/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "loading",
            "styleUrls": [
                "loading.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  // tslint:disable-next-line:component-selector\n  selector: 'loading',\n  templateUrl: 'loading.component.html',\n  styleUrls: ['loading.component.css'],\n})\nexport class LoadingComponent implements OnInit {\n  @Input() visible = false\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  padding: 60px 0;\n  position: relative;\n  margin: 20px 0;\n  width: 100%;\n  height: 80vh;\n}\n",
                    "styleUrl": "loading.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" *ngIf=\"visible\">\n  <ngx-loading [show]=\"visible\"></ngx-loading>\n</div>"
        },
        {
            "name": "LoadingOverlayComponent",
            "id": "component-LoadingOverlayComponent-23239eded026e0d1cf0076b7dd397831",
            "file": "src/app/dashboard/core/loading-overlay/loading-overlay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "loading-overlay",
            "styleUrls": [
                "loading-overlay.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "loading-overlay.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  // tslint:disable-next-line:component-selector\n  selector: 'loading-overlay',\n  templateUrl: 'loading-overlay.component.html',\n  styleUrls: ['loading-overlay.component.css'],\n})\nexport class LoadingOverlayComponent implements OnInit {\n  @Input() visible = false\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loader {\n  position: absolute; /* Sit on top of the page content */\n  top: 5px;\n  left: 20px;\n  right: 20px;\n  bottom: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(0,0,0,0.3); /* Black background with opacity */\n  z-index: 2; /* Specify a stack order in case you're using a different order for other elements */\n}",
                    "styleUrl": "loading-overlay.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"visible\" class=\"loader\">\n  <loading [visible]=\"visible\"></loading>\n</div>"
        },
        {
            "name": "MatchBookComponent",
            "id": "component-MatchBookComponent-abe3722c8a58f71792389121e94641aa",
            "file": "src/app/dashboard/books/match-book/match-book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "match-book",
            "styleUrls": [
                "./match-book.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "match-book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "libraryBook",
                    "line": 22,
                    "type": "Book"
                },
                {
                    "name": "selectedBook",
                    "line": 21,
                    "type": "Book"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "inputFields",
                    "defaultValue": "['title', 'author', 'publisher', 'year', 'pages']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "parseValues",
                    "args": [
                        {
                            "name": "values",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "return",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "values",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { Book } from 'models/book.model'\nimport { ANIMATIONS } from 'utils/constants'\nimport { LibraryService } from 'services/library.service'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { map, mergeMap } from 'rxjs/operators'\nimport { combineLatest } from 'rxjs'\nimport { GoodreadsService } from 'services/goodreads.service'\nimport { parseBook } from 'utils/helpers'\nimport { Location } from '@angular/common'\n\n@Component({\n  moduleId: module.id,\n  selector: 'match-book',\n  templateUrl: 'match-book.component.html',\n  styleUrls: ['./match-book.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class MatchBookComponent implements OnInit {\n  @Input() selectedBook: Book\n  @Input() libraryBook: Book\n  form: FormGroup\n  isLoading = true\n  inputFields = ['title', 'author', 'publisher', 'year', 'pages']\n\n  get goodreadsId(): string {\n    const splitUrl = this.router.url.split('?')[0].split('/')\n    return splitUrl[splitUrl.length - 1]\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private goodreadsService: GoodreadsService,\n    private libraryService: LibraryService,\n    private location: Location,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    combineLatest(\n      this.goodreadsService.getBook(+this.goodreadsId).pipe(\n        map<any, any>(\n          book =>\n            ({\n              ...parseBook(book),\n              canBeSelected: true,\n              isSelected: true,\n            } as Book)\n        )\n      ),\n      this.route.queryParams.pipe(\n        map(params => params.libraryBookId),\n        mergeMap(id => this.libraryService.findBook(id))\n      )\n    ).subscribe(([grBook, lbBook]) => {\n      this.isLoading = false\n      this.selectedBook = grBook as Book\n      this.libraryBook = lbBook\n      this.form = this.fb.group({\n        title: [\n          this.libraryBook.title || this.selectedBook.title,\n          Validators.required,\n        ],\n        author: [\n          this.libraryBook.author || this.selectedBook.author,\n          Validators.required,\n        ],\n        publisher:\n          this.libraryBook.publisher || this.selectedBook.publisher || '',\n        year: this.libraryBook.year || this.selectedBook.year || 0,\n        pages: this.libraryBook.pages || this.selectedBook.pages || 0,\n        cover: this.libraryBook.imageLarge || this.selectedBook.imageLarge || 0,\n      })\n    })\n  }\n\n  return() {\n    this.location.back()\n  }\n\n  submit(values) {\n    const updatedBook = {\n      ...this.selectedBook,\n      ...this.libraryBook,\n      ...this.parseValues(values),\n    }\n    this.libraryService\n      .updateBook(updatedBook)\n      .then(() => this.router.navigate(['/dashboard/books']))\n  }\n\n  parseValues(values) {\n    const props = Object.keys(values)\n    props.forEach(prop => (values[prop] = values[prop].split('_#')[0]))\n    values.year = +values.year\n    values.pages = +values.pages\n    values.imageLarge = values.cover\n    return values\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 4px 0;\n}\n\n.option-wrapper {\n  flex: 1;\n  display: flex;\n  justify-content: left;\n  align-items: center;\n  padding: 4px;\n  border-radius: 4px;\n}\n\n.option {\n  flex: 1;\n  display: flex;\n  justify-content: left;\n  align-items: center;\n  cursor: pointer;\n  text-transform: none;\n  color: #333;\n  border-radius: 4px;\n}\n\n.option-wrapper input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n  margin: 4px;\n  margin-bottom: 8px;\n}\n\n.option-wrapper input:checked ~ .option {\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(24, 181, 24, 1);\n  background: #ecfdef;\n}\n\n.option-wrapper input:checked ~ .option:hover {\n  background: #ecfdef;\n}\n\n.img-unavailable {\n  opacity: 0.1;\n}\n\n.option-wrapper p {\n  margin: 0;\n}\n\n.icon {\n  min-width: 48px;\n  padding: 6px;\n  text-align: center;\n}\n\n.icon .gr {\n  height: 26px;\n}\n\n.icon .booklib {\n  height: 32px;\n}\n\n.unavailable {\n  font-style: italic;\n  color: #cacaca;\n}\n\n.field {\n  font-size: 14px;\n}\n\n.cover {\n  height: 200px;\n}",
                    "styleUrl": "./match-book.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goodreadsService",
                        "type": "GoodreadsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "goodreadsId": {
                    "name": "goodreadsId",
                    "getSignature": {
                        "name": "goodreadsId",
                        "type": "string",
                        "returnType": "string",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"card\">\n  <div class=\"header\">\n    <h4 class=\"title\">Import book</h4>\n    <powered-by-goodreads></powered-by-goodreads>\n  </div>\n  <loading [visible]=\"isLoading\"></loading>\n  <div class=\"content\" *ngIf=\"!isLoading && libraryBook && selectedBook\">\n    <div class=\"row\" style=\"text-align: left\">\n      <div class=\"col-md-12\">\n        <hr />\n        <p>\n          This process will link your book in BookLib to a book in the Goodreads\n          database.<br />\n          All data that you edit will not affect the Goodreads book entry and\n          will only be seen by yourself.\n        </p>\n        <hr />\n        <p>\n          Select which information you want to keep and which you want to\n          overwrite with data from Goodreads.\n        </p>\n      </div>\n    </div>\n    <form [formGroup]=\"form\" (ngSubmit)=\"submit(form.value)\">\n      <div class=\"row\" *ngFor=\"let field of inputFields; let i = index\">\n        <div class=\"col-xs-12\">\n          <hr />\n          <label class=\"field\">{{ field }}:</label>\n          <div class=\"row\">\n            <label class=\"option-wrapper col-md-6\">\n              <input\n                type=\"radio\"\n                [id]=\"field1\"\n                formControlName=\"{{ field }}\"\n                [checked]=\"!!libraryBook[field]\"\n                [value]=\"libraryBook[field] + '_#1'\"\n              />\n              <div class=\"option\">\n                <div class=\"icon\">\n                  <img\n                    [ngClass]=\"{ 'img-unavailable': !libraryBook[field] }\"\n                    class=\"booklib\"\n                    src=\"/assets/img/angular.png\"\n                  />\n                </div>\n                <p [ngClass]=\"{ unavailable: !libraryBook[field] }\">\n                  {{ libraryBook[field] || 'Not available' }}\n                </p>\n              </div>\n            </label>\n            <label class=\"option-wrapper col-md-6\">\n              <input\n                type=\"radio\"\n                [id]=\"field2\"\n                formControlName=\"{{ field }}\"\n                [checked]=\"!libraryBook[field] && selectedBook[field]\"\n                [value]=\"selectedBook[field] + '_#2'\"\n              />\n              <div class=\"option\">\n                <div class=\"icon\">\n                  <img\n                    [ngClass]=\"{ 'img-unavailable': !selectedBook[field] }\"\n                    class=\"gr\"\n                    src=\"/assets/img/goodreads_icon_32x32.png\"\n                  />\n                </div>\n                <p [ngClass]=\"{ unavailable: !selectedBook[field] }\">\n                  {{ selectedBook[field] || 'Not available' }}\n                </p>\n              </div>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <hr />\n          <label class=\"field\">Cover:</label>\n          <div class=\"row\">\n            <label class=\"option-wrapper col-md-6\">\n              <input\n                type=\"radio\"\n                [id]=\"field1\"\n                formControlName=\"cover\"\n                [checked]=\"!!libraryBook.imageLarge\"\n                [value]=\"libraryBook.imageLarge + '_#1'\"\n              />\n              <div class=\"option\">\n                <div class=\"icon\">\n                  <img\n                    [ngClass]=\"{ 'img-unavailable': !libraryBook.imageLarge }\"\n                    class=\"booklib\"\n                    src=\"/assets/img/angular.png\"\n                  />\n                </div>\n                <img\n                  *ngIf=\"!!libraryBook.imageLarge\"\n                  class=\"cover\"\n                  [ngClass]=\"{ unavailable: !libraryBook.imageLarge }\"\n                  [src]=\"libraryBook.imageLarge\"\n                />\n                <p\n                  [ngClass]=\"{ unavailable: !libraryBook.imageLarge }\"\n                  *ngIf=\"!libraryBook.imageLarge\"\n                >\n                  Not available\n                </p>\n              </div>\n            </label>\n            <label class=\"option-wrapper col-md-6\">\n              <input\n                type=\"radio\"\n                [id]=\"field2\"\n                formControlName=\"cover\"\n                [checked]=\"!libraryBook.imageLarge && selectedBook.imageLarge\"\n                [value]=\"selectedBook.imageLarge + '_#2'\"\n              />\n              <div class=\"option\">\n                <div class=\"icon\">\n                  <img\n                    [ngClass]=\"{ 'img-unavailable': !selectedBook.imageLarge }\"\n                    class=\"gr\"\n                    src=\"/assets/img/goodreads_icon_32x32.png\"\n                  />\n                </div>\n                <img\n                  *ngIf=\"!!selectedBook.imageLarge\"\n                  class=\"cover\"\n                  [ngClass]=\"{ unavailable: !selectedBook.imageLarge }\"\n                  [src]=\"selectedBook.imageLarge\"\n                />\n                <p\n                  [ngClass]=\"{ unavailable: !selectedBook.imageLarge }\"\n                  *ngIf=\"!selectedBook.imageLarge\"\n                >\n                  Not available\n                </p>\n              </div>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <!-- Buttons -->\n      <hr />\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <button\n            type=\"button\"\n            class=\"btn btn-default\"\n            style=\"width: 100%\"\n            (click)=\"return()\"\n          >\n            <i class=\"pe-7s-back\"></i>\n            Cancel\n          </button>\n        </div>\n        <div class=\"col-md-6\">\n          <button\n            type=\"button\"\n            class=\"btn btn-success\"\n            style=\"width: 100%\"\n            (click)=\"submit(form.value)\"\n          >\n            <i class=\"pe-7s-diskette\"></i>\n            Save\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-d70a9386c85075e77b5e5da05dddc4e7",
            "file": "src/app/dashboard/core/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "cancel",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "content",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "onAccept",
                    "line": 18,
                    "type": "function"
                },
                {
                    "name": "title",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "withCancel",
                    "defaultValue": "true",
                    "line": 17
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modalRef",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalTemplate', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "f",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "f",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, TemplateRef, OnInit, Input, ViewChild } from '@angular/core'\nimport { BsModalService } from 'ngx-bootstrap/modal'\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service'\n\n@Component({\n  moduleId: module.id,\n  // tslint:disable-next-line:component-selector\n  selector: 'modal',\n  templateUrl: 'modal.component.html',\n  styleUrls: ['./modal.component.css'],\n})\nexport class ModalComponent implements OnInit {\n  @Input() title: string\n  @Input() content: string\n  @Input() cancel: string\n  @Input() accept: string\n  @Input() withCancel = true\n  @Input() onAccept: () => {}\n  modalRef: BsModalRef\n\n  @ViewChild('modalTemplate', { static: false }) template: TemplateRef<any>\n\n  constructor(private modalService: BsModalService) {}\n\n  openModal() {\n    this.modalRef = this.modalService.show(this.template)\n  }\n\n  closeModal(f: () => {}) {\n    this.modalRef.hide()\n    if (f) {\n      f()\n    }\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "BsModalService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Modal -->\n<ng-template #modalTemplate>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">{{ title }}</h4>\n    <button type=\"button\" class=\"close pull-right\" (click)=\"closeModal()\">\n      <span>&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    {{ content }}\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      *ngIf=\"withCancel\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      data-dismiss=\"modal\"\n      (click)=\"closeModal()\"\n    >\n      {{ cancel }}\n    </button>\n    <button\n      *ngIf=\"onAccept\"\n      type=\"button\"\n      class=\"btn btn-success\"\n      data-dismiss=\"modal\"\n      (click)=\"closeModal(onAccept)\"\n    >\n      {{ accept }}\n    </button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-429ee00ec97375a00169dc4d7d010770",
            "file": "src/app/dashboard/shared/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "navbar-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "button",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navbar-cmp', {static: false}"
                        }
                    ]
                },
                {
                    "name": "sidebarVisible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "toggleButton",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "sidebarToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ElementRef } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { AuthService } from 'services/auth.service'\n\n@Component({\n  moduleId: module.id,\n  selector: 'navbar-cmp',\n  templateUrl: 'navbar.component.html',\n})\nexport class NavbarComponent implements OnInit {\n  private toggleButton\n  private sidebarVisible: boolean\n\n  @ViewChild('navbar-cmp', { static: false }) button\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private element: ElementRef\n  ) {\n    this.sidebarVisible = false\n  }\n\n  ngOnInit() {\n    const navbar: HTMLElement = this.element.nativeElement\n    this.toggleButton = navbar.getElementsByClassName('navbar-toggle')[0]\n  }\n\n  getTitle() {\n    const splitUrl = this.router.url.split('/')\n    return splitUrl[2]\n      .split('#')[0]\n      .replace(/^\\w/, chr => chr.toUpperCase())\n      .split('?')[0]\n  }\n\n  sidebarToggle() {\n    const toggleButton = this.toggleButton\n    const body = document.getElementsByTagName('body')[0]\n\n    if (this.sidebarVisible === false) {\n      setTimeout(() => {\n        toggleButton.classList.add('toggled')\n      }, 500)\n      body.classList.add('nav-open')\n      this.sidebarVisible = true\n    } else {\n      this.toggleButton.classList.remove('toggled')\n      this.sidebarVisible = false\n      body.classList.remove('nav-open')\n    }\n  }\n\n  signOut() {\n    this.authService.logout()\n  }\n\n  navigateTo() {\n    this.router.navigate(['/dashboard/' + this.getTitle().toLowerCase()])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-default\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle\" (click)=\"sidebarToggle()\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar bar1\"></span>\n        <span class=\"icon-bar bar2\"></span>\n        <span class=\"icon-bar bar3\"></span>\n      </button>\n      <a\n        class=\"navbar-brand\"\n        href=\"javascript:void(0);\"\n        (click)=\"navigateTo()\"\n      >{{getTitle()}}</a>\n    </div>\n    <div class=\"collapse navbar-collapse\">\n      <!-- <ul class=\"nav navbar-nav navbar-left\">\n        <li class=\"dropdown\">\n          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n            <i class=\"fa fa-globe\"></i>\n            <b class=\"caret\"></b>\n            <span class=\"notification hidden-sm hidden-xs\">5</span>\n            <p class=\"hidden-lg hidden-md\">\n                5 Notifications\n                <b class=\"caret\"></b>\n            </p>\n          </a>\n          <ul class=\"dropdown-menu\">\n            <li><a href=\"#\">Notification 1</a></li>\n            <li><a href=\"#\">Notification 2</a></li>\n            <li><a href=\"#\">Notification 3</a></li>\n            <li><a href=\"#\">Notification 4</a></li>\n            <li><a href=\"#\">Another notification</a></li>\n          </ul>\n        </li>\n      </ul> -->\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li>\n          <a href=\"javascript:void(0);\" (click)=\"signOut()\">\n            <p>Log out</p>\n          </a>\n        </li>\n        <li class=\"separator hidden-lg hidden-md\"></li>\n      </ul>\n    </div>\n  </div>\n</nav>\n"
        },
        {
            "name": "NoBooksComponent",
            "id": "component-NoBooksComponent-1dd8535bf3031bb17d980405c3d260c5",
            "file": "src/app/dashboard/books/no-books/no-books.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "no-books",
            "styleUrls": [
                "no-books.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "no-books.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_preventSubmit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "book",
                    "defaultValue": "{} as Book",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "buttonsComponent",
                    "type": "BookButtonsComponent",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BookButtonsComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "displayAll",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "genres",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getGenres",
                    "args": [
                        {
                            "name": "genres",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "genres",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginGoodreads",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "values",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { BookButtonsComponent } from '../../core/book-buttons/book-buttons.component'\nimport { Book } from 'models/book.model'\nimport { LibraryService } from 'services/library.service'\nimport { AuthService } from 'services/auth.service'\nimport { cleanFormValues } from 'utils/helpers'\n\n@Component({\n  moduleId: module.id,\n  selector: 'no-books',\n  templateUrl: 'no-books.component.html',\n  styleUrls: ['no-books.component.css'],\n})\nexport class NoBooksComponent implements OnInit {\n  form: FormGroup\n  genres: string[]\n  tags: string[]\n  selectedLanguage: string\n  book = {} as Book\n  displayAll = false\n  _preventSubmit: boolean\n\n  @ViewChild(BookButtonsComponent, { static: false })\n  buttonsComponent: BookButtonsComponent\n\n  set preventSubmit(value) {\n    this._preventSubmit = value\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private libraryService: LibraryService,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.form = this.fb.group({\n      title: ['', Validators.required],\n      original: '',\n      author: ['', Validators.required],\n      publisher: '',\n      year: 0,\n      pages: 0,\n      notes: '',\n      rating: 0,\n    })\n  }\n\n  ngOnInit() {\n    this.genres = []\n    this.selectedLanguage = 'Select a language'\n  }\n\n  getGenres(genres: string[]) {\n    this.genres = genres\n  }\n\n  submit(values) {\n    const newValues = {\n      date: new Date().toISOString(),\n      ...cleanFormValues(values),\n      ...this.buttonsComponent.getValues(),\n    }\n\n    Object.assign(this.book, newValues)\n\n    console.log('Adding book', this.book)\n    this.libraryService.addBook(this.book)\n  }\n\n  loginGoodreads() {\n    this.authService.goodreadsId.subscribe(goodreadsId => {\n      if (goodreadsId) {\n        this.router.navigate(['/dashboard/goodreads'])\n      } else {\n        this.authService.loginGoodreads('/dashboard/books')\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  margin: 4px;\n}\n\n.collapse-button {\n  display: flex;\n  align-items: center;\n}\n\n.collapse-button > i {\n  font-size: 28px;\n}\n\n.label {\n  font-size: 12px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #9a9a9a;\n  padding: 0;\n}\n",
                    "styleUrl": "no-books.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "preventSubmit": {
                    "name": "preventSubmit",
                    "setSignature": {
                        "name": "preventSubmit",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"card\" style=\"text-align: center;\">\n  <!-- Header -->\n  <div class=\"header\">\n    <img\n      src=\"/assets/img/booklib-128x128.png\"\n      alt=\"Logo\"\n      style=\"padding: 40px;\"\n    />\n    <h1 class=\"title\">Let's get started with your library!</h1>\n  </div>\n  <!-- Content -->\n  <div class=\"content\">\n    <p>Start your library by adding a book...</p>\n    <!-- Form -->\n    <form\n      style=\"text-align: left;\"\n      [formGroup]=\"form\"\n      (ngSubmit)=\"submit(form.value)\"\n    >\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2\">\n          <div class=\"card\">\n            <div class=\"content\">\n              <!-- Title -->\n              <div\n                class=\"form-group\"\n                [ngClass]=\"{\n                  'has-error':\n                    !form.controls['title'].valid &&\n                    form.controls['title'].touched\n                }\"\n              >\n                <label for=\"title\">Book Title</label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  formControlName=\"title\"\n                  placeholder=\"Title\"\n                />\n                <span\n                  class=\"help-block\"\n                  *ngIf=\"\n                    !form.controls['title'].valid &&\n                    form.controls['title'].touched\n                  \"\n                  >Please enter a valid book title.</span\n                >\n              </div>\n              <!-- Author -->\n              <div\n                class=\"form-group\"\n                [ngClass]=\"{\n                  'has-error':\n                    !form.controls['author'].valid &&\n                    form.controls['author'].touched\n                }\"\n              >\n                <label>Author</label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  formControlName=\"author\"\n                  placeholder=\"Author\"\n                />\n                <span\n                  class=\"help-block\"\n                  *ngIf=\"\n                    !form.controls['author'].valid &&\n                    form.controls['author'].touched\n                  \"\n                  >Please enter a valid author name.</span\n                >\n              </div>\n              <div class=\"row\">\n                <!-- Language -->\n                <div class=\"col-md-4\">\n                  <div class=\"form-group\">\n                    <language-selector\n                      [selectedLanguage]=\"selectedLanguage\"\n                      (select)=\"selectedLanguage = $event\"\n                    ></language-selector>\n                  </div>\n                </div>\n                <!-- Buttons -->\n                <div class=\"col-md-4\">\n                  <div class=\"form-group\">\n                    <book-buttons></book-buttons>\n                  </div>\n                </div>\n                <!-- Year -->\n                <div class=\"col-md-2\">\n                  <div class=\"form-group\">\n                    <label>Year</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"Year\"\n                      formControlName=\"year\"\n                    />\n                  </div>\n                </div>\n                <!-- Pages -->\n                <div class=\"col-md-2\">\n                  <div class=\"form-group\">\n                    <label>Pages</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      formControlName=\"pages\"\n                    />\n                  </div>\n                </div>\n              </div>\n              <!-- !row -->\n              <div class=\"row\">\n                <!-- More options toggle -->\n                <div class=\"col-md-12\" style=\"text-align: right;\">\n                  <a\n                    href=\"#moreOptions\"\n                    class=\"collapse-button\"\n                    data-toggle=\"collapse\"\n                    (click)=\"displayAll = !displayAll\"\n                  >\n                    <div class=\"label\">More options</div>\n                    <i\n                      [ngClass]=\"{\n                        'pe-7s-angle-down': !displayAll,\n                        'pe-7s-angle-up': displayAll\n                      }\"\n                    ></i>\n                  </a>\n                  <hr />\n                </div>\n              </div>\n              <!-- More options -->\n              <div class=\"collapse\" id=\"moreOptions\">\n                <!-- Original title -->\n                <div class=\"form-group\">\n                  <label>Original Title</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"Original version title\"\n                    formControlName=\"original\"\n                  />\n                </div>\n                <!-- Second row -->\n                <div class=\"row\">\n                  <!-- Publisher -->\n                  <div class=\"col-md-5\">\n                    <div class=\"form-group\">\n                      <label>Publisher</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        placeholder=\"Publisher\"\n                        formControlName=\"publisher\"\n                      />\n                    </div>\n                  </div>\n                  <!-- Genres -->\n                  <div class=\"col-md-4\">\n                    <div class=\"form-group\">\n                      <book-tags\n                        title=\"Genres\"\n                        placeholder=\"Add genre...\"\n                        iconClass=\"pe-7s-folder\"\n                        [items]=\"genres\"\n                        (getItems)=\"getGenres($event)\"\n                        (hasFocus)=\"preventSubmit = $event\"\n                      ></book-tags>\n                    </div>\n                  </div>\n                  <!-- Rating -->\n                  <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                      <label>Rating</label><br />\n                      <rating\n                        style=\"font-size: 20px\"\n                        formControlName=\"rating\"\n                        [titles]=\"['', '', '', '', '']\"\n                      ></rating>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Submit -->\n              <hr />\n              <div style=\"text-align: center;\">\n                <button\n                  type=\"submit\"\n                  class=\"btn btn-success\"\n                  [disabled]=\"!form.valid\"\n                >\n                  Start your library!\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n    <p>... or import it!</p>\n    <div class=\"row\">\n      <div class=\"col-md-4 col-md-offset-4\" style=\"padding: 4px 0\">\n        <button\n          type=\"button\"\n          style=\"width: 100%\"\n          class=\"btn btn-default\"\n          (click)=\"loginGoodreads()\"\n        >\n          <img\n            src=\"/assets/img/goodreads_icon_32x32.png\"\n            style=\"height: 100%\"\n          />\n          Import from Goodreads\n        </button>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-4 col-md-offset-4\" style=\"padding: 4px 0\">\n        <button\n          type=\"button\"\n          style=\"width: 100%\"\n          class=\"btn btn-default\"\n          routerLink=\"/dashboard/import\"\n        >\n          Import from file\n        </button>\n      </div>\n    </div>\n    <p class=\"text-muted\" style=\"font-style: italic; font-size: 0.9em;\">\n      File format: .xlxs, .csv.\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "PageNavigatorComponent",
            "id": "component-PageNavigatorComponent-142c2884e731c4909e21a1341a969fdb",
            "file": "src/app/dashboard/core/page-navigator/page-navigator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "page-navigator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "page-navigator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "location",
                    "type": "Location",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scrollToAnchor",
                    "defaultValue": "scrollToAnchor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { Location } from '@angular/common'\nimport { scrollToAnchor } from 'utils/helpers'\n\n@Component({\n  moduleId: module.id,\n  selector: 'page-navigator',\n  templateUrl: 'page-navigator.component.html',\n  styleUrls: [],\n})\nexport class PageNavigatorComponent implements OnInit {\n  scrollToAnchor = scrollToAnchor\n\n  constructor(public location: Location) {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"nav-top\" class=\"row justify-content-between\">\n  <div class=\"col-xs-6\">\n    <a href=\"javascript:void(0);\" (click)=\"this.location.back();\">← Return</a>\n  </div>\n  <div class=\"col-xs-6\" align=\"right\">\n    <a href=\"javascript:void(0);\" (click)=\"scrollToAnchor('nav-bottom', 100)\">↓ Bottom</a>\n  </div>\n</div>\n<ng-content></ng-content>\n<div id=\"nav-bottom\" class=\"row justify-content-end\">\n  <div class=\"col-xs-12\" align=\"right\">\n    <a href=\"javascript:void(0);\" (click)=\"scrollToAnchor('nav-top', 100)\">↑ Top</a>\n  </div>\n</div>\n"
        },
        {
            "name": "PagesComponent",
            "id": "component-PagesComponent-d48cb38cdc081507ddb919fac112e256",
            "file": "src/app/dashboard/core/pages/pages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "pages",
            "styleUrls": [
                "./pages.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "pages.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "1",
                    "line": 18
                },
                {
                    "name": "withRoute",
                    "defaultValue": "true",
                    "line": 20
                }
            ],
            "outputsClass": [
                {
                    "name": "nextSelectedPage",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pages",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedPage",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n} from '@angular/core'\nimport { ActivatedRoute, Params, Router } from '@angular/router'\n\n@Component({\n  moduleId: module.id,\n  selector: 'pages',\n  templateUrl: 'pages.component.html',\n  styleUrls: ['./pages.component.css'],\n})\nexport class PagesComponent implements OnInit, OnChanges {\n  @Input() count = 1\n  selectedPage = 1\n  @Input() withRoute = true\n  @Output() nextSelectedPage = new EventEmitter<number>()\n  pages = []\n\n  constructor(public router: Router, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    if (this.withRoute) {\n      this.route.queryParams.subscribe(\n        params => (this.selectedPage = params.page ? +params.page : 1)\n      )\n    }\n  }\n\n  ngOnChanges() {\n    this.pages = new Array(this.count).fill(0).map((_x, i) => i + 1)\n    if (this.selectedPage > this.count) {\n      this.selectedPage = this.count\n    }\n  }\n\n  onClick(page: number) {\n    const lastPage = page - 1 === this.pages[this.pages.length - 1]\n    const firstPage = page === 0\n    if (firstPage || lastPage) {\n      return\n    }\n    if (this.withRoute) {\n      const queryParams: Params = {\n        ...this.route.snapshot.queryParams,\n        page,\n      }\n      this.router.navigate(['.'], { relativeTo: this.route, queryParams })\n    } else {\n      this.selectedPage = page\n      this.nextSelectedPage.emit(page)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "nav {\n  text-align: center;\n}",
                    "styleUrl": "./pages.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<nav>\n  <ul class=\"pagination\">\n    <li class=\"page-item\" [ngClass]=\"{disabled: selectedPage === pages[0]}\">\n      <a class=\"page-link\" href=\"javascript:void(0);\" (click)=\"onClick(selectedPage - 1)\">Previous</a>\n    </li>\n    <li *ngFor=\"let page of pages\" class=\"page-item\" [ngClass]=\"{active: selectedPage === page}\">\n      <a class=\"page-link\" href=\"javascript:void(0);\" (click)=\"onClick(page)\">{{page}}</a>\n    </li>\n    <li class=\"page-item\" [ngClass]=\"{disabled: selectedPage === pages[pages.length - 1]}\">\n      <a class=\"page-link\" href=\"javascript:void(0);\" (click)=\"onClick(selectedPage + 1)\">Next</a>\n    </li>\n  </ul>\n</nav>"
        },
        {
            "name": "PopoverContainerComponent",
            "id": "component-PopoverContainerComponent-1889b992ac5241e951adba014182c4f5",
            "file": "src/app/home/popover-container/popover-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "popover-container",
            "styleUrls": [
                "./popover-container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./popover-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bold",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "show",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { ANIMATIONS } from 'utils/constants'\n\n@Component({\n  selector: 'popover-container',\n  templateUrl: './popover-container.component.html',\n  styleUrls: ['./popover-container.component.css'],\n  animations: [ANIMATIONS.POPOVER],\n})\nexport class PopoverContainerComponent implements OnInit {\n  @Input() label: string\n  @Input() bold: boolean\n  @Input() show: boolean\n\n  @Output() selected = new EventEmitter<string>()\n\n  ngOnInit() {\n    this.show = false\n  }\n\n  onClick(event) {\n    event.stopPropagation()\n    this.show = true\n    this.selected.emit(this.label)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\n  font-size: 16px;\n  color: #ffffff;\n  font-weight: 200;\n}\n\na {\n  display: block;\n  padding: 10px 15px;\n  margin: 10px 3px;\n  position: relative;\n}\n\na:hover > p {\n  color: #aaaaaa;\n}\n\n.popover-container {\n  position: absolute;\n  z-index: 2;\n  width: 500px;\n  right: 0;\n  margin: 20px 0;\n}\n\n.bold {\n  font-weight: 400;\n}\n",
                    "styleUrl": "./popover-container.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<a class=\"hover\" href=\"javascript:void(0);\" (click)=\"onClick($event)\">\n  <p [ngClass]=\"{'bold': bold}\">{{label}}</p>\n</a>\n<div class=\"popover-container card\" [@popOverState]=\"show ? 'show' : 'hide'\" (clickOutside)=\"show = false\">\n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "PoweredByGoodreadsComponent",
            "id": "component-PoweredByGoodreadsComponent-f04bf795e2521893a9d23cf697e21573",
            "file": "src/app/dashboard/core/powered-by-goodreads/powered-by-goodreads.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "powered-by-goodreads",
            "styleUrls": [
                "./powered-by-goodreads.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "powered-by-goodreads.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'powered-by-goodreads',\n  templateUrl: 'powered-by-goodreads.component.html',\n  styleUrls: ['./powered-by-goodreads.component.css'],\n})\nexport class PoweredByGoodreadsComponent implements OnInit {\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".powered-by-gr {\n  font-size: 12px;\n  color: #9a9a9a;\n}\n\n.powered-by-gr > img {\n  height: 16px;\n  padding: 2px;\n}\n",
                    "styleUrl": "./powered-by-goodreads.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"powered-by-gr\">\n  Powered by <img src=\"/assets/img/goodreads.png\" />\n  ©\n</div>\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-8cb9f439daa08dd37e27d3d1a8a2616d",
            "file": "src/app/dashboard/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "profile",
            "styleUrls": [
                "./profile.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'profile',\n  templateUrl: 'profile.component.html',\n  styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent implements OnInit {\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./profile.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\n  <router-outlet></router-outlet>\n  <router-outlet name=\"goodreads\"></router-outlet>\n  <router-outlet name=\"delete\"></router-outlet>\n</div>"
        },
        {
            "name": "SearchBoxComponent",
            "id": "component-SearchBoxComponent-85341106b806176b36cdc413eef6126c",
            "file": "src/app/dashboard/core/search-box/search-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "search-box",
            "styleUrls": [
                "search-box.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "search-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 13
                },
                {
                    "name": "link",
                    "defaultValue": "'/dashboard/books/'",
                    "line": 16
                },
                {
                    "name": "props",
                    "defaultValue": "{ main: 'title', sub: 'author' }",
                    "line": 14
                },
                {
                    "name": "searchProps",
                    "defaultValue": "['title', 'author', 'original']",
                    "line": 15
                },
                {
                    "name": "withMargin",
                    "defaultValue": "false",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchInput",
                    "defaultValue": "new FormControl()",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "searchValue",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core'\nimport { FormControl } from '@angular/forms'\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators'\n\n@Component({\n  moduleId: module.id,\n  selector: 'search-box',\n  templateUrl: 'search-box.component.html',\n  styleUrls: ['search-box.component.css'],\n})\nexport class SearchBoxComponent implements OnInit {\n  @Input() withMargin = false\n  @Input() items = []\n  @Input() props = { main: 'title', sub: 'author' }\n  @Input() searchProps = ['title', 'author', 'original']\n  @Input() link = '/dashboard/books/'\n  searchInput: FormControl = new FormControl()\n  searchValue\n\n  ngOnInit() {\n    this.searchInput.valueChanges\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe(value => (this.searchValue = value))\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".with-margin {\n  margin: 10px\n}\n\n.search-box {\n  width: 250px;\n}\n\n.search-icon {\n  vertical-align: middle;\n  font-size: 1.4em;\n}\n\n.search-results {\n  padding: 0;\n  margin-left: 10px;\n  width: 250px;\n  z-index: 1;\n  max-height: 150px;\n  border-color: #888888;\n  border-radius: 4px;\n  list-style: none;\n  color: rgb(105, 105, 105);\n  border: 1px solid #ccc;\n  border-top: none;\n  /*so things don't jump around*/\n  position: absolute;\n  top: calc(50% + 20px);\n  overflow-y: auto;\n  background: #fff\n}\n\n.result {\n  cursor: pointer;\n  min-height: 70px;\n  text-align: left;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  padding: 6px;\n  color: #333333;\n  font-size: 14px;\n}\n\n.result:hover {\n  background: #f7f7f7;\n}\n\nimg {\n  height: 58px;\n  width: auto;\n}\n\n.result:hover {\n  background: #F5F5F5;\n}\n\n.fixed-width {\n  width: 30%;\n}\n\n.result-author {\n  font-size: 12px;\n  color: #9A9A9A;\n}\n\n.props {\n  padding-left: 6px;\n}",
                    "styleUrl": "search-box.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"input-group search-box\" [ngClass]=\"{'with-margin': withMargin}\">\n  <input type=\"text\" class=\"form-control\" placeholder=\"Search\" [formControl]=\"searchInput\">\n  <span class=\"input-group-addon\" id=\"sizing-addon2\">\n    <i class=\"pe-7s-search search-icon\"></i>\n  </span>\n</div>\n<ul class=\"search-results\" *ngIf=\"searchInput.value\" #searchResults>\n  <li\n    *ngFor=\"let item of items | searchFilter: searchValue:searchProps\"\n    class=\"result\"\n    routerLink=\"{{link}}{{item.id}}\"\n  >\n    <div class=\"fixed-width\">\n      <img\n        *ngIf=\"item.imageSmall || item.imageLarge\"\n        [src]=\"item.imageSmall || item.imageLarge\"\n        alt=\"Cover\"\n      >\n    </div>\n    <div class=\"props\">\n      {{item[props.main]}}\n      <br>\n      <span class=\"result-author\">{{item[props.sub]}}</span>\n    </div>\n  </li>\n  <li *ngIf=\"!(items | searchFilter: searchValue:searchProps).length\" #result class=\"result\">\n    No results found\n  </li>\n</ul>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-0921858001694bb9a36742eb1b2f651e",
            "file": "src/app/dashboard/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "sidebar-cmp",
            "styleUrls": [
                "sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuItems",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isNotMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { AuthService } from 'services/auth.service'\n\ndeclare var $: any\n\nexport interface RouteInfo {\n  path: string\n  title: string\n  icon: string\n  class: string\n}\n\nexport const ROUTES: RouteInfo[] = [\n  { path: 'home', title: 'Home', icon: 'pe-7s-home', class: '' },\n  { path: 'books', title: 'Books', icon: 'pe-7s-notebook', class: '' },\n  {\n    path: 'collections',\n    title: 'Collections',\n    icon: 'pe-7s-albums',\n    class: '',\n  },\n  { path: 'authors', title: 'Authors', icon: 'pe-7s-pen', class: '' },\n  { path: 'goodreads', title: 'Goodreads', icon: 'pe-7s-server', class: '' },\n  {\n    path: 'import',\n    title: 'Import library',\n    icon: 'pe-7s-cloud-upload',\n    class: '',\n  },\n  { path: 'profile', title: 'Profile', icon: 'pe-7s-user', class: '' },\n]\n\n@Component({\n  moduleId: module.id,\n  selector: 'sidebar-cmp',\n  templateUrl: 'sidebar.component.html',\n  styleUrls: ['sidebar.component.css'],\n})\nexport class SidebarComponent implements OnInit {\n  public menuItems: any[]\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.menuItems = ROUTES.filter(menuItem => menuItem)\n  }\n\n  isNotMobileMenu() {\n    if ($(window).width() > 991) {\n      return false\n    }\n    return true\n  }\n\n  logout() {\n    this.authService.logout()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".last {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n}\n\n.sidebar-link {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.logo-image {\n  height: 32px;\n  width: 32px;\n  padding: 4px;\n}\n",
                    "styleUrl": "sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sidebar-wrapper\">\n  <div class=\"logo\">\n    <a\n      href=\"javascript:void(0);\"\n      routerLink=\"/home\"\n      class=\"simple-text sidebar-link\"\n    >\n      <img class=\"logo-image\" src=\"/assets/img/booklib-32x32.png\" />\n      Book Lib\n    </a>\n  </div>\n  <ul class=\"nav\">\n    <li\n      *ngFor=\"let menuItem of menuItems; let i = index\"\n      routerLinkActive=\"active\"\n      class=\"{{ menuItem.class }}\"\n    >\n      <a [routerLink]=\"[menuItem.path]\">\n        <i class=\"{{ menuItem.icon }}\"></i>\n        <p>{{ menuItem.title }}</p>\n      </a>\n    </li>\n    <li class=\"last\" routerLinkActive=\"active\">\n      <a href=\"javascript:void(0);\" (click)=\"logout()\">\n        <i class=\"pe-7s-power\"></i>\n        <p>Log out</p>\n      </a>\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "SignInComponent",
            "id": "component-SignInComponent-b6d57efcb0a2452a6ce1814ff80399bd",
            "file": "src/app/home/sign-in/sign-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "sign-in",
            "styleUrls": [
                "./sign-in.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "sign-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "signInForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "loginFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "loginGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { AuthService } from '../../../services/auth.service'\nimport { parseFirebaseAuthError } from '../../../utils/helpers'\n\n@Component({\n  moduleId: module.id,\n  selector: 'sign-in',\n  templateUrl: 'sign-in.component.html',\n  styleUrls: ['./sign-in.component.css'],\n})\nexport class SignInComponent implements OnInit {\n  signInForm: FormGroup\n  errorMessage: string\n\n  constructor(private fb: FormBuilder, private authService: AuthService) {\n    this.signInForm = this.fb.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    })\n  }\n\n  ngOnInit() {}\n\n  loginGoogle() {\n    this.authService.loginGoogle()\n  }\n\n  loginFacebook() {\n    this.authService.loginFacebook()\n  }\n\n  signIn(formValues) {\n    this.authService.loginEmail(formValues, error => {\n      this.errorMessage = parseFirebaseAuthError(error)\n      console.log(this.errorMessage)\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "img {\n  max-height: 52px;\n  padding: 4px;\n}\n\n.form-group {\n  margin-bottom: 0;\n}\n\n.form-group > input {\n  height: 32px;\n}\n\n.form-group > label {\n  font-size: 11px;\n}\n\n.help-block {\n  font-size: 14px;\n}\n\n.content {\n  padding-top: 0;\n}\n\n.separator-with-text {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.separator-with-text .text,\nhr {\n  margin: 8px 0;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: 200;\n}\n\n.separator-with-text hr,\n.separator-with-text h5 {\n  flex: 1;\n}\n\n.btn-social {\n  text-align: center;\n}\n",
                    "styleUrl": "./sign-in.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"card\"> -->\n  <div class=\"header\">\n    <h4 class=\"title\">Sign in</h4>\n  </div>\n  <div class=\"content\">\n    <form [formGroup]=\"signInForm\" (ngSubmit)=\"signIn(signInForm.value)\">\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\" [ngClass]=\"{'has-error': !signInForm.controls['email'].valid && signInForm.controls['email'].touched}\">\n            <label>E-mail</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"email\">\n            <span class=\"help-block\" *ngIf=\"!signInForm.controls['email'].valid && signInForm.controls['email'].touched\">\n              Please enter a valid e-mail.\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\" [ngClass]=\"{'has-error': !signInForm.controls['password'].valid && signInForm.controls['password'].touched}\">\n            <label>Password</label>\n            <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n            <span class=\"help-block\" *ngIf=\"!signInForm.controls['password'].valid && signInForm.controls['password'].touched\">\n              Please enter a valid password.\n            </span>\n          </div>\n        </div>\n      </div>\n      <hr>\n      <span style=\"color: #a94442\" *ngIf=\"errorMessage\">\n        <i class=\"pe-7s-attention\"></i> {{errorMessage}}\n        <hr>\n      </span>\n      <div style=\"text-align: center;\">\n        <button style=\"width: 100%;\" type=\"submit\" class=\"btn btn-success\" [disabled]=\"!signInForm.valid\">Sign in</button>\n      </div>\n    </form>\n    <div class=\"separator-with-text\">\n      <hr>\n      <h5 class=\"text\">Sign in with</h5>\n      <hr>\n    </div>\n    <div>\n      <a class=\"btn btn-block btn-social btn-lg btn-google\" (click)=\"loginGoogle()\">\n        <span class=\"fa fa-google\"></span>\n        Sign in with Google\n      </a>\n      <a class=\"btn btn-block btn-social btn-lg btn-facebook\" (click)=\"loginFacebook()\">\n        <span class=\"fa fa-facebook\"></span>\n        Sign in with Facebook\n      </a>\n    </div>\n  </div>\n<!-- </div> -->"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-97f79e6f756c6be7eb947ac9cae2259a",
            "file": "src/app/home/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "sign-up",
            "styleUrls": [
                "./sign-up.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "signUpForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "loginFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "loginGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "formValues",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\nimport { confirmPassword } from 'utils/validators'\nimport { AuthService } from 'services/auth.service'\n\n@Component({\n  moduleId: module.id,\n  selector: 'sign-up',\n  templateUrl: 'sign-up.component.html',\n  styleUrls: ['./sign-up.component.css'],\n})\nexport class SignUpComponent implements OnInit {\n  signUpForm: FormGroup\n\n  constructor(private fb: FormBuilder, private authService: AuthService) {\n    this.signUpForm = this.fb.group(\n      {\n        name: ['', [Validators.required]],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', [Validators.required, Validators.minLength(6)]],\n      },\n      { validator: confirmPassword }\n    )\n  }\n\n  ngOnInit() {}\n\n  loginGoogle() {\n    this.authService.loginGoogle()\n  }\n\n  loginFacebook() {\n    this.authService.loginFacebook()\n  }\n\n  signUp(formValues) {\n    this.authService.signUpWithEmail(formValues)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "img {\n  max-height: 52px;\n  padding: 4px;\n}\n\n.form-group {\n  margin-bottom: 0;\n}\n\n.form-group > input {\n  height: 32px;\n}\n\n.form-group > label {\n  font-size: 11px;\n}\n\n.help-block {\n  font-size: 14px;\n}\n\n.content {\n  padding-top: 0;\n}\n\n.separator-with-text {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.separator-with-text .text,\nhr {\n  margin: 8px 0;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: 200;\n}\n\n.separator-with-text hr,\n.separator-with-text h5 {\n  flex: 1;\n}\n\n.btn-social {\n  text-align: center;\n}\n",
                    "styleUrl": "./sign-up.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"card\"> -->\n  <div class=\"header\">\n    <h4 class=\"title\">Create account</h4>\n  </div>\n  <div class=\"content\">\n    <form [formGroup]=\"signUpForm\" (ngSubmit)=\"signUp(signUpForm.value)\">\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\" [ngClass]=\"{'has-error': !signUpForm.controls['name'].valid && signUpForm.controls['name'].touched}\">\n            <label>Name</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n            <span class=\"help-block\" *ngIf=\"!signUpForm.controls['name'].valid && signUpForm.controls['name'].touched\">\n              Please enter a valid name.\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\" [ngClass]=\"{'has-error': !signUpForm.controls['email'].valid && signUpForm.controls['email'].touched}\">\n            <label>E-mail</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"email\">\n            <span class=\"help-block\" *ngIf=\"!signUpForm.controls['email'].valid && signUpForm.controls['email'].touched\">Please enter a valid e-mail.</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">      \n        <div class=\"col-xs-12\">\n          <div class=\"form-group\" [ngClass]=\"{'has-error': !signUpForm.controls['password'].valid && signUpForm.controls['password'].touched}\">\n            <label>Password</label>\n            <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n            <span class=\"help-block\" *ngIf=\"!signUpForm.controls['password'].valid && signUpForm.controls['password'].touched\">\n              Please enter a valid password. Password must be at least 6 characters long.\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">      \n        <div class=\"col-xs-12\">\n          <div class=\"form-group\" [ngClass]=\"{'has-error': !signUpForm.controls['confirmPassword'].valid && signUpForm.controls['confirmPassword'].touched}\">\n            <label>Confirm password</label>\n            <input type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\">\n            <span class=\"help-block\" *ngIf=\"!signUpForm.controls['confirmPassword'].valid && signUpForm.controls['confirmPassword'].touched\">\n              Password doesn't match.\n            </span>\n          </div>\n        </div>\n      </div>\n      <div>\n        <button style=\"width: 100%;\" type=\"submit\" class=\"btn btn-success\" [disabled]=\"!signUpForm.valid\">Create account</button>\n      </div>\n    </form>\n    <div class=\"separator-with-text\">\n      <hr>\n      <h5 class=\"text\">Sign up with</h5>\n      <hr>\n    </div>\n    <div>\n      <a class=\"btn btn-block btn-social btn-lg btn-google\" (click)=\"loginGoogle()\">\n        <span class=\"fa fa-google\"></span>\n        Sign up with Google\n      </a>\n      <a class=\"btn btn-block btn-social btn-lg btn-facebook\" (click)=\"loginFacebook()\">\n        <span class=\"fa fa-facebook\"></span>\n        Sign up with Facebook\n      </a>\n    </div>\n  </div>\n<!-- </div> -->"
        },
        {
            "name": "TableItemsComponent",
            "id": "component-TableItemsComponent-a675af4c2ae2e20fc9643761a668e675",
            "file": "src/app/dashboard/core/table-items/table-items.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "table-items",
            "styleUrls": [
                "./table-items.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "table-items.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "DEFAULT_TABLE_ITEMS",
                    "line": 12
                }
            ],
            "outputsClass": [
                {
                    "name": "displayItems",
                    "defaultValue": "new EventEmitter<object>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "itemNames",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\nimport { DEFAULT_TABLE_ITEMS } from 'utils/constants'\n\n@Component({\n  moduleId: module.id,\n  selector: 'table-items',\n  templateUrl: 'table-items.component.html',\n  styleUrls: ['./table-items.component.css'],\n})\nexport class TableItemsComponent implements OnInit {\n  @Input()\n  items = DEFAULT_TABLE_ITEMS\n  itemNames: string[]\n  @Output() displayItems = new EventEmitter<object>()\n\n  ngOnInit() {\n    this.itemNames = Object.keys(this.items)\n    this.displayItems.emit(this.items)\n  }\n\n  onClick(name: string) {\n    this.items[name] = !this.items[name]\n    this.displayItems.emit(this.items)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons {\n  margin-bottom: 30px;\n}\n",
                    "styleUrl": "./table-items.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"btn-group btn-group-justified buttons\" role=\"group\">\n  <div *ngFor=\"let name of itemNames\" class=\"btn-group\" role=\"role\">\n    <button\n      type=\"button\"\n      (click)=\"onClick(name)\"\n      class=\"btn btn-default\"\n      [ngClass]=\"{'active': items[name]}\"\n    >\n      {{name}}\n    </button>\n  </div>\n</div>"
        },
        {
            "name": "TagsListComponent",
            "id": "component-TagsListComponent-c08349949669e7fb3e438d6667dc575d",
            "file": "src/app/dashboard/core/tags-list/tags-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "tags-list",
            "styleUrls": [
                "./tags-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "tags-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tags",
                    "line": 10,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedTags",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selectedTags",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "filterSelectedTags",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "tag",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\n\n@Component({\n  moduleId: module.id,\n  selector: 'tags-list',\n  templateUrl: 'tags-list.component.html',\n  styleUrls: ['./tags-list.component.css'],\n})\nexport class TagsListComponent implements OnInit {\n  @Input() tags: string[]\n  @Output() selectedTags = new EventEmitter<string[]>()\n  _selectedTags = {}\n\n  ngOnInit() {\n    if (this.tags && this.tags.length) {\n      this._selectedTags = this.tags.reduce((value, tag) => {\n        value[tag] = false\n        return value\n      }, {})\n      this.selectedTags.emit(this.filterSelectedTags())\n    }\n  }\n\n  onClick(tag: string) {\n    this._selectedTags[tag] = !this._selectedTags[tag]\n    this.selectedTags.emit(this.filterSelectedTags())\n  }\n\n  filterSelectedTags() {\n    return Object.keys(this._selectedTags).filter(\n      tag => this._selectedTags[tag]\n    )\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".values {\n  padding: 5px 0;\n  font-size: 12px;\n  margin-bottom: 30px;\n}\n\n.value {\n  margin: 0 4px;\n}\n\n.tags {\n  background: #45cce8;\n  border-radius: 4px;\n  margin: 0 2px;\n  padding: 4px;\n  color: #f9f9f9;\n  font-weight: bold;\n  font-size: 12px;\n}\n\n.icon {\n  font-weight: bold;\n}\n\n.close-icon {\n  font-weight: bold;\n  font-size: 10px;\n  color: #f9f9f9;\n}\n\n.selected {\n  background: #e83e3a;\n}\n\n.no-tag {\n  font-style: italic;\n  margin: 4px 0;\n  padding: 0 15px 10px 15px;\n}",
                    "styleUrl": "./tags-list.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"tags && tags.length\" class=\"values\">\n  <a\n    href=\"javascript:void(0);\"\n    *ngFor=\"let tag of tags\"\n    class=\"tags\"\n    (click)=\"onClick(tag)\"\n    [ngClass]=\"{selected: _selectedTags[tag]}\"\n  >\n    <i class=\"pe-7s-ticket icon\"></i>\n    {{tag}}\n    <i class='ti-plus close-icon' [ngClass]=\"{'ti-minus': _selectedTags[tag], 'ti-plus': !_selectedTags[tag]}\"></i>\n  </a>\n</div>\n<h5 class=\"text-muted no-tag\">No tags available</h5>"
        },
        {
            "name": "UiComponent",
            "id": "component-UiComponent-723b4482d4308c887b2de2f3b8bed38c",
            "file": "src/app/ui/ui.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ui",
            "styleUrls": [
                "./ui.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./ui.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-ui',\n  templateUrl: './ui.component.html',\n  styleUrls: ['./ui.component.css'],\n})\nexport class UiComponent implements OnInit {\n  @Input() dark: boolean\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  padding: 25px;\n}\n\n.wrapper.dark-theme {\n  background-color: var(--color-dark-04);\n}\n\n.cards-wrapper {\n  display: flex;\n  margin: 15px 0px;\n}\n\n.card-example {\n  width: 100px;\n  height: 100px;\n  content: \"''\";\n  margin-right: 20px;\n}\n\n.typography-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.typography-padding {\n  padding: 5px 0px;\n}\n\n.buttons-wrapper {\n  margin: 6px 0px;\n}\n\n.button-padding {\n  margin-right: 5px;\n}\n\n.chips-wrapper {\n  display: flex;\n}\n\n.chip-padding {\n  margin: 6px 6px 6px 0px;\n}\n\n.chip-color {\n  background-color: var(--color-blue-02);\n}\n\n.chip-color-dark {\n  background-color: var(--color-blue-04);\n  color: var(--color-light-01);\n}\n\n.badges-wrapper {\n  display: flex;\n  padding: 5px 0px;\n}\n\n.badge-padding {\n  margin-right: 6px;\n}\n\n.checkboxes-wrapper {\n  display: flex;\n  padding: 6px 0px;\n}\n\n.checkbox-padding + label {\n  margin-right: 6px;\n}\n\n.input-wrapper {\n  display: flex;\n  flex-direction: column;\n  padding: 6px 0;\n}\n\n.input-padding {\n  margin: 4px 0px;\n}\n",
                    "styleUrl": "./ui.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\" [ngClass]=\"{ 'dark-theme': dark }\">\n  <div>\n    <h1>Heading 1</h1>\n    <h2>Heading 2</h2>\n    <h3>Heading 3</h3>\n    <h4>Heading 4</h4>\n    <h5>Heading 5</h5>\n    <h6>Heading 6</h6>\n  </div>\n  <div>\n    Apparently we had reached a great height in the atmosphere, for the sky was\n    a dead black, and the stars had ceased to twinkle.\n  </div>\n  <div class=\"small typography-padding\">\n    Apparently we had reached a great height in the atmosphere, for the sky was\n    a dead black, and the stars had ceased to twinkle.\n  </div>\n  <div class=\"tiny typography-padding\">\n    Apparently we had reached a great height in the atmosphere, for the sky was\n    a dead black, and the stars had ceased to twinkle.\n  </div>\n  <div class=\"capitalized typography-padding\">\n    Find an alternative\n  </div>\n  <div class=\"typography-wrapper\">\n    <span class=\"typography-padding\" style=\"font-weight: 700\"\n      >Inter - Bold</span\n    >\n    <span class=\"typography-padding\" style=\"font-weight: 600\"\n      >Inter - SemiBold</span\n    >\n    <span class=\"typography-padding\" style=\"font-weight: 500\"\n      >Inter - Medium</span\n    >\n    <span class=\"typography-padding\" style=\"font-weight: 400\"\n      >Inter - Regular</span\n    >\n  </div>\n  <div class=\"cards-wrapper\">\n    <div class=\"card elevation-01 card-example\"></div>\n    <div class=\"card elevation-02 card-example\"></div>\n    <div class=\"card elevation-03 card-example\"></div>\n    <div class=\"card elevation-04 card-example\"></div>\n    <div class=\"card elevation-05 card-example\"></div>\n    <div class=\"card elevation-06 card-example\"></div>\n  </div>\n  <div class=\"buttons-wrapper\">\n    <button class=\"small button button-padding\">Default</button>\n    <button class=\"small button button-padding success\">Success</button>\n    <button class=\"small button button-padding danger\">Danger</button>\n    <button class=\"small button button-padding\" disabled>Disabled</button>\n    <button class=\"small button button-padding\">\n      <i class=\"pe-7s-add-user\"></i>\n      Icon\n    </button>\n  </div>\n  <div class=\"buttons-wrapper\">\n    <button class=\"button button-padding\">Default</button>\n    <button class=\"button button-padding success\">Success</button>\n    <button class=\"button button-padding danger\">Danger</button>\n    <button class=\"button button-padding\" disabled>Disabled</button>\n    <button class=\"button button-padding\">\n      <i class=\"pe-7s-add-user\"></i>\n      Icon\n    </button>\n  </div>\n  <div class=\"buttons-wrapper\">\n    <button class=\"button inverted button-padding\">Default</button>\n    <button class=\"button inverted button-padding success\">Success</button>\n    <button class=\"button inverted button-padding danger\">Danger</button>\n    <button class=\"button inverted button-padding\" disabled>Disabled</button>\n    <button class=\"button inverted button-padding\">\n      <i class=\"pe-7s-add-user\"></i>\n      Icon\n    </button>\n  </div>\n  <div class=\"buttons-wrapper\">\n    <button class=\"large button button-padding\">Default</button>\n    <button class=\"large button button-padding success\">Success</button>\n    <button class=\"large button button-padding danger\">Danger</button>\n    <button class=\"large button button-padding\" disabled>Disabled</button>\n    <button class=\"large button button-padding\">\n      <i class=\"pe-7s-add-user\"></i>\n      Icon\n    </button>\n  </div>\n  <div class=\"buttons-wrapper\">\n    <button class=\"rounded button small button-padding\">Small</button>\n    <button class=\"rounded button button-padding\">Default</button>\n    <button class=\"rounded button large button-padding\">Large</button>\n    <button class=\"rounded button button-padding\" disabled>Disabled</button>\n    <button class=\"rounded button icon button-padding\">\n      <i class=\"pe-7s-alarm\"></i>\n    </button>\n  </div>\n  <div class=\"accordion\">\n    <input class=\"accordion-item-checkbox\" type=\"checkbox\" id=\"_checkbox1\" />\n    <div class=\"accordion-item\">\n      <label for=\"_checkbox1\">Item 1<i class=\"pe-7s-angle-down\"></i></label>\n      <div class=\"content\">\n        Lorem Ipsum is simply dummy text of the printing and typesetting\n        industry. Lorem Ipsum has been the industry's standard dummy text ever\n        since the 1500s, when an unknown printer took a galley of type and\n        scrambled it to make a type specimen book. It has survived not only five\n        centuries, but also the leap into electronic typesetting, remaining\n        essentially unchanged. It was popularised in the 1960s with the release\n        of Letraset sheets containing Lorem Ipsum passages, and more recently\n        with desktop publishing software like Aldus PageMaker including versions\n        of Lorem Ipsum.\n      </div>\n    </div>\n    <input class=\"accordion-item-checkbox\" type=\"checkbox\" id=\"_checkbox2\" />\n    <div class=\"accordion-item\">\n      <label for=\"_checkbox2\">Item 2<i class=\"pe-7s-angle-down\"></i></label>\n      <div class=\"content\">\n        Lorem Ipsum is simply dummy text of the printing and typesetting\n        industry. Lorem Ipsum has been the industry's standard dummy text ever\n        since the 1500s, when an unknown printer took a galley of type and\n        scrambled it to make a type specimen book. It has survived not only five\n        centuries, but also the leap into electronic typesetting, remaining\n        essentially unchanged. It was popularised in the 1960s with the release\n        of Letraset sheets containing Lorem Ipsum passages, and more recently\n        with desktop publishing software like Aldus PageMaker including versions\n        of Lorem Ipsum.\n      </div>\n    </div>\n  </div>\n  <div class=\"alert\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert icon-right\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert icon-left\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert icon-left dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert\">\n    <span class=\"message\"\n      >Some text here<button class=\"button small inverted\">\n        Execute\n      </button></span\n    >\n  </div>\n  <div class=\"alert\">\n    <span class=\"header\">Alert Header</span>\n    <span class=\"message\">\n      Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n      Lorem Ipsum has been the industry's standard dummy text ever since the\n      1500s, when an unknown printer took a galley of type and scrambled it to\n      make a type specimen book.\n    </span>\n    <button class=\"button small inverted\">Execute</button>\n  </div>\n  <div class=\"alert success\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert success dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert success icon-right\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert success icon-left\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert success icon-left dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert success\">\n    <span class=\"message\"\n      >Some text here<button class=\"button small inverted success\">\n        Execute\n      </button></span\n    >\n  </div>\n  <div class=\"alert success\">\n    <span class=\"header\">Alert Header</span>\n    <span class=\"message\">\n      Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n      Lorem Ipsum has been the industry's standard dummy text ever since the\n      1500s, when an unknown printer took a galley of type and scrambled it to\n      make a type specimen book.\n    </span>\n    <button class=\"button small inverted success\">Execute</button>\n  </div>\n  <div class=\"alert danger\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert danger dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert danger icon-right\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert danger icon-left\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert danger icon-left dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert danger\">\n    <span class=\"message\"\n      >Some text here<button class=\"button small inverted danger\">\n        Execute\n      </button></span\n    >\n  </div>\n  <div class=\"alert danger\">\n    <span class=\"header\">Alert Header</span>\n    <span class=\"message\">\n      Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n      Lorem Ipsum has been the industry's standard dummy text ever since the\n      1500s, when an unknown printer took a galley of type and scrambled it to\n      make a type specimen book.\n    </span>\n    <button class=\"button small inverted danger\">Execute</button>\n  </div>\n  <div class=\"alert warning\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert warning dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert warning icon-right\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert warning icon-left\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert warning icon-left dismissable\">\n    <span class=\"message\">Some text here</span>\n  </div>\n  <div class=\"alert warning\">\n    <span class=\"message\"\n      >Some text here<button class=\"button small inverted warning\">\n        Execute\n      </button></span\n    >\n  </div>\n  <div class=\"alert warning\">\n    <span class=\"header\">Alert Header</span>\n    <span class=\"message\">\n      Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n      Lorem Ipsum has been the industry's standard dummy text ever since the\n      1500s, when an unknown printer took a galley of type and scrambled it to\n      make a type specimen book.\n    </span>\n    <button class=\"button small inverted warning\">Execute</button>\n  </div>\n  <div class=\"chips-wrapper\">\n    <div class=\"chip chip-padding\">Chip</div>\n    <div class=\"chip chip-padding chip-color\">Chip</div>\n    <div class=\"chip chip-padding chip-color-dark\">Chip</div>\n  </div>\n  <div class=\"chips-wrapper\">\n    <div class=\"chip chip-padding dismissable\">Chip</div>\n    <div class=\"chip chip-padding chip-color dismissable\">Chip</div>\n    <div class=\"chip chip-padding chip-color-dark dismissable\">Chip</div>\n  </div>\n  <div class=\"chips-wrapper\">\n    <div class=\"chip chip-padding \"><i class=\"pe-7s-alarm\"></i>Chip</div>\n    <div class=\"chip chip-padding chip-color\">\n      <i class=\"pe-7s-alarm\"></i>Chip\n    </div>\n    <div class=\"chip chip-padding chip-color-dark\">\n      <i class=\"pe-7s-alarm\"></i>Chip\n    </div>\n  </div>\n  <div class=\"badges-wrapper\">\n    <div class=\"badge badge-padding\">Primary</div>\n    <div class=\"badge badge-padding info\">Info</div>\n    <div class=\"badge badge-padding success\">Success</div>\n    <div class=\"badge badge-padding danger\">Danger</div>\n    <div class=\"badge badge-padding warning\">Warning</div>\n  </div>\n  <div class=\"checkboxes-wrapper\">\n    <input\n      type=\"checkbox\"\n      id=\"checkbox1\"\n      class=\"checkbox checkbox-padding\"\n    /><label for=\"checkbox1\">Checkbox</label>\n    <input\n      type=\"checkbox\"\n      id=\"checkbox2\"\n      class=\"checkbox checkbox-padding\"\n      checked\n    /><label for=\"checkbox2\">Checkbox</label>\n    <input\n      type=\"checkbox\"\n      id=\"checkbox3\"\n      class=\"checkbox checkbox-padding\"\n      disabled\n    /><label for=\"checkbox3\">Checkbox</label>\n    <input\n      type=\"checkbox\"\n      id=\"checkbox4\"\n      class=\"checkbox checkbox-padding\"\n      checked\n      disabled\n    /><label for=\"checkbox4\">Checkbox</label>\n  </div>\n  <div class=\"checkboxes-wrapper\">\n    <input\n      type=\"radio\"\n      name=\"example\"\n      id=\"radio1\"\n      class=\"checkbox checkbox-padding\"\n    /><label for=\"radio1\">Radio</label>\n    <input\n      type=\"radio\"\n      name=\"example\"\n      id=\"radio2\"\n      class=\"checkbox checkbox-padding\"\n      checked\n    /><label for=\"radio2\">Radio</label>\n    <input\n      type=\"radio\"\n      name=\"example\"\n      id=\"radio3\"\n      class=\"checkbox checkbox-padding\"\n      disabled\n    /><label for=\"radio3\">Radio</label>\n    <input\n      type=\"radio\"\n      name=\"example\"\n      id=\"radio4\"\n      class=\"checkbox checkbox-padding\"\n      checked\n      disabled\n    /><label for=\"radio4\">Radio</label>\n  </div>\n  <div class=\"checkboxes-wrapper\">\n    <input\n      type=\"checkbox\"\n      name=\"example\"\n      id=\"switch1\"\n      class=\"switch checkbox-padding\"\n    /><label for=\"switch1\">Switch</label>\n    <input\n      type=\"checkbox\"\n      name=\"example\"\n      id=\"switch2\"\n      class=\"switch checkbox-padding\"\n      checked\n    /><label for=\"switch2\">Switch</label>\n    <input\n      type=\"checkbox\"\n      name=\"example\"\n      id=\"switch3\"\n      class=\"switch checkbox-padding\"\n      disabled\n    /><label for=\"switch3\">Switch</label>\n    <input\n      type=\"checkbox\"\n      name=\"example\"\n      id=\"switch4\"\n      class=\"switch checkbox-padding\"\n      checked\n      disabled\n    /><label for=\"switch4\">Switch</label>\n  </div>\n  <div class=\"dropdown\">\n    <input class=\"dropdown-checkbox\" type=\"checkbox\" id=\"_dropdowncheckbox\" />\n    <label for=\"_dropdowncheckbox\">Dropdown Menu</label>\n    <div class=\"dropdown-menu\">\n      <div class=\"dropdown-menu-inner\">\n        <label for=\"_dropdowncheckbox\" class=\"dropdown-item\">Item 1</label>\n        <label for=\"_dropdowncheckbox\" class=\"dropdown-item\">Item 2</label>\n        <label for=\"_dropdowncheckbox\" class=\"dropdown-item\">Item 3</label>\n        <label for=\"_dropdowncheckbox\" class=\"dropdown-item\">Item 4</label>\n        <label for=\"_dropdowncheckbox\" class=\"dropdown-item\">Item 5</label>\n        <label for=\"_dropdowncheckbox\" class=\"dropdown-item\">Item 6</label>\n        <label for=\"_dropdowncheckbox\" class=\"dropdown-item\">Item 7</label>\n      </div>\n    </div>\n  </div>\n  <div class=\"input-wrapper\">\n    <div class=\"input input-padding\">\n      <input type=\"text\" placeholder=\"Placeholder\" />\n    </div>\n    <div class=\"input input-padding\">\n      <input type=\"text\" placeholder=\"Required\" required />\n    </div>\n    <div class=\"input input-padding\">\n      <input type=\"text\" placeholder=\"Disabled\" disabled />\n    </div>\n    <div class=\"input input-padding\">\n      <input\n        class=\"input-padding icon-left\"\n        type=\"text\"\n        placeholder=\"Icon left\"\n      /><i class=\"pe-7s-disk left\"></i>\n    </div>\n    <div class=\"input input-padding\">\n      <input\n        class=\"input-padding icon-right\"\n        type=\"text\"\n        placeholder=\"Icon right\"\n      /><i class=\"pe-7s-bookmarks right\"></i>\n    </div>\n    <div class=\"input input-padding\">\n      <label class=\"label\">Label</label>\n      <input type=\"text\" placeholder=\"Label\" />\n    </div>\n    <div class=\"input input-padding\">\n      <input type=\"text\" placeholder=\"Label\" />\n      <label class=\"info\">Assistive info text</label>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserInfoComponent",
            "id": "component-UserInfoComponent-a14ce227108b1c9fab666df628dd7b7f",
            "file": "src/app/dashboard/profile/user-info/user-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-info",
            "styleUrls": [
                "./user-info.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "collectionCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isVerified",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "SIGN_IN_METHODS",
                    "defaultValue": "{\n    'google.com': {\n      icon: 'ti-google',\n      text: 'Connected to Google',\n    },\n    'facebook.com': {\n      icon: 'ti-facebook',\n      text: 'Connected to Facebook',\n    },\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "signInMethod",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "sendVerificationEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core'\nimport { User } from 'models/user.model'\nimport { SessionService } from 'services/session.service'\nimport { LibraryService } from 'services/library.service'\nimport { AuthService } from 'services/auth.service'\nimport { ANIMATIONS } from 'utils/constants'\n\n@Component({\n  selector: 'user-info',\n  templateUrl: './user-info.component.html',\n  styleUrls: ['./user-info.component.css'],\n  animations: [ANIMATIONS.CARD],\n})\nexport class UserInfoComponent implements OnInit, OnDestroy {\n  subscriptions = []\n  user: User\n  bookCount: number\n  collectionCount: number\n  isVerified = true\n  signInMethod: any = {}\n\n  SIGN_IN_METHODS = {\n    'google.com': {\n      icon: 'ti-google',\n      text: 'Connected to Google',\n    },\n    'facebook.com': {\n      icon: 'ti-facebook',\n      text: 'Connected to Facebook',\n    },\n  }\n\n  constructor(\n    private authService: AuthService,\n    private sessionService: SessionService,\n    private libraryService: LibraryService\n  ) {\n    this.user = this.sessionService.localUser\n    this.subscriptions.push(\n      this.libraryService.bookCount$.subscribe(\n        count => (this.bookCount = count)\n      )\n    )\n    this.subscriptions.push(\n      this.libraryService.collectionCount$.subscribe(\n        count => (this.collectionCount = count)\n      )\n    )\n  }\n\n  ngOnInit() {\n    this.authService.userLoaded.subscribe(value => {\n      if (value) {\n        this.isVerified = this.authService.userIsVerified\n        this.signInMethod = this.SIGN_IN_METHODS[\n          this.authService.signInProvider()\n        ]\n      }\n    })\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe())\n  }\n\n  sendVerificationEmail() {\n    this.authService.sendVerificationEmail()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "i {\n  padding-right: 4px;\n}\n\n.connected {\n  font-size: 16px;\n}\n\n.row {\n  padding: 2px 0\n}\n\n.justify {\n  display: flex;\n  justify-content: space-between;\n  padding: 0 35px;\n  font-weight: 400;\n}\n\n.alert {\n  flex-direction: row;\n  justify-content: flex-start;\n  margin: 8px 0;\n}\n\n.alert > a {\n  font-weight: bold;\n  text-decoration: underline;\n  color: white;\n}\n",
                    "styleUrl": "./user-info.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"card card-user\" [@card]>\n  <div class=\"image\">\n    <img [src]=\"user.backgroundUrl || '/assets/img/bookshelf03.jpg'\">\n  </div>\n  <div class=\"content\">\n    <div class=\"author\">\n      <img class=\"avatar border-gray\" [src]=\"user.avatarUrl || '/assets/img/default-avatar.png'\">\n      <h4 class=\"title\">\n        {{user.name}}\n        <br>\n        <small>{{user.email}}</small>\n      </h4>\n      <div class=\"row\">\n        <div class=\"col-xs-12 text-center connected\">\n          <i [class]=\"signInMethod.icon\"></i>\n          <span>{{signInMethod.text}}</span>\n        </div>\n      </div>\n      <div class=\"description text-center\">\n        <div class=\"row\">\n          <div class=\"col-md-4 col-md-offset-4 justify\">\n            <span><i class=\"pe-7s-bookmarks\"></i>Books:</span>\n            <span>{{bookCount}}</span>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-4 col-md-offset-4 justify\">\n            <span><i class=\"pe-7s-albums\"></i>Collections:</span>\n            <span>{{collectionCount}}</span>\n          </div>\n        </div>\n      </div>\n      <hr>\n      <button type=\"button\" class=\"btn btn-default edit\" routerLink=\"edit\" style=\"width: 100%;\">\n        <i class=\"pe-7s-note\"></i>\n        Edit\n      </button>\n      <hr *ngIf=\"!isVerified\">\n      <div *ngIf=\"!isVerified\" class=\"alert alert-danger\">\n        <i class=\"pe-7s-attention\" style=\"font-size: 20px; font-weight: bold;\"></i>\n        This account is not yet verified.&nbsp;\n        <a href=\"javascript:void(0);\" (click)=\"sendVerificationEmail()\">Resend verification e-mail.</a>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-3099dca612315a9330f4f9273088af93",
            "file": "src/app/dashboard/dashboard-home/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "welcome",
            "styleUrls": [
                "welcome.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "welcome.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hideMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { DatabaseService } from 'services/database.service'\nimport { SessionService } from 'services/session.service'\n\n@Component({\n  moduleId: module.id,\n  selector: 'welcome',\n  templateUrl: 'welcome.component.html',\n  styleUrls: ['welcome.component.css'],\n})\nexport class WelcomeComponent implements OnInit {\n  constructor(\n    private databaseService: DatabaseService,\n    private sessionService: SessionService\n  ) {}\n\n  ngOnInit() {}\n\n  hideMessage() {\n    const userId = this.sessionService.userId\n    this.databaseService.updateUser(userId, { displayWelcomeMessage: false })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h4 {\n  margin-top: 0;\n}\n\nh5 {\n  margin-bottom: 0;\n}\n\n.container-with-icon {\n  display: flex;\n  justify-content: left;\n}\n\n.info {\n  font-size: 14px;\n}\n\n.icon {\n  align-self: center;\n  padding: 0 6px;\n  font-size: 50px;\n}\n",
                    "styleUrl": "welcome.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "databaseService",
                        "type": "DatabaseService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "databaseService",
                        "type": "DatabaseService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <!-- Header -->\n  <div class=\"header\" style=\"text-align: center;\">\n    <img\n      src=\"/assets/img/booklib-128x128.png\"\n      alt=\"Logo\"\n      style=\"padding: 40px;\"\n    />\n    <i class=\"pe-7s-bookmark\"></i>\n    <!-- <h2 class=\"title\">Welcome to BookLib!</h2> -->\n  </div>\n  <!-- Content -->\n  <div class=\"content\">\n    <div class=\"row\" style=\"text-align: center;\">\n      <h4>Welcome to your new digital library!</h4>\n      BookLib lets you organize your books in a smart way. Take a tour around\n      the application and see what amazing features you can discover.\n    </div>\n    <hr />\n    <div class=\"row\">\n      <div class=\"col-md-12 container-with-icon\">\n        <i class=\"pe-7s-notebook icon\"></i>\n        <div>\n          <h5>\n            Books\n          </h5>\n          <p class=\"text-muted info\">\n            Here you find ALL of your books. You can see them in tiles or in a\n            list, organize them by name, author, language or year. You can also\n            filter them, search them and add new books manually. This is where\n            your library starts!\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 container-with-icon\">\n        <i class=\"pe-7s-albums icon\"></i>\n        <div>\n          <h5>\n            Collections\n          </h5>\n          <p class=\"text-muted info\">\n            You can organize your books in collections, like series of books,\n            trilogies or books that have something in common. Find all of your\n            collections here, add new ones and manage your current ones.\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 container-with-icon\">\n        <i class=\"pe-7s-pen icon\"></i>\n        <div>\n          <h5>\n            Authors\n          </h5>\n          <p class=\"text-muted info\">\n            Here you can find info about authors you follow. (This feature is\n            still under development!)\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 container-with-icon\">\n        <i class=\"pe-7s-server icon\"></i>\n        <div>\n          <h5>\n            Goodreads\n          </h5>\n          <p class=\"text-muted info\">\n            Here you can connect to the Goodreads platform, import your library\n            from your account, find books and authors and connect your current\n            books to the Goodreads database. (This feature is still under\n            development!)\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 container-with-icon\">\n        <i class=\"pe-7s-cloud-upload icon\"></i>\n        <div>\n          <h5>\n            Import\n          </h5>\n          <p class=\"text-muted info\">\n            Here you can import your personal library from a customized\n            spreadsheet and have all your books very easily uploaded to your\n            digital library.\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-12\">\n        <button\n          class=\"col-xs-12 btn btn btn-primary\"\n          type=\"button\"\n          routerLink=\"/dashboard/books\"\n        >\n          Let's get started with my library!\n        </button>\n      </div>\n      <a\n        href=\"javascript:void(0);\"\n        (click)=\"hideMessage()\"\n        class=\"col-xs-12\"\n        style=\"text-align: right; margin: 10px 0;\"\n      >\n        Don't display this message anymore\n      </a>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "DatabaseService"
                        },
                        {
                            "name": "GoodreadsService"
                        },
                        {
                            "name": "ImportService"
                        },
                        {
                            "name": "LibraryService"
                        },
                        {
                            "name": "SessionService"
                        },
                        {
                            "name": "UiService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "UiComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthorsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthorComponent"
                        },
                        {
                            "name": "AuthorsComponent"
                        },
                        {
                            "name": "AuthorsHomeComponent"
                        },
                        {
                            "name": "FindAuthorComponent"
                        },
                        {
                            "name": "TruncatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AuthorsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddBookComponent"
                        },
                        {
                            "name": "BookComponent"
                        },
                        {
                            "name": "BookGroupingPipe"
                        },
                        {
                            "name": "BooksComponent"
                        },
                        {
                            "name": "BooksHomeComponent"
                        },
                        {
                            "name": "EditBookComponent"
                        },
                        {
                            "name": "FindBookComponent"
                        },
                        {
                            "name": "IterableObjectPipe"
                        },
                        {
                            "name": "MatchBookComponent"
                        },
                        {
                            "name": "NoBooksComponent"
                        },
                        {
                            "name": "PushToBottomPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BooksComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CollectionsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddCollectionComponent"
                        },
                        {
                            "name": "CollectionGroupingPipe"
                        },
                        {
                            "name": "CollectionsComponent"
                        },
                        {
                            "name": "CollectionsHomeComponent"
                        },
                        {
                            "name": "EditCollectionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CollectionsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthorCardComponent"
                        },
                        {
                            "name": "AuthorsDisplayComponent"
                        },
                        {
                            "name": "AuthorsSectionComponent"
                        },
                        {
                            "name": "AuthorsTableComponent"
                        },
                        {
                            "name": "BookButtonsComponent"
                        },
                        {
                            "name": "BookCardComponent"
                        },
                        {
                            "name": "BookFilterPipe"
                        },
                        {
                            "name": "BookTagsComponent"
                        },
                        {
                            "name": "BooksDisplayComponent"
                        },
                        {
                            "name": "BooksSectionComponent"
                        },
                        {
                            "name": "BooksTableComponent"
                        },
                        {
                            "name": "GridComponent"
                        },
                        {
                            "name": "LanguageSelectorComponent"
                        },
                        {
                            "name": "LibraryNavbarComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        },
                        {
                            "name": "LoadingOverlayComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PageNavigatorComponent"
                        },
                        {
                            "name": "PagePipe"
                        },
                        {
                            "name": "PagesComponent"
                        },
                        {
                            "name": "PoweredByGoodreadsComponent"
                        },
                        {
                            "name": "SearchBoxComponent"
                        },
                        {
                            "name": "SearchFilterPipe"
                        },
                        {
                            "name": "TableItemsComponent"
                        },
                        {
                            "name": "TagsListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AuthorCardComponent"
                        },
                        {
                            "name": "AuthorsDisplayComponent"
                        },
                        {
                            "name": "AuthorsSectionComponent"
                        },
                        {
                            "name": "AuthorsTableComponent"
                        },
                        {
                            "name": "BookButtonsComponent"
                        },
                        {
                            "name": "BookCardComponent"
                        },
                        {
                            "name": "BookFilterPipe"
                        },
                        {
                            "name": "BookTagsComponent"
                        },
                        {
                            "name": "BooksDisplayComponent"
                        },
                        {
                            "name": "BooksSectionComponent"
                        },
                        {
                            "name": "BooksTableComponent"
                        },
                        {
                            "name": "GridComponent"
                        },
                        {
                            "name": "LanguageSelectorComponent"
                        },
                        {
                            "name": "LibraryNavbarComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        },
                        {
                            "name": "LoadingOverlayComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PageNavigatorComponent"
                        },
                        {
                            "name": "PagePipe"
                        },
                        {
                            "name": "PagesComponent"
                        },
                        {
                            "name": "PoweredByGoodreadsComponent"
                        },
                        {
                            "name": "SearchBoxComponent"
                        },
                        {
                            "name": "SearchFilterPipe"
                        },
                        {
                            "name": "TableItemsComponent"
                        },
                        {
                            "name": "TagsListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardHomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardHomeComponent"
                        },
                        {
                            "name": "LastAddedBooksComponent"
                        },
                        {
                            "name": "WelcomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardHomeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "ImportComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "DashboardHomeModule"
                        },
                        {
                            "name": "FooterModule"
                        },
                        {
                            "name": "GoodreadsModule"
                        },
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "SidebarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FooterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GoodreadsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GoodreadsComponent"
                        },
                        {
                            "name": "GoodreadsImportComponent"
                        },
                        {
                            "name": "GoodreadsSearchAuthorComponent"
                        },
                        {
                            "name": "GoodreadsSearchBookComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GoodreadsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "GetStartedComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "HomeNavbarComponent"
                        },
                        {
                            "name": "HomeSectionComponent"
                        },
                        {
                            "name": "PopoverContainerComponent"
                        },
                        {
                            "name": "SignInComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavbarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfileModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DeleteAccountComponent"
                        },
                        {
                            "name": "EditUserInfoComponent"
                        },
                        {
                            "name": "GoodreadsInfoComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "UserInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__karma__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "_LANGUAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "object",
                "defaultValue": "{\n  om: 'Afaan Oromoo',\n  aa: 'Afaraf',\n  af: 'Afrikaans',\n  ak: 'Akan',\n  an: 'aragonés',\n  ig: 'Asụsụ Igbo',\n  gn: 'Avañe\\'ẽ',\n  ae: 'avesta',\n  ay: 'aymar aru',\n  az: 'azərbaycan dili',\n  id: 'Bahasa Indonesia',\n  ms: 'bahasa Melayu',\n  bm: 'bamanankan',\n  jv: 'basa Jawa',\n  su: 'Basa Sunda',\n  bi: 'Bislama',\n  bs: 'bosanski jezik',\n  br: 'brezhoneg',\n  ca: 'català',\n  ch: 'Chamoru',\n  ny: 'chiCheŵa',\n  sn: 'chiShona',\n  co: 'corsu',\n  cy: 'Cymraeg',\n  da: 'dansk',\n  se: 'Davvisámegiella',\n  de: 'Deutsch',\n  nv: 'Diné bizaad',\n  et: 'eesti',\n  na: 'Ekakairũ Naoero',\n  en: 'English',\n  es: 'español',\n  eo: 'Esperanto',\n  eu: 'euskara',\n  ee: 'Eʋegbe',\n  to: 'faka Tonga',\n  mg: 'fiteny malagasy',\n  fr: 'français',\n  fy: 'Frysk',\n  ff: 'Fulfulde',\n  fo: 'føroyskt',\n  ga: 'Gaeilge',\n  gv: 'Gaelg',\n  sm: 'gagana fa\\'a Samoa',\n  gl: 'galego',\n  sq: 'gjuha shqipe',\n  gd: 'Gàidhlig',\n  ki: 'Gĩkũyũ',\n  ha: 'Hausa',\n  ho: 'Hiri Motu',\n  hr: 'hrvatski jezik',\n  io: 'Ido',\n  rw: 'Ikinyarwanda',\n  rn: 'Ikirundi',\n  ia: 'Interlingua',\n  nd: 'isiNdebele',\n  nr: 'isiNdebele',\n  xh: 'isiXhosa',\n  zu: 'isiZulu',\n  it: 'italiano',\n  ik: 'Iñupiaq',\n  pl: 'polski',\n  mh: 'Kajin M̧ajeļ',\n  kl: 'kalaallisut',\n  kr: 'Kanuri',\n  kw: 'Kernewek',\n  kg: 'KiKongo',\n  sw: 'Kiswahili',\n  ht: 'Kreyòl ayisyen',\n  kj: 'Kuanyama',\n  ku: 'Kurdî',\n  la: 'latine',\n  lv: 'latviešu valoda',\n  lt: 'lietuvių kalba',\n  ro: 'limba română',\n  li: 'Limburgs',\n  ln: 'Lingála',\n  lg: 'Luganda',\n  lb: 'Lëtzebuergesch',\n  hu: 'magyar',\n  mt: 'Malti',\n  nl: 'Nederlands',\n  no: 'Norsk',\n  nb: 'Norsk bokmål',\n  nn: 'Norsk nynorsk',\n  uz: 'O\\'zbek',\n  oc: 'occitan',\n  ie: 'Interlingue',\n  hz: 'Otjiherero',\n  ng: 'Owambo',\n  pt: 'português',\n  ty: 'Reo Tahiti',\n  rm: 'rumantsch grischun',\n  qu: 'Runa Simi',\n  sc: 'sardu',\n  za: 'Saɯ cueŋƅ',\n  st: 'Sesotho',\n  tn: 'Setswana',\n  ss: 'SiSwati',\n  sl: 'slovenski jezik',\n  sk: 'slovenčina',\n  so: 'Soomaaliga',\n  fi: 'suomi',\n  sv: 'Svenska',\n  mi: 'te reo Māori',\n  vi: 'Tiếng Việt',\n  lu: 'Tshiluba',\n  ve: 'Tshivenḓa',\n  tw: 'Twi',\n  tk: 'Türkmen',\n  tr: 'Türkçe',\n  ug: 'Uyƣurqə',\n  vo: 'Volapük',\n  fj: 'vosa Vakaviti',\n  wa: 'walon',\n  tl: 'Wikang Tagalog',\n  wo: 'Wollof',\n  ts: 'Xitsonga',\n  yo: 'Yorùbá',\n  sg: 'yângâ tî sängö',\n  is: 'Íslenska',\n  cs: 'čeština',\n  el: 'ελληνικά',\n  av: 'авар мацӀ',\n  ab: 'аҧсуа бызшәа',\n  ba: 'башҡорт теле',\n  be: 'беларуская мова',\n  bg: 'български език',\n  os: 'ирон æвзаг',\n  kv: 'коми кыв',\n  ky: 'Кыргызча',\n  mk: 'македонски јазик',\n  mn: 'монгол',\n  ce: 'нохчийн мотт',\n  ru: 'Русский язык',\n  sr: 'српски језик',\n  tt: 'татар теле',\n  tg: 'тоҷикӣ',\n  uk: 'українська мова',\n  cv: 'чӑваш чӗлхи',\n  cu: 'ѩзыкъ словѣньскъ',\n  kk: 'қазақ тілі',\n  hy: 'Հայերեն',\n  yi: 'ייִדיש',\n  he: 'עברית',\n  ur: 'اردو',\n  ar: 'العربية',\n  fa: 'فارسی',\n  ps: 'پښتو',\n  ks: 'कश्मीरी',\n  ne: 'नेपाली',\n  pi: 'पाऴि',\n  bh: 'भोजपुरी',\n  mr: 'मराठी',\n  sa: 'संस्कृतम्',\n  sd: 'सिन्धी',\n  hi: 'हिन्दी',\n  as: 'অসমীয়া',\n  bn: 'বাংলা',\n  pa: 'ਪੰਜਾਬੀ',\n  gu: 'ગુજરાતી',\n  or: 'ଓଡ଼ିଆ',\n  ta: 'தமிழ்',\n  te: 'తెలుగు',\n  kn: 'ಕನ್ನಡ',\n  ml: 'മലയാളം',\n  si: 'සිංහල',\n  th: 'ไทย',\n  lo: 'ພາສາລາວ',\n  bo: 'བོད་ཡིག',\n  dz: 'རྫོང་ཁ',\n  my: 'ဗမာစာ',\n  ka: 'ქართული',\n  ti: 'ትግርኛ',\n  am: 'አማርኛ',\n  iu: 'ᐃᓄᒃᑎᑐᑦ',\n  oj: 'ᐊᓂᔑᓈᐯᒧᐎᓐ',\n  cr: 'ᓀᐦᐃᔭᐍᐏᐣ',\n  km: 'ខ្មែរ',\n  zh: '中文 (Zhōngwén)',\n  ja: '日本語 (にほんご)',\n  ii: 'ꆈꌠ꒿ Nuosuhxop',\n  ko: '한국어 (韓國語)',\n}"
            },
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/sidebar/sidebar.component.ts",
                "type": "any"
            },
            {
                "name": "ANIMATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "object",
                "defaultValue": "{\n  CARD: trigger('card', [\n    state(\n      '*',\n      style({\n        '-webkit-transform': 'translate3D(0px, 0px, 0px)',\n        transform: 'translate3D(0px, 0px, 0px)',\n        opacity: 1,\n      })\n    ),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        '-webkit-transform': 'translate3D(0px, 150px, 0px)',\n        transform: 'translate3D(0px, 150px, 0px)',\n      }),\n      animate('0.3s 0s ease-out'),\n    ]),\n  ]),\n  POPOVER: trigger('popOverState', [\n    state(\n      'show',\n      style({\n        opacity: 1,\n      })\n    ),\n    state(\n      'hide',\n      style({\n        display: 'none',\n        opacity: 0,\n      })\n    ),\n    transition('show => hide', animate('100ms ease-out')),\n    transition('hide => show', animate('100ms ease-in')),\n  ]),\n}"
            },
            {
                "name": "AppRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routing.ts",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: 'home',\n    loadChildren: () => HomeModule,\n  },\n  {\n    path: 'library',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: 'dashboard',\n    loadChildren: () => DashboardModule,\n    canActivate: [AuthGuardService],\n  },\n]"
            },
            {
                "name": "arrayToObjectWithId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(array: any[]) => {\n  if (!array) {\n    return\n  }\n  // tslint:disable-next-line:ban-comma-operator\n  return array.reduce((obj, item) => ((obj[item.id] = item), obj), {})\n}"
            },
            {
                "name": "author",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/author-card/author-card.example.ts",
                "type": "",
                "defaultValue": "AuthorFactory.build()"
            },
            {
                "name": "AuthorFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/factories/author.factory.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<Author>({\n  id: random.number(),\n  name: `${name.firstName()} ${name.lastName()}`,\n  about: lorem.text(),\n  books: [],\n  imageSmall: random.image(),\n  imageLarge: random.image(),\n  goodreadsLink: internet.url(),\n  isSelected: random.boolean(),\n})"
            },
            {
                "name": "authors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/authors-display/authors-display.example.ts",
                "type": "",
                "defaultValue": "AuthorFactory.buildList(13)"
            },
            {
                "name": "authors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/authors-section/authors-section.example.ts",
                "type": "",
                "defaultValue": "AuthorFactory.buildList(4)"
            },
            {
                "name": "authors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/authors-table/authors-table.example.ts",
                "type": "",
                "defaultValue": "AuthorFactory.buildList(4)"
            },
            {
                "name": "book",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/book-card/book-card.example.ts",
                "type": "",
                "defaultValue": "BookFactory.build({ canBeSelected: true })"
            },
            {
                "name": "BOOK_GROUPINGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "[]",
                "defaultValue": "[\n  'No grouping',\n  'Author',\n  'Date added',\n  'Language',\n  'Genre',\n  'Rating',\n  'Title',\n  'Year',\n]"
            },
            {
                "name": "bookCannotBeSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/book-card/book-card.example.ts",
                "type": "",
                "defaultValue": "BookFactory.build({ canBeSelected: false })"
            },
            {
                "name": "BookFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/factories/book.factory.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<Book>({\n  id: random.uuid(),\n  ownerId: random.uuid(),\n  isbn: random.number(),\n  title: `${lorem.word()} ${lorem.word()}`,\n  author: `${name.firstName()} ${name.lastName()}`,\n  original: lorem.sentence(),\n  language: lorem.word(),\n  owned: random.boolean(),\n  read: random.boolean(),\n  favorite: random.boolean(),\n  wishlist: random.boolean(),\n  publisher: company.companyName(),\n  year: date.past().getFullYear(),\n  pages: random.number(),\n  genres: [lorem.word()],\n  collections: [],\n  tags: [lorem.word()],\n  notes: lorem.text(),\n  imageSmall: random.image(),\n  imageLarge: random.image(),\n  rating: random.number(),\n  date: date.past().toISOString(),\n  isSelected: random.boolean(),\n  canBeSelected: true,\n})"
            },
            {
                "name": "BookFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/database/factories/book.factory.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<Book>({\n  id: random.number(),\n  ownerId: random.uuid(),\n  isbn: random.number(),\n  title: `${lorem.word()} ${lorem.word()}`,\n  author: `${name.firstName()} ${name.lastName()}`,\n  original: lorem.sentence(),\n  language: lorem.word(),\n  owned: random.boolean(),\n  read: random.boolean(),\n  favorite: random.boolean(),\n  wishlist: random.boolean(),\n  publisher: company.companyName(),\n  year: date.past().getFullYear(),\n  pages: random.number(),\n  genres: [lorem.word()],\n  collections: [],\n  tags: [lorem.word()],\n  notes: lorem.text(),\n  imageSmall: random.image(),\n  imageLarge: random.image(),\n  rating: random.number(),\n  date: date.past().toISOString(),\n})"
            },
            {
                "name": "bookInLibrary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/books-display/books-display.example.ts",
                "type": "",
                "defaultValue": "BookFactory.build({\n  canBeSelected: false,\n  isSelected: false,\n})"
            },
            {
                "name": "bookInLibrary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/books-section/books-section.example.ts",
                "type": "",
                "defaultValue": "BookFactory.build({\n  canBeSelected: false,\n  isSelected: false,\n})"
            },
            {
                "name": "bookInLibrary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/books-table/books-table.example.ts",
                "type": "",
                "defaultValue": "BookFactory.build({\n  canBeSelected: false,\n  isSelected: false,\n})"
            },
            {
                "name": "books",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/books-display/books-display.example.ts",
                "type": "",
                "defaultValue": "BookFactory.buildList(13, {\n  canBeSelected: true,\n  isSelected: true,\n})"
            },
            {
                "name": "books",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/books-section/books-section.example.ts",
                "type": "",
                "defaultValue": "BookFactory.buildList(5, {\n  canBeSelected: true,\n  isSelected: true,\n})"
            },
            {
                "name": "books",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/books-table/books-table.example.ts",
                "type": "",
                "defaultValue": "BookFactory.buildList(5, {\n  canBeSelected: true,\n  isSelected: true,\n})"
            },
            {
                "name": "cleanFormValues",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(formValues): object => {\n  // tslint:disable-next-line:prefer-const\n  let cleanValues = {}\n\n  Object.keys(formValues).forEach(prop => {\n    if (typeof formValues[prop] !== 'undefined') {\n      cleanValues[prop] = formValues[prop]\n    }\n  })\n  return cleanValues\n}"
            },
            {
                "name": "COLLECTION_GROUPINGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "[]",
                "defaultValue": "['No grouping', 'Size', 'Title']"
            },
            {
                "name": "CollectionFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/factories/collection.factory.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<Collection>({\n  id: random.uuid(),\n  ownerId: random.uuid(),\n  title: lorem.word(),\n  description: lorem.sentence(),\n  books: [],\n})"
            },
            {
                "name": "CollectionFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/database/factories/collection.factory.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<Collection>({\n  id: random.number(),\n  ownerId: random.uuid(),\n  title: lorem.word(),\n  description: lorem.sentence(),\n  books: [],\n})"
            },
            {
                "name": "confirmEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/validators.ts",
                "type": "",
                "defaultValue": "(control: AbstractControl) =>\n  confirmField(control, 'email')"
            },
            {
                "name": "confirmField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/validators.ts",
                "type": "",
                "defaultValue": "(control: AbstractControl, fieldName: string) => {\n  const field = control.get(fieldName).value\n  const fieldConfirm = control.get(`confirm${upperCaseFirstLetter(fieldName)}`)\n    .value\n\n  if (field !== fieldConfirm) {\n    control\n      .get(`confirm${upperCaseFirstLetter(fieldName)}`)\n      .setErrors({ fieldMismatch: true })\n    return { fieldMismatch: true }\n  }\n\n  return null\n}"
            },
            {
                "name": "confirmPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/validators.ts",
                "type": "",
                "defaultValue": "(control: AbstractControl) =>\n  confirmField(control, 'password')"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DarkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/ui.component.example.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: UiComponent,\n  props: { dark: true },\n})"
            },
            {
                "name": "dashboardRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/dashboard.module.ts",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    component: DashboardComponent,\n    children: [\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\n      { path: 'home', component: DashboardHomeComponent },\n      { path: 'books', loadChildren: () => BooksModule },\n      {\n        path: 'collections',\n        loadChildren: () => CollectionsModule,\n      },\n      {\n        path: 'authors',\n        loadChildren: () => AuthorsModule,\n      },\n      {\n        path: 'goodreads',\n        component: GoodreadsComponent,\n        // loadChildren: () => GoodreadsModule,\n      },\n      {\n        path: 'import',\n        component: ImportComponent,\n      },\n      {\n        path: 'profile',\n        loadChildren: () => ProfileModule,\n      },\n    ],\n  },\n]"
            },
            {
                "name": "DEFAULT_TABLE_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "object",
                "defaultValue": "{\n  Cover: true,\n  'Original title': false,\n  Author: true,\n  'Added on': false,\n  Year: false,\n  Publisher: false,\n  Language: false,\n  Pages: false,\n  Rating: false,\n  Favorites: true,\n}"
            },
            {
                "name": "DefaultTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/ui.component.example.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: UiComponent,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  name: 'production',\n  localDomain: 'https://booklib-834b9.firebaseapp.com',\n  rootUrl: '',\n  firebaseConfig: {\n    apiKey: 'AIzaSyCOJ1FNmdWadfNOCvh3Gu1fPBstpWt33Wc',\n    authDomain: 'booklib-834b9.firebaseapp.com',\n    databaseURL: 'https://booklib-834b9.firebaseio.com',\n    projectId: 'booklib-834b9',\n    storageBucket: 'booklib-834b9.appspot.com',\n    messagingSenderId: '590001193511',\n  },\n  auth0Config: {\n    clientId: '9DYcDTKbpSlCtB731to7GjxnXg2c9D2P',\n    clientSecret:\n      'YjktGc6Nvx3TvtpnkWTUtlJrvgXuDDqkuBcgVxDICnTk5ImeCRuyl6e_cxl3IDFp',\n    domain: 'deadalley.auth0.com',\n    redirectUri: 'https://booklib-834b9.firebaseapp.com/dashboard/goodreads',\n  },\n  goodreadsConfig: {\n    key: 'Lxpz447iVHg9nhHt2OCgQ',\n    secret: 'Ke2MlJv4ipWVRYARzef5JxYwtZSKWfktRMQZ4i4jSE',\n    domain: 'https://www.goodreads.com',\n    proxyDomain: 'https://book-lib-goodreads-proxy.herokuapp.com',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.test.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  name: 'test',\n  localDomain: 'http://localhost:4200',\n  rootUrl: 'test',\n  firebaseConfig: {\n    apiKey: 'AIzaSyCOJ1FNmdWadfNOCvh3Gu1fPBstpWt33Wc',\n    authDomain: 'booklib-834b9.firebaseapp.com',\n    databaseURL: 'https://booklib-834b9.firebaseio.com',\n    projectId: 'booklib-834b9',\n    storageBucket: 'booklib-834b9.appspot.com',\n    messagingSenderId: '590001193511',\n  },\n  auth0Config: {\n    clientId: '9DYcDTKbpSlCtB731to7GjxnXg2c9D2P',\n    clientSecret:\n      'YjktGc6Nvx3TvtpnkWTUtlJrvgXuDDqkuBcgVxDICnTk5ImeCRuyl6e_cxl3IDFp',\n    domain: 'deadalley.auth0.com',\n    redirectUri: 'http://localhost:4200/dashboard/goodreads',\n  },\n  goodreadsConfig: {\n    key: 'Lxpz447iVHg9nhHt2OCgQ',\n    secret: 'Ke2MlJv4ipWVRYARzef5JxYwtZSKWfktRMQZ4i4jSE',\n    domain: 'https://www.goodreads.com',\n    proxyDomain: 'http://localhost:5000',\n  },\n  testConfig: {\n    email: 'test_ryCSZBFX@test.com',\n    password: 'PKRh6VPUxPd3uASC',\n    name: 'test_ryCSZBFX',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  name: 'development',\n  localDomain: 'http://localhost:4200',\n  rootUrl: '',\n  firebaseConfig: {\n    apiKey: 'AIzaSyCOJ1FNmdWadfNOCvh3Gu1fPBstpWt33Wc',\n    authDomain: 'booklib-834b9.firebaseapp.com',\n    databaseURL: 'https://booklib-834b9.firebaseio.com',\n    projectId: 'booklib-834b9',\n    storageBucket: 'booklib-834b9.appspot.com',\n    messagingSenderId: '590001193511',\n  },\n  auth0Config: {\n    clientId: '9DYcDTKbpSlCtB731to7GjxnXg2c9D2P',\n    clientSecret:\n      'YjktGc6Nvx3TvtpnkWTUtlJrvgXuDDqkuBcgVxDICnTk5ImeCRuyl6e_cxl3IDFp',\n    domain: 'deadalley.auth0.com',\n    redirectUri: 'http://localhost:4200/dashboard/goodreads',\n  },\n  goodreadsConfig: {\n    key: 'Lxpz447iVHg9nhHt2OCgQ',\n    secret: 'Ke2MlJv4ipWVRYARzef5JxYwtZSKWfktRMQZ4i4jSE',\n    domain: 'https://www.goodreads.com',\n    proxyDomain: 'http://localhost:5000',\n  },\n  testConfig: {\n    email: 'test_ryCSZBFX@test.com',\n    password: 'PKRh6VPUxPd3uASC',\n    name: 'test_ryCSZBFX',\n  },\n}"
            },
            {
                "name": "FactoryArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/factories/utils.ts",
                "type": "",
                "defaultValue": "(factory, n = 10): any[] => {\n  const _ret = new Array()\n  for (let i = 0; i < n; i++) {\n    _ret.push(factory.build())\n  }\n\n  return _ret\n}"
            },
            {
                "name": "filterBook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "book =>\n  _.pick(book, [\n    'id',\n    'title',\n    'author',\n    'isbn',\n    'original',\n    'language',\n    'publisher',\n    'year',\n    'pages',\n    'imageSmall',\n    'imageLarge',\n    'goodreadsLink',\n    'goodreadsId',\n    'goodreadsAuthorId',\n  ])"
            },
            {
                "name": "filterBookForUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "book =>\n  _.pick(book, [\n    'id',\n    'owned',\n    'read',\n    'favorite',\n    'wishlist',\n    'date',\n    'genres',\n    'collections',\n    'tags',\n    'notes',\n    'rating',\n  ])"
            },
            {
                "name": "filterByParam",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(array: any[], filter: any[], param: string) => {\n  return filter ? array.filter(item => filter.includes(item[param])) : array\n}"
            },
            {
                "name": "FILTERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "[]",
                "defaultValue": "[\n  'No filter',\n  'Owned books',\n  'Read books',\n  'Wishlist',\n  'Favorite',\n  'Tags',\n]"
            },
            {
                "name": "findKeyByValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(object: object, value: any) =>\n  _.findKey(object, _value => _value === value)"
            },
            {
                "name": "formatDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(date: string) => {\n  return new Date(date).toLocaleDateString()\n}"
            },
            {
                "name": "GenericFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/factories/utils.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<GenericInterface>({\n  number: random.number(),\n  string: lorem.sentence()\n})"
            },
            {
                "name": "homeRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/home.module.ts",
                "type": "Route[]",
                "defaultValue": "[{ path: '', component: HomeComponent }]"
            },
            {
                "name": "HttpGet",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/http.ts",
                "type": "",
                "defaultValue": "(http: HttpClient, url: string, params: HttpParams) => {\n  return http\n    .get(url, { responseType: 'text', params })\n    .pipe(mergeMap(xml => parseXml(xml))) as any\n}"
            },
            {
                "name": "HttpGetAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/http.ts",
                "type": "",
                "defaultValue": "(http: HttpClient, requests) => {\n  return forkJoin(requests.map(request =>\n    HttpGet(http, request.url, request.params)\n  ) as any[])\n}"
            },
            {
                "name": "ignoreReturnFor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/promise.ts",
                "type": "",
                "defaultValue": "fn => args =>\n  Promise.resolve()\n    .then(() => fn(args))\n    .then(() => args)"
            },
            {
                "name": "LANGUAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "",
                "defaultValue": "objectToArray(_LANGUAGES)\n  .map(language => upperCaseFirstLetter(language))\n  .sort()"
            },
            {
                "name": "MAX_BOOKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "number",
                "defaultValue": "16"
            },
            {
                "name": "MAX_BOOKS_COLLECTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "MAX_BOOKS_DISPLAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "MAX_BOOKS_DISPLAY_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "number",
                "defaultValue": "16"
            },
            {
                "name": "MAX_BOOKS_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/constants.ts",
                "type": "number",
                "defaultValue": "24"
            },
            {
                "name": "notify",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/notifications.ts",
                "type": "",
                "defaultValue": "(\n  params,\n  options = { bold: true, allowDismiss: true, type: 'success' }\n) => {\n  const notifyTitle = options.bold\n    ? `<strong>${params.title}</strong>`\n    : params.title\n  $.notify(\n    {\n      message: params.message,\n      ...(params.title ? { title: notifyTitle } : {}),\n    },\n    {\n      allow_dismiss: options.allowDismiss,\n      ...(options.type ? { type: options.type } : {}),\n    }\n  )\n}"
            },
            {
                "name": "objectToArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(object: object) => {\n  if (!object) {\n    return\n  }\n  return Object.keys(object).map(key => object[key])\n}"
            },
            {
                "name": "objectToArrayWithRef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(object: object) => {\n  if (!object) {\n    return\n  }\n  return Object.keys(object).map(key => ({ ...object[key], ref: key }))\n}"
            },
            {
                "name": "PARAGRAPH_SPLIT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/pipes/truncate.pipe.ts",
                "type": "string",
                "defaultValue": "'<br /><br />'"
            },
            {
                "name": "parseAuthor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(author, books?) =>\n  ({\n    id: +author.id,\n    name: author.name,\n    about: author.about,\n    books,\n    imageSmall: author.small_image_url,\n    imageLarge: author.large_image_url\n      ? author.large_image_url\n      : author.image_url,\n    goodreadsLink: author.link,\n  } as Author)"
            },
            {
                "name": "parseAuthorId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "book => {\n  if (book.authors) {\n    const id = book.authors.author.id || book.authors.author[0].id\n    return +id\n  } else {\n    return +book.author.id._\n  }\n}"
            },
            {
                "name": "parseAuthorName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "book => {\n  if (book.authors) {\n    if (Array.isArray(book.authors.author)) {\n      return book.authors.author[0].name\n    } else {\n      return book.authors.author.name\n    }\n  }\n\n  return book.author.name\n}"
            },
            {
                "name": "parseBook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "book =>\n  ({\n    title: book.title,\n    author: parseAuthorName(book),\n    isbn: book.isbn,\n    publisher: book.publisher,\n    year: book.publication_year,\n    pages: book.num_pages,\n    imageLarge: book.large_image_url ? book.large_image_url : book.image_url,\n    imageSmall: book.small_image_url,\n    goodreadsLink: book.link,\n    goodreadsId: parseBookId(book),\n    goodreadsAuthorId: parseAuthorId(book),\n  } as Book)"
            },
            {
                "name": "parseBookId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "book => {\n  if (book.work) {\n    if (book.work.id._) {\n      return +book.work.id._\n    } else {\n      return +book.work.id\n    }\n  } else {\n    return +book.id._\n  }\n}"
            },
            {
                "name": "parseFirebaseAuthError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(error): string => {\n  switch (error.code) {\n    case 'auth/invalid-email':\n      return 'Please provide a valid e-mail'\n    case 'auth/user-not-found':\n      return 'User not found'\n    case 'auth/wrong-password':\n      return 'Wrong password'\n    default:\n      return 'Could not login. Try again.'\n  }\n}"
            },
            {
                "name": "parseXml",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/http.ts",
                "type": "",
                "defaultValue": "(xml: string) => {\n  return new Promise(resolve => {\n    const options = { explicitRoot: false, explicitArray: false }\n\n    parseString(xml, options, (err, res) => resolve(res))\n  })\n}"
            },
            {
                "name": "removeSpaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(string: string) => string.replace(/\\s/g, '')"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/authors/authors.module.ts",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    component: AuthorsComponent,\n    children: [\n      { path: '', component: AuthorsHomeComponent },\n      { path: 'find', component: FindAuthorComponent },\n      { path: ':id', component: AuthorComponent },\n    ],\n  },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/collections/collections.module.ts",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    component: CollectionsComponent,\n    children: [\n      { path: '', component: CollectionsHomeComponent },\n      {\n        path: ':id/edit',\n        component: EditCollectionComponent,\n        pathMatch: 'full',\n      },\n      {\n        path: 'new',\n        component: AddCollectionComponent,\n        pathMatch: 'full',\n      },\n    ],\n  },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/books/books.module.ts",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    component: BooksComponent,\n    children: [\n      { path: '', component: BooksHomeComponent },\n      { path: 'new', component: AddBookComponent, pathMatch: 'full' },\n      { path: 'find', component: FindBookComponent },\n      { path: 'import/:goodreadsId', component: MatchBookComponent },\n      { path: ':id', component: BookComponent },\n      { path: ':id/edit', component: EditBookComponent },\n    ],\n  },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/profile/profile.module.ts",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    component: ProfileComponent,\n    children: [\n      { path: '', component: UserInfoComponent },\n      { path: 'edit', component: EditUserInfoComponent },\n      {\n        path: '',\n        component: GoodreadsInfoComponent,\n        outlet: 'goodreads',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        component: DeleteAccountComponent,\n        outlet: 'delete',\n        pathMatch: 'full',\n      },\n    ],\n  },\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/sidebar/sidebar.component.ts",
                "type": "RouteInfo[]",
                "defaultValue": "[\n  { path: 'home', title: 'Home', icon: 'pe-7s-home', class: '' },\n  { path: 'books', title: 'Books', icon: 'pe-7s-notebook', class: '' },\n  {\n    path: 'collections',\n    title: 'Collections',\n    icon: 'pe-7s-albums',\n    class: '',\n  },\n  { path: 'authors', title: 'Authors', icon: 'pe-7s-pen', class: '' },\n  { path: 'goodreads', title: 'Goodreads', icon: 'pe-7s-server', class: '' },\n  {\n    path: 'import',\n    title: 'Import library',\n    icon: 'pe-7s-cloud-upload',\n    class: '',\n  },\n  { path: 'profile', title: 'Profile', icon: 'pe-7s-user', class: '' },\n]"
            },
            {
                "name": "scrollToAnchor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(location: string, wait: number): void => {\n  const element = document.querySelector('#' + location)\n  if (element) {\n    setTimeout(() => {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n        inline: 'nearest',\n      })\n    }, wait)\n  }\n}"
            },
            {
                "name": "tableItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/books-table/books-table.example.ts",
                "type": "object",
                "defaultValue": "{\n  Cover: false,\n  'Original title': false,\n  Author: true,\n  'Added on': false,\n  Year: false,\n  Publisher: false,\n  Language: false,\n  Pages: false,\n  Rating: false,\n  Favorites: true,\n}"
            },
            {
                "name": "tags",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/core/tags-list/tags-list.component.example.ts",
                "type": "[]",
                "defaultValue": "['tag1', 'tag2', 'tag3', 'the best tag']"
            },
            {
                "name": "unique",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "array => _.uniq(array)"
            },
            {
                "name": "upperCaseFirstLetter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/utils/helpers.ts",
                "type": "",
                "defaultValue": "(string: string) =>\n  string.charAt(0).toUpperCase() + string.slice(1)"
            },
            {
                "name": "USE_PROXY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/goodreads.service.ts",
                "type": "",
                "defaultValue": "true"
            },
            {
                "name": "UserFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/factories/user.factory.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<User>({\n  id: random.uuid(),\n  uid: random.uuid(),\n  name: `${name.firstName()} ${name.lastName()}`,\n  email: internet.email(),\n  books: [],\n  collections: [],\n  goodreadsId: random.number(),\n  avatarUrl: random.image(),\n  displayWelcomeMessage: random.boolean(),\n  backgroundUrl: random.image(),\n})"
            },
            {
                "name": "UserFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/database/factories/user.factory.ts",
                "type": "",
                "defaultValue": "Factory.makeFactory<User>({\n  id: random.uuid(),\n  uid: random.uuid(),\n  name: `${name.firstName()} ${name.lastName()}`,\n  email: internet.email(),\n  collections: [],\n  books: [],\n  goodreadsId: random.number(),\n  avatarUrl: random.image(),\n  displayWelcomeMessage: random.boolean(),\n  backgroundUrl: random.image(),\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AOA",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "any[][]",
                "file": "src/services/import.service.ts",
                "description": "",
                "kind": 166
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "__karma__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                },
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/utils/constants.ts": [
                {
                    "name": "_LANGUAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "object",
                    "defaultValue": "{\n  om: 'Afaan Oromoo',\n  aa: 'Afaraf',\n  af: 'Afrikaans',\n  ak: 'Akan',\n  an: 'aragonés',\n  ig: 'Asụsụ Igbo',\n  gn: 'Avañe\\'ẽ',\n  ae: 'avesta',\n  ay: 'aymar aru',\n  az: 'azərbaycan dili',\n  id: 'Bahasa Indonesia',\n  ms: 'bahasa Melayu',\n  bm: 'bamanankan',\n  jv: 'basa Jawa',\n  su: 'Basa Sunda',\n  bi: 'Bislama',\n  bs: 'bosanski jezik',\n  br: 'brezhoneg',\n  ca: 'català',\n  ch: 'Chamoru',\n  ny: 'chiCheŵa',\n  sn: 'chiShona',\n  co: 'corsu',\n  cy: 'Cymraeg',\n  da: 'dansk',\n  se: 'Davvisámegiella',\n  de: 'Deutsch',\n  nv: 'Diné bizaad',\n  et: 'eesti',\n  na: 'Ekakairũ Naoero',\n  en: 'English',\n  es: 'español',\n  eo: 'Esperanto',\n  eu: 'euskara',\n  ee: 'Eʋegbe',\n  to: 'faka Tonga',\n  mg: 'fiteny malagasy',\n  fr: 'français',\n  fy: 'Frysk',\n  ff: 'Fulfulde',\n  fo: 'føroyskt',\n  ga: 'Gaeilge',\n  gv: 'Gaelg',\n  sm: 'gagana fa\\'a Samoa',\n  gl: 'galego',\n  sq: 'gjuha shqipe',\n  gd: 'Gàidhlig',\n  ki: 'Gĩkũyũ',\n  ha: 'Hausa',\n  ho: 'Hiri Motu',\n  hr: 'hrvatski jezik',\n  io: 'Ido',\n  rw: 'Ikinyarwanda',\n  rn: 'Ikirundi',\n  ia: 'Interlingua',\n  nd: 'isiNdebele',\n  nr: 'isiNdebele',\n  xh: 'isiXhosa',\n  zu: 'isiZulu',\n  it: 'italiano',\n  ik: 'Iñupiaq',\n  pl: 'polski',\n  mh: 'Kajin M̧ajeļ',\n  kl: 'kalaallisut',\n  kr: 'Kanuri',\n  kw: 'Kernewek',\n  kg: 'KiKongo',\n  sw: 'Kiswahili',\n  ht: 'Kreyòl ayisyen',\n  kj: 'Kuanyama',\n  ku: 'Kurdî',\n  la: 'latine',\n  lv: 'latviešu valoda',\n  lt: 'lietuvių kalba',\n  ro: 'limba română',\n  li: 'Limburgs',\n  ln: 'Lingála',\n  lg: 'Luganda',\n  lb: 'Lëtzebuergesch',\n  hu: 'magyar',\n  mt: 'Malti',\n  nl: 'Nederlands',\n  no: 'Norsk',\n  nb: 'Norsk bokmål',\n  nn: 'Norsk nynorsk',\n  uz: 'O\\'zbek',\n  oc: 'occitan',\n  ie: 'Interlingue',\n  hz: 'Otjiherero',\n  ng: 'Owambo',\n  pt: 'português',\n  ty: 'Reo Tahiti',\n  rm: 'rumantsch grischun',\n  qu: 'Runa Simi',\n  sc: 'sardu',\n  za: 'Saɯ cueŋƅ',\n  st: 'Sesotho',\n  tn: 'Setswana',\n  ss: 'SiSwati',\n  sl: 'slovenski jezik',\n  sk: 'slovenčina',\n  so: 'Soomaaliga',\n  fi: 'suomi',\n  sv: 'Svenska',\n  mi: 'te reo Māori',\n  vi: 'Tiếng Việt',\n  lu: 'Tshiluba',\n  ve: 'Tshivenḓa',\n  tw: 'Twi',\n  tk: 'Türkmen',\n  tr: 'Türkçe',\n  ug: 'Uyƣurqə',\n  vo: 'Volapük',\n  fj: 'vosa Vakaviti',\n  wa: 'walon',\n  tl: 'Wikang Tagalog',\n  wo: 'Wollof',\n  ts: 'Xitsonga',\n  yo: 'Yorùbá',\n  sg: 'yângâ tî sängö',\n  is: 'Íslenska',\n  cs: 'čeština',\n  el: 'ελληνικά',\n  av: 'авар мацӀ',\n  ab: 'аҧсуа бызшәа',\n  ba: 'башҡорт теле',\n  be: 'беларуская мова',\n  bg: 'български език',\n  os: 'ирон æвзаг',\n  kv: 'коми кыв',\n  ky: 'Кыргызча',\n  mk: 'македонски јазик',\n  mn: 'монгол',\n  ce: 'нохчийн мотт',\n  ru: 'Русский язык',\n  sr: 'српски језик',\n  tt: 'татар теле',\n  tg: 'тоҷикӣ',\n  uk: 'українська мова',\n  cv: 'чӑваш чӗлхи',\n  cu: 'ѩзыкъ словѣньскъ',\n  kk: 'қазақ тілі',\n  hy: 'Հայերեն',\n  yi: 'ייִדיש',\n  he: 'עברית',\n  ur: 'اردو',\n  ar: 'العربية',\n  fa: 'فارسی',\n  ps: 'پښتو',\n  ks: 'कश्मीरी',\n  ne: 'नेपाली',\n  pi: 'पाऴि',\n  bh: 'भोजपुरी',\n  mr: 'मराठी',\n  sa: 'संस्कृतम्',\n  sd: 'सिन्धी',\n  hi: 'हिन्दी',\n  as: 'অসমীয়া',\n  bn: 'বাংলা',\n  pa: 'ਪੰਜਾਬੀ',\n  gu: 'ગુજરાતી',\n  or: 'ଓଡ଼ିଆ',\n  ta: 'தமிழ்',\n  te: 'తెలుగు',\n  kn: 'ಕನ್ನಡ',\n  ml: 'മലയാളം',\n  si: 'සිංහල',\n  th: 'ไทย',\n  lo: 'ພາສາລາວ',\n  bo: 'བོད་ཡིག',\n  dz: 'རྫོང་ཁ',\n  my: 'ဗမာစာ',\n  ka: 'ქართული',\n  ti: 'ትግርኛ',\n  am: 'አማርኛ',\n  iu: 'ᐃᓄᒃᑎᑐᑦ',\n  oj: 'ᐊᓂᔑᓈᐯᒧᐎᓐ',\n  cr: 'ᓀᐦᐃᔭᐍᐏᐣ',\n  km: 'ខ្មែរ',\n  zh: '中文 (Zhōngwén)',\n  ja: '日本語 (にほんご)',\n  ii: 'ꆈꌠ꒿ Nuosuhxop',\n  ko: '한국어 (韓國語)',\n}"
                },
                {
                    "name": "ANIMATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "object",
                    "defaultValue": "{\n  CARD: trigger('card', [\n    state(\n      '*',\n      style({\n        '-webkit-transform': 'translate3D(0px, 0px, 0px)',\n        transform: 'translate3D(0px, 0px, 0px)',\n        opacity: 1,\n      })\n    ),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        '-webkit-transform': 'translate3D(0px, 150px, 0px)',\n        transform: 'translate3D(0px, 150px, 0px)',\n      }),\n      animate('0.3s 0s ease-out'),\n    ]),\n  ]),\n  POPOVER: trigger('popOverState', [\n    state(\n      'show',\n      style({\n        opacity: 1,\n      })\n    ),\n    state(\n      'hide',\n      style({\n        display: 'none',\n        opacity: 0,\n      })\n    ),\n    transition('show => hide', animate('100ms ease-out')),\n    transition('hide => show', animate('100ms ease-in')),\n  ]),\n}"
                },
                {
                    "name": "BOOK_GROUPINGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'No grouping',\n  'Author',\n  'Date added',\n  'Language',\n  'Genre',\n  'Rating',\n  'Title',\n  'Year',\n]"
                },
                {
                    "name": "COLLECTION_GROUPINGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "[]",
                    "defaultValue": "['No grouping', 'Size', 'Title']"
                },
                {
                    "name": "DEFAULT_TABLE_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "object",
                    "defaultValue": "{\n  Cover: true,\n  'Original title': false,\n  Author: true,\n  'Added on': false,\n  Year: false,\n  Publisher: false,\n  Language: false,\n  Pages: false,\n  Rating: false,\n  Favorites: true,\n}"
                },
                {
                    "name": "FILTERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'No filter',\n  'Owned books',\n  'Read books',\n  'Wishlist',\n  'Favorite',\n  'Tags',\n]"
                },
                {
                    "name": "LANGUAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "",
                    "defaultValue": "objectToArray(_LANGUAGES)\n  .map(language => upperCaseFirstLetter(language))\n  .sort()"
                },
                {
                    "name": "MAX_BOOKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "number",
                    "defaultValue": "16"
                },
                {
                    "name": "MAX_BOOKS_COLLECTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "number",
                    "defaultValue": "8"
                },
                {
                    "name": "MAX_BOOKS_DISPLAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "number",
                    "defaultValue": "8"
                },
                {
                    "name": "MAX_BOOKS_DISPLAY_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "number",
                    "defaultValue": "16"
                },
                {
                    "name": "MAX_BOOKS_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/constants.ts",
                    "type": "number",
                    "defaultValue": "24"
                }
            ],
            "src/app/dashboard/sidebar/sidebar.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/sidebar/sidebar.component.ts",
                    "type": "any"
                },
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/sidebar/sidebar.component.ts",
                    "type": "RouteInfo[]",
                    "defaultValue": "[\n  { path: 'home', title: 'Home', icon: 'pe-7s-home', class: '' },\n  { path: 'books', title: 'Books', icon: 'pe-7s-notebook', class: '' },\n  {\n    path: 'collections',\n    title: 'Collections',\n    icon: 'pe-7s-albums',\n    class: '',\n  },\n  { path: 'authors', title: 'Authors', icon: 'pe-7s-pen', class: '' },\n  { path: 'goodreads', title: 'Goodreads', icon: 'pe-7s-server', class: '' },\n  {\n    path: 'import',\n    title: 'Import library',\n    icon: 'pe-7s-cloud-upload',\n    class: '',\n  },\n  { path: 'profile', title: 'Profile', icon: 'pe-7s-user', class: '' },\n]"
                }
            ],
            "src/app/app.routing.ts": [
                {
                    "name": "AppRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routing.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: 'home',\n    loadChildren: () => HomeModule,\n  },\n  {\n    path: 'library',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: 'dashboard',\n    loadChildren: () => DashboardModule,\n    canActivate: [AuthGuardService],\n  },\n]"
                }
            ],
            "src/utils/helpers.ts": [
                {
                    "name": "arrayToObjectWithId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(array: any[]) => {\n  if (!array) {\n    return\n  }\n  // tslint:disable-next-line:ban-comma-operator\n  return array.reduce((obj, item) => ((obj[item.id] = item), obj), {})\n}"
                },
                {
                    "name": "cleanFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(formValues): object => {\n  // tslint:disable-next-line:prefer-const\n  let cleanValues = {}\n\n  Object.keys(formValues).forEach(prop => {\n    if (typeof formValues[prop] !== 'undefined') {\n      cleanValues[prop] = formValues[prop]\n    }\n  })\n  return cleanValues\n}"
                },
                {
                    "name": "filterBook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "book =>\n  _.pick(book, [\n    'id',\n    'title',\n    'author',\n    'isbn',\n    'original',\n    'language',\n    'publisher',\n    'year',\n    'pages',\n    'imageSmall',\n    'imageLarge',\n    'goodreadsLink',\n    'goodreadsId',\n    'goodreadsAuthorId',\n  ])"
                },
                {
                    "name": "filterBookForUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "book =>\n  _.pick(book, [\n    'id',\n    'owned',\n    'read',\n    'favorite',\n    'wishlist',\n    'date',\n    'genres',\n    'collections',\n    'tags',\n    'notes',\n    'rating',\n  ])"
                },
                {
                    "name": "filterByParam",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(array: any[], filter: any[], param: string) => {\n  return filter ? array.filter(item => filter.includes(item[param])) : array\n}"
                },
                {
                    "name": "findKeyByValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(object: object, value: any) =>\n  _.findKey(object, _value => _value === value)"
                },
                {
                    "name": "formatDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(date: string) => {\n  return new Date(date).toLocaleDateString()\n}"
                },
                {
                    "name": "objectToArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(object: object) => {\n  if (!object) {\n    return\n  }\n  return Object.keys(object).map(key => object[key])\n}"
                },
                {
                    "name": "objectToArrayWithRef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(object: object) => {\n  if (!object) {\n    return\n  }\n  return Object.keys(object).map(key => ({ ...object[key], ref: key }))\n}"
                },
                {
                    "name": "parseAuthor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(author, books?) =>\n  ({\n    id: +author.id,\n    name: author.name,\n    about: author.about,\n    books,\n    imageSmall: author.small_image_url,\n    imageLarge: author.large_image_url\n      ? author.large_image_url\n      : author.image_url,\n    goodreadsLink: author.link,\n  } as Author)"
                },
                {
                    "name": "parseAuthorId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "book => {\n  if (book.authors) {\n    const id = book.authors.author.id || book.authors.author[0].id\n    return +id\n  } else {\n    return +book.author.id._\n  }\n}"
                },
                {
                    "name": "parseAuthorName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "book => {\n  if (book.authors) {\n    if (Array.isArray(book.authors.author)) {\n      return book.authors.author[0].name\n    } else {\n      return book.authors.author.name\n    }\n  }\n\n  return book.author.name\n}"
                },
                {
                    "name": "parseBook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "book =>\n  ({\n    title: book.title,\n    author: parseAuthorName(book),\n    isbn: book.isbn,\n    publisher: book.publisher,\n    year: book.publication_year,\n    pages: book.num_pages,\n    imageLarge: book.large_image_url ? book.large_image_url : book.image_url,\n    imageSmall: book.small_image_url,\n    goodreadsLink: book.link,\n    goodreadsId: parseBookId(book),\n    goodreadsAuthorId: parseAuthorId(book),\n  } as Book)"
                },
                {
                    "name": "parseBookId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "book => {\n  if (book.work) {\n    if (book.work.id._) {\n      return +book.work.id._\n    } else {\n      return +book.work.id\n    }\n  } else {\n    return +book.id._\n  }\n}"
                },
                {
                    "name": "parseFirebaseAuthError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(error): string => {\n  switch (error.code) {\n    case 'auth/invalid-email':\n      return 'Please provide a valid e-mail'\n    case 'auth/user-not-found':\n      return 'User not found'\n    case 'auth/wrong-password':\n      return 'Wrong password'\n    default:\n      return 'Could not login. Try again.'\n  }\n}"
                },
                {
                    "name": "removeSpaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(string: string) => string.replace(/\\s/g, '')"
                },
                {
                    "name": "scrollToAnchor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(location: string, wait: number): void => {\n  const element = document.querySelector('#' + location)\n  if (element) {\n    setTimeout(() => {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n        inline: 'nearest',\n      })\n    }, wait)\n  }\n}"
                },
                {
                    "name": "unique",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "array => _.uniq(array)"
                },
                {
                    "name": "upperCaseFirstLetter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/helpers.ts",
                    "type": "",
                    "defaultValue": "(string: string) =>\n  string.charAt(0).toUpperCase() + string.slice(1)"
                }
            ],
            "src/app/dashboard/core/author-card/author-card.example.ts": [
                {
                    "name": "author",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/author-card/author-card.example.ts",
                    "type": "",
                    "defaultValue": "AuthorFactory.build()"
                }
            ],
            "src/factories/author.factory.ts": [
                {
                    "name": "AuthorFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/factories/author.factory.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<Author>({\n  id: random.number(),\n  name: `${name.firstName()} ${name.lastName()}`,\n  about: lorem.text(),\n  books: [],\n  imageSmall: random.image(),\n  imageLarge: random.image(),\n  goodreadsLink: internet.url(),\n  isSelected: random.boolean(),\n})"
                }
            ],
            "src/app/dashboard/core/authors-display/authors-display.example.ts": [
                {
                    "name": "authors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/authors-display/authors-display.example.ts",
                    "type": "",
                    "defaultValue": "AuthorFactory.buildList(13)"
                }
            ],
            "src/app/dashboard/core/authors-section/authors-section.example.ts": [
                {
                    "name": "authors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/authors-section/authors-section.example.ts",
                    "type": "",
                    "defaultValue": "AuthorFactory.buildList(4)"
                }
            ],
            "src/app/dashboard/core/authors-table/authors-table.example.ts": [
                {
                    "name": "authors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/authors-table/authors-table.example.ts",
                    "type": "",
                    "defaultValue": "AuthorFactory.buildList(4)"
                }
            ],
            "src/app/dashboard/core/book-card/book-card.example.ts": [
                {
                    "name": "book",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/book-card/book-card.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.build({ canBeSelected: true })"
                },
                {
                    "name": "bookCannotBeSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/book-card/book-card.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.build({ canBeSelected: false })"
                }
            ],
            "src/factories/book.factory.ts": [
                {
                    "name": "BookFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/factories/book.factory.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<Book>({\n  id: random.uuid(),\n  ownerId: random.uuid(),\n  isbn: random.number(),\n  title: `${lorem.word()} ${lorem.word()}`,\n  author: `${name.firstName()} ${name.lastName()}`,\n  original: lorem.sentence(),\n  language: lorem.word(),\n  owned: random.boolean(),\n  read: random.boolean(),\n  favorite: random.boolean(),\n  wishlist: random.boolean(),\n  publisher: company.companyName(),\n  year: date.past().getFullYear(),\n  pages: random.number(),\n  genres: [lorem.word()],\n  collections: [],\n  tags: [lorem.word()],\n  notes: lorem.text(),\n  imageSmall: random.image(),\n  imageLarge: random.image(),\n  rating: random.number(),\n  date: date.past().toISOString(),\n  isSelected: random.boolean(),\n  canBeSelected: true,\n})"
                }
            ],
            "src/database/factories/book.factory.ts": [
                {
                    "name": "BookFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/database/factories/book.factory.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<Book>({\n  id: random.number(),\n  ownerId: random.uuid(),\n  isbn: random.number(),\n  title: `${lorem.word()} ${lorem.word()}`,\n  author: `${name.firstName()} ${name.lastName()}`,\n  original: lorem.sentence(),\n  language: lorem.word(),\n  owned: random.boolean(),\n  read: random.boolean(),\n  favorite: random.boolean(),\n  wishlist: random.boolean(),\n  publisher: company.companyName(),\n  year: date.past().getFullYear(),\n  pages: random.number(),\n  genres: [lorem.word()],\n  collections: [],\n  tags: [lorem.word()],\n  notes: lorem.text(),\n  imageSmall: random.image(),\n  imageLarge: random.image(),\n  rating: random.number(),\n  date: date.past().toISOString(),\n})"
                }
            ],
            "src/app/dashboard/core/books-display/books-display.example.ts": [
                {
                    "name": "bookInLibrary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/books-display/books-display.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.build({\n  canBeSelected: false,\n  isSelected: false,\n})"
                },
                {
                    "name": "books",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/books-display/books-display.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.buildList(13, {\n  canBeSelected: true,\n  isSelected: true,\n})"
                }
            ],
            "src/app/dashboard/core/books-section/books-section.example.ts": [
                {
                    "name": "bookInLibrary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/books-section/books-section.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.build({\n  canBeSelected: false,\n  isSelected: false,\n})"
                },
                {
                    "name": "books",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/books-section/books-section.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.buildList(5, {\n  canBeSelected: true,\n  isSelected: true,\n})"
                }
            ],
            "src/app/dashboard/core/books-table/books-table.example.ts": [
                {
                    "name": "bookInLibrary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/books-table/books-table.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.build({\n  canBeSelected: false,\n  isSelected: false,\n})"
                },
                {
                    "name": "books",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/books-table/books-table.example.ts",
                    "type": "",
                    "defaultValue": "BookFactory.buildList(5, {\n  canBeSelected: true,\n  isSelected: true,\n})"
                },
                {
                    "name": "tableItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/books-table/books-table.example.ts",
                    "type": "object",
                    "defaultValue": "{\n  Cover: false,\n  'Original title': false,\n  Author: true,\n  'Added on': false,\n  Year: false,\n  Publisher: false,\n  Language: false,\n  Pages: false,\n  Rating: false,\n  Favorites: true,\n}"
                }
            ],
            "src/factories/collection.factory.ts": [
                {
                    "name": "CollectionFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/factories/collection.factory.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<Collection>({\n  id: random.uuid(),\n  ownerId: random.uuid(),\n  title: lorem.word(),\n  description: lorem.sentence(),\n  books: [],\n})"
                }
            ],
            "src/database/factories/collection.factory.ts": [
                {
                    "name": "CollectionFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/database/factories/collection.factory.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<Collection>({\n  id: random.number(),\n  ownerId: random.uuid(),\n  title: lorem.word(),\n  description: lorem.sentence(),\n  books: [],\n})"
                }
            ],
            "src/utils/validators.ts": [
                {
                    "name": "confirmEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/validators.ts",
                    "type": "",
                    "defaultValue": "(control: AbstractControl) =>\n  confirmField(control, 'email')"
                },
                {
                    "name": "confirmField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/validators.ts",
                    "type": "",
                    "defaultValue": "(control: AbstractControl, fieldName: string) => {\n  const field = control.get(fieldName).value\n  const fieldConfirm = control.get(`confirm${upperCaseFirstLetter(fieldName)}`)\n    .value\n\n  if (field !== fieldConfirm) {\n    control\n      .get(`confirm${upperCaseFirstLetter(fieldName)}`)\n      .setErrors({ fieldMismatch: true })\n    return { fieldMismatch: true }\n  }\n\n  return null\n}"
                },
                {
                    "name": "confirmPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/validators.ts",
                    "type": "",
                    "defaultValue": "(control: AbstractControl) =>\n  confirmField(control, 'password')"
                }
            ],
            "src/app/ui/ui.component.example.ts": [
                {
                    "name": "DarkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/ui.component.example.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: UiComponent,\n  props: { dark: true },\n})"
                },
                {
                    "name": "DefaultTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/ui.component.example.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: UiComponent,\n})"
                }
            ],
            "src/app/dashboard/dashboard.module.ts": [
                {
                    "name": "dashboardRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/dashboard.module.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    component: DashboardComponent,\n    children: [\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\n      { path: 'home', component: DashboardHomeComponent },\n      { path: 'books', loadChildren: () => BooksModule },\n      {\n        path: 'collections',\n        loadChildren: () => CollectionsModule,\n      },\n      {\n        path: 'authors',\n        loadChildren: () => AuthorsModule,\n      },\n      {\n        path: 'goodreads',\n        component: GoodreadsComponent,\n        // loadChildren: () => GoodreadsModule,\n      },\n      {\n        path: 'import',\n        component: ImportComponent,\n      },\n      {\n        path: 'profile',\n        loadChildren: () => ProfileModule,\n      },\n    ],\n  },\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  name: 'production',\n  localDomain: 'https://booklib-834b9.firebaseapp.com',\n  rootUrl: '',\n  firebaseConfig: {\n    apiKey: 'AIzaSyCOJ1FNmdWadfNOCvh3Gu1fPBstpWt33Wc',\n    authDomain: 'booklib-834b9.firebaseapp.com',\n    databaseURL: 'https://booklib-834b9.firebaseio.com',\n    projectId: 'booklib-834b9',\n    storageBucket: 'booklib-834b9.appspot.com',\n    messagingSenderId: '590001193511',\n  },\n  auth0Config: {\n    clientId: '9DYcDTKbpSlCtB731to7GjxnXg2c9D2P',\n    clientSecret:\n      'YjktGc6Nvx3TvtpnkWTUtlJrvgXuDDqkuBcgVxDICnTk5ImeCRuyl6e_cxl3IDFp',\n    domain: 'deadalley.auth0.com',\n    redirectUri: 'https://booklib-834b9.firebaseapp.com/dashboard/goodreads',\n  },\n  goodreadsConfig: {\n    key: 'Lxpz447iVHg9nhHt2OCgQ',\n    secret: 'Ke2MlJv4ipWVRYARzef5JxYwtZSKWfktRMQZ4i4jSE',\n    domain: 'https://www.goodreads.com',\n    proxyDomain: 'https://book-lib-goodreads-proxy.herokuapp.com',\n  },\n}"
                }
            ],
            "src/environments/environment.test.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.test.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  name: 'test',\n  localDomain: 'http://localhost:4200',\n  rootUrl: 'test',\n  firebaseConfig: {\n    apiKey: 'AIzaSyCOJ1FNmdWadfNOCvh3Gu1fPBstpWt33Wc',\n    authDomain: 'booklib-834b9.firebaseapp.com',\n    databaseURL: 'https://booklib-834b9.firebaseio.com',\n    projectId: 'booklib-834b9',\n    storageBucket: 'booklib-834b9.appspot.com',\n    messagingSenderId: '590001193511',\n  },\n  auth0Config: {\n    clientId: '9DYcDTKbpSlCtB731to7GjxnXg2c9D2P',\n    clientSecret:\n      'YjktGc6Nvx3TvtpnkWTUtlJrvgXuDDqkuBcgVxDICnTk5ImeCRuyl6e_cxl3IDFp',\n    domain: 'deadalley.auth0.com',\n    redirectUri: 'http://localhost:4200/dashboard/goodreads',\n  },\n  goodreadsConfig: {\n    key: 'Lxpz447iVHg9nhHt2OCgQ',\n    secret: 'Ke2MlJv4ipWVRYARzef5JxYwtZSKWfktRMQZ4i4jSE',\n    domain: 'https://www.goodreads.com',\n    proxyDomain: 'http://localhost:5000',\n  },\n  testConfig: {\n    email: 'test_ryCSZBFX@test.com',\n    password: 'PKRh6VPUxPd3uASC',\n    name: 'test_ryCSZBFX',\n  },\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  name: 'development',\n  localDomain: 'http://localhost:4200',\n  rootUrl: '',\n  firebaseConfig: {\n    apiKey: 'AIzaSyCOJ1FNmdWadfNOCvh3Gu1fPBstpWt33Wc',\n    authDomain: 'booklib-834b9.firebaseapp.com',\n    databaseURL: 'https://booklib-834b9.firebaseio.com',\n    projectId: 'booklib-834b9',\n    storageBucket: 'booklib-834b9.appspot.com',\n    messagingSenderId: '590001193511',\n  },\n  auth0Config: {\n    clientId: '9DYcDTKbpSlCtB731to7GjxnXg2c9D2P',\n    clientSecret:\n      'YjktGc6Nvx3TvtpnkWTUtlJrvgXuDDqkuBcgVxDICnTk5ImeCRuyl6e_cxl3IDFp',\n    domain: 'deadalley.auth0.com',\n    redirectUri: 'http://localhost:4200/dashboard/goodreads',\n  },\n  goodreadsConfig: {\n    key: 'Lxpz447iVHg9nhHt2OCgQ',\n    secret: 'Ke2MlJv4ipWVRYARzef5JxYwtZSKWfktRMQZ4i4jSE',\n    domain: 'https://www.goodreads.com',\n    proxyDomain: 'http://localhost:5000',\n  },\n  testConfig: {\n    email: 'test_ryCSZBFX@test.com',\n    password: 'PKRh6VPUxPd3uASC',\n    name: 'test_ryCSZBFX',\n  },\n}"
                }
            ],
            "src/factories/utils.ts": [
                {
                    "name": "FactoryArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/factories/utils.ts",
                    "type": "",
                    "defaultValue": "(factory, n = 10): any[] => {\n  const _ret = new Array()\n  for (let i = 0; i < n; i++) {\n    _ret.push(factory.build())\n  }\n\n  return _ret\n}"
                },
                {
                    "name": "GenericFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/factories/utils.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<GenericInterface>({\n  number: random.number(),\n  string: lorem.sentence()\n})"
                }
            ],
            "src/app/home/home.module.ts": [
                {
                    "name": "homeRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/home.module.ts",
                    "type": "Route[]",
                    "defaultValue": "[{ path: '', component: HomeComponent }]"
                }
            ],
            "src/utils/http.ts": [
                {
                    "name": "HttpGet",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/http.ts",
                    "type": "",
                    "defaultValue": "(http: HttpClient, url: string, params: HttpParams) => {\n  return http\n    .get(url, { responseType: 'text', params })\n    .pipe(mergeMap(xml => parseXml(xml))) as any\n}"
                },
                {
                    "name": "HttpGetAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/http.ts",
                    "type": "",
                    "defaultValue": "(http: HttpClient, requests) => {\n  return forkJoin(requests.map(request =>\n    HttpGet(http, request.url, request.params)\n  ) as any[])\n}"
                },
                {
                    "name": "parseXml",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/http.ts",
                    "type": "",
                    "defaultValue": "(xml: string) => {\n  return new Promise(resolve => {\n    const options = { explicitRoot: false, explicitArray: false }\n\n    parseString(xml, options, (err, res) => resolve(res))\n  })\n}"
                }
            ],
            "src/utils/promise.ts": [
                {
                    "name": "ignoreReturnFor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/promise.ts",
                    "type": "",
                    "defaultValue": "fn => args =>\n  Promise.resolve()\n    .then(() => fn(args))\n    .then(() => args)"
                }
            ],
            "src/utils/notifications.ts": [
                {
                    "name": "notify",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/utils/notifications.ts",
                    "type": "",
                    "defaultValue": "(\n  params,\n  options = { bold: true, allowDismiss: true, type: 'success' }\n) => {\n  const notifyTitle = options.bold\n    ? `<strong>${params.title}</strong>`\n    : params.title\n  $.notify(\n    {\n      message: params.message,\n      ...(params.title ? { title: notifyTitle } : {}),\n    },\n    {\n      allow_dismiss: options.allowDismiss,\n      ...(options.type ? { type: options.type } : {}),\n    }\n  )\n}"
                }
            ],
            "src/pipes/truncate.pipe.ts": [
                {
                    "name": "PARAGRAPH_SPLIT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/pipes/truncate.pipe.ts",
                    "type": "string",
                    "defaultValue": "'<br /><br />'"
                }
            ],
            "src/app/dashboard/authors/authors.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/authors/authors.module.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    component: AuthorsComponent,\n    children: [\n      { path: '', component: AuthorsHomeComponent },\n      { path: 'find', component: FindAuthorComponent },\n      { path: ':id', component: AuthorComponent },\n    ],\n  },\n]"
                }
            ],
            "src/app/dashboard/collections/collections.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/collections/collections.module.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    component: CollectionsComponent,\n    children: [\n      { path: '', component: CollectionsHomeComponent },\n      {\n        path: ':id/edit',\n        component: EditCollectionComponent,\n        pathMatch: 'full',\n      },\n      {\n        path: 'new',\n        component: AddCollectionComponent,\n        pathMatch: 'full',\n      },\n    ],\n  },\n]"
                }
            ],
            "src/app/dashboard/books/books.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/books/books.module.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    component: BooksComponent,\n    children: [\n      { path: '', component: BooksHomeComponent },\n      { path: 'new', component: AddBookComponent, pathMatch: 'full' },\n      { path: 'find', component: FindBookComponent },\n      { path: 'import/:goodreadsId', component: MatchBookComponent },\n      { path: ':id', component: BookComponent },\n      { path: ':id/edit', component: EditBookComponent },\n    ],\n  },\n]"
                }
            ],
            "src/app/dashboard/profile/profile.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/profile/profile.module.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    component: ProfileComponent,\n    children: [\n      { path: '', component: UserInfoComponent },\n      { path: 'edit', component: EditUserInfoComponent },\n      {\n        path: '',\n        component: GoodreadsInfoComponent,\n        outlet: 'goodreads',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        component: DeleteAccountComponent,\n        outlet: 'delete',\n        pathMatch: 'full',\n      },\n    ],\n  },\n]"
                }
            ],
            "src/app/dashboard/core/tags-list/tags-list.component.example.ts": [
                {
                    "name": "tags",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/core/tags-list/tags-list.component.example.ts",
                    "type": "[]",
                    "defaultValue": "['tag1', 'tag2', 'tag3', 'the best tag']"
                }
            ],
            "src/services/goodreads.service.ts": [
                {
                    "name": "USE_PROXY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/goodreads.service.ts",
                    "type": "",
                    "defaultValue": "true"
                }
            ],
            "src/factories/user.factory.ts": [
                {
                    "name": "UserFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/factories/user.factory.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<User>({\n  id: random.uuid(),\n  uid: random.uuid(),\n  name: `${name.firstName()} ${name.lastName()}`,\n  email: internet.email(),\n  books: [],\n  collections: [],\n  goodreadsId: random.number(),\n  avatarUrl: random.image(),\n  displayWelcomeMessage: random.boolean(),\n  backgroundUrl: random.image(),\n})"
                }
            ],
            "src/database/factories/user.factory.ts": [
                {
                    "name": "UserFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/database/factories/user.factory.ts",
                    "type": "",
                    "defaultValue": "Factory.makeFactory<User>({\n  id: random.uuid(),\n  uid: random.uuid(),\n  name: `${name.firstName()} ${name.lastName()}`,\n  email: internet.email(),\n  collections: [],\n  books: [],\n  goodreadsId: random.number(),\n  avatarUrl: random.image(),\n  displayWelcomeMessage: random.boolean(),\n  backgroundUrl: random.image(),\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/services/import.service.ts": [
                {
                    "name": "AOA",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "any[][]",
                    "file": "src/services/import.service.ts",
                    "description": "",
                    "kind": 166
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PdFreeAngularcliPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/authors/author/author.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/authors/authors-home/authors-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/authors/authors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/authors/authors.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/authors/find-author/find-author.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FindAuthorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/book/book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/books-home/books-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/books.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/books.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/edit-book/add-book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddBookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/edit-book/edit-book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditBookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/49",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/find-book/find-book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FindBookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/match-book/match-book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchBookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/books/no-books/no-books.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoBooksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/collections/collections-home/collections-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollectionsHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/collections/collections.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollectionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/collections/collections.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/collections/edit-collection/add-collection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCollectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/collections/edit-collection/edit-collection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditCollectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/author-card/author-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/author-card/author-card.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "author",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/authors-display/authors-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/authors-display/authors-display.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/authors-section/authors-section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsSectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/authors-section/authors-section.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/authors-table/authors-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/authors-table/authors-table.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/book-buttons/book-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/book-card/book-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/book-card/book-card.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "book",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/book-card/book-card.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookCannotBeSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/book-tags/book-tags.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookTagsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-display/books-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-display/books-display.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookInLibrary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-display/books-display.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "books",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-section/books-section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksSectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-section/books-section.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookInLibrary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-section/books-section.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "books",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-table/books-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-table/books-table.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookInLibrary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-table/books-table.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "books",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/books-table/books-table.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/language-selector/language-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/library-navbar/library-navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LibraryNavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/loading-overlay/loading-overlay.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingOverlayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/page-navigator/page-navigator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNavigatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/pages/pages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/powered-by-goodreads/powered-by-goodreads.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PoweredByGoodreadsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/search-box/search-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/table-items/table-items.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/tags-list/tags-list.component.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tags",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/core/tags-list/tags-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-home/dashboard-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-home/last-added-books/last-added-books.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LastAddedBooksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-home/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dashboardRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/goodreads/goodreads-import/goodreads-import.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoodreadsImportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/goodreads/goodreads-search-author/goodreads-search-author.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoodreadsSearchAuthorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/goodreads/goodreads-search-book/goodreads-search-book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoodreadsSearchBookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/goodreads/goodreads.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoodreadsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/import/import.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/profile/delete-account/delete-account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteAccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/profile/edit-user-info/edit-user-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditUserInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/profile/goodreads-info/goodreads-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoodreadsInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/profile/profile.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/profile/user-info/user-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/shared/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/shared/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/sidebar/sidebar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouteInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/sidebar/sidebar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/sidebar/sidebar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/home/get-started/get-started.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GetStartedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home-navbar/home-navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeNavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home-section/home-section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeSectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "homeRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/popover-container/popover-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopoverContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/sign-in/sign-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/ui.component.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DarkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/ui.component.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/ui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/database/factories/book.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BookFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/database/factories/collection.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CollectionFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/database/factories/user.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/database/models/book.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/database/models/collection.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Collection",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/database/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/directives/click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/factories/author.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AuthorFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/factories/book.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BookFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/factories/collection.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CollectionFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/factories/user.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/factories/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenericInterface",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/factories/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FactoryArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/factories/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GenericFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/models/author.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Author",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/models/book.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/models/collection.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Collection",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/pipes/book-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BookFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/book-grouping.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BookGroupingPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/collection-grouping.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CollectionGroupingPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/iterable-object.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IterableObjectPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/page.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/push-to-bottom.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PushToBottomPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/search-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SearchFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/truncate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TruncatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pipes/truncate.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PARAGRAPH_SPLIT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/services/database.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DatabaseService",
                "coveragePercent": 0,
                "coverageCount": "0/75",
                "status": "low"
            },
            {
                "filePath": "src/services/goodreads.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GoodreadsService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/services/goodreads.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USE_PROXY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/import.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImportService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/services/library.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LibraryService",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/services/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/services/ui.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__karma__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_LANGUAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ANIMATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BOOK_GROUPINGS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLLECTION_GROUPINGS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TABLE_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FILTERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LANGUAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_BOOKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_BOOKS_COLLECTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_BOOKS_DISPLAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_BOOKS_DISPLAY_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_BOOKS_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "arrayToObjectWithId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cleanFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterBook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterBookForUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterByParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findKeyByValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formatDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "objectToArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "objectToArrayWithRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseAuthor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseAuthorId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseAuthorName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseBook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseBookId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseFirebaseAuthError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeSpaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scrollToAnchor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unique",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upperCaseFirstLetter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/http.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HttpGet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/http.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HttpGetAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/http.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseXml",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/notifications.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "notify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/promise.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ignoreReturnFor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "confirmEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "confirmField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "confirmPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}